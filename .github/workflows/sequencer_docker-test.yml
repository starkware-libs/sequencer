name: Sequencer-Docker-Test

on:
  workflow_dispatch:
  push:
    branches: [main]
    tags: ["v*.*.*"]
    paths:
      - ".github/workflows/sequencer_docker-test.yml"
      - "config/sequencer/presets/system_test_presets/single_node/node_0/executable_0/node_config.json"
      - "crates/**"
      - "scripts/dependencies.sh"
      - "scripts/install_build_tools.sh"
      - "deployments/images/base/Dockerfile"
      - "deployments/images/sequencer/**"
      - "deployments/monitoring/deploy_local_stack.sh"
      - "deployments/monitoring/local/docker-compose.yml"
      - "deployments/monitoring/local/.env"

  pull_request:
    paths:
      - ".github/workflows/sequencer_docker-test.yml"
      - "config/sequencer/presets/system_test_presets/single_node/node_0/executable_0/node_config.json"
      - "crates/**"
      - "scripts/dependencies.sh"
      - "scripts/install_build_tools.sh"
      - "deployments/images/base/Dockerfile"
      - "deployments/images/sequencer/**"
      - "deployments/monitoring/deploy_local_stack.sh"
      - "deployments/monitoring/local/docker-compose.yml"
      - "deployments/monitoring/local/.env"

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.job }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  sequencer_docker_compose_test:
    runs-on: starkware-ubuntu-24.04-large
    env:
      MONITORING_ENABLED: false
      SIMULATOR_RUN_FOREVER: false
      FOLLOW_LOGS: false
      SIMULATOR_TIMEOUT: 300

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Not required but recommended - enables build multi-platform images, export cache, etc
      # Also workaround for: https://github.com/docker/build-push-action/issues/461
      # https://github.com/docker/setup-buildx-action
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2.2.1

      - name: Run docker compose
        run: ./deployments/monitoring/deploy_local_stack.sh up -d --build

      # Getting the sequencer_simulator container id, then
      # Invoking `docker wait $container_id`.
      # docker wait will return the container exit_code.
      - name: Wait for simulator results
        working-directory: ./deployments/monitoring/local
        timeout-minutes: 5
        run: |
          simulator_id=$(docker compose ps -q sequencer_simulator 2>/dev/null)
          exit_code=$(docker wait $simulator_id)
          if (( $exit_code == 0 )); then
            echo "✅ Simulator test succeeded. exit_code=$exit_code"
          else
            echo "❌ Simulator test failed. exit_code=$exit_code"
            exit $exit_code
          fi

      # Printing all services logs separately. Makes it more readable later.
      - name: Print sequencer_node_setup logs
        if: always()
        working-directory: ./deployments/monitoring/local
        run: docker compose logs sequencer_node_setup

      - name: Print dummy_recorder logs
        if: always()
        working-directory: ./deployments/monitoring/local
        run: docker compose logs dummy_recorder

      - name: Print dummy_eth_to_strk_oracle logs
        if: always()
        working-directory: ./deployments/monitoring/local
        run: docker compose logs dummy_eth_to_strk_oracle

      - name: Print config_injector logs
        if: always()
        working-directory: ./deployments/monitoring/local
        run: docker compose logs config_injector

      - name: Print sequencer_node logs
        if: always()
        working-directory: ./deployments/monitoring/local
        run: docker compose logs sequencer_node

      - name: Print sequencer_simulator logs
        if: always()
        working-directory: ./deployments/monitoring/local
        run: docker compose logs sequencer_simulator

      # Shutting down all containers and cleaning volumes.
      - name: Cleanup
        if: always()
        run: ./deployments/monitoring/deploy_local_stack.sh down -v
