name: Committer-CI

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - edited
    paths:
      - ".github/workflows/committer_ci.yml"
      - "Cargo.toml"
      - "Cargo.lock"
      - "crates/starknet_committer_and_os_cli/**"
      - "crates/starknet_api/**"
      - "crates/starknet_committer/**"
      - "crates/starknet_patricia/**"
      - "scripts/dependencies.sh"

env:
  RUSTFLAGS: "-D warnings -C link-arg=-fuse-ld=lld"

# On PR events, cancel existing CI runs on this same PR for this workflow.
# Also, create different concurrency groups for different pushed commits, on push events.
concurrency:
  group: >
    ${{ github.workflow }}-
    ${{ github.ref }}-
    ${{ github.event_name == 'pull_request' && 'PR' || github.sha }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  run-regression-tests:
    runs-on: namespace-profile-medium-ubuntu-24-04-amd64
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@v4

      # Setup pypy and link to the location expected by .cargo/config.toml.
      # Python + requirements are needed to compile the OS.
      - uses: actions/setup-python@v5
        id: setup-pypy
        with:
          python-version: "pypy3.9"
          cache: "pip"
      - run: ln -s '${{ steps.setup-pypy.outputs.python-path }}' /usr/local/bin/pypy3.9
      - env:
          LD_LIBRARY_PATH: ${{ env.Python3_ROOT_DIR }}/bin
        run: echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}" >> $GITHUB_ENV
      - run: pip install -r scripts/requirements.txt

      - uses: ./.github/actions/bootstrap
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - id: auth
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: ${{ secrets.COMMITER_PRODUCTS_EXT_WRITER_JSON }}
      - uses: "google-github-actions/setup-gcloud@v2"
      - run: echo "BENCH_INPUT_FILES_PREFIX=$(cat ./crates/starknet_committer_and_os_cli/src/committer_cli/tests/flow_test_files_prefix)" >> $GITHUB_ENV
      - run: gcloud storage cp -r gs://committer-testing-artifacts/$BENCH_INPUT_FILES_PREFIX/* ./crates/starknet_committer_and_os_cli/test_inputs
      - run: cargo test -p starknet_committer_and_os_cli --release -- --include-ignored test_regression

  benchmarking:
    runs-on: namespace-profile-medium-ubuntu-24-04-amd64
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      # Checkout the base branch to get the old code.
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}

      # Setup pypy and link to the location expected by .cargo/config.toml.
      # Python + requirements are needed to compile the OS.
      - uses: actions/setup-python@v5
        id: setup-pypy
        with:
          python-version: "pypy3.9"
          cache: "pip"
      - run: ln -s '${{ steps.setup-pypy.outputs.python-path }}' /usr/local/bin/pypy3.9
      - env:
          LD_LIBRARY_PATH: ${{ env.Python3_ROOT_DIR }}/bin
        run: echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}" >> $GITHUB_ENV
      - run: pip install -r scripts/requirements.txt

      - uses: ./.github/actions/bootstrap
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      # Download the old benchmark inputs.
      - id: auth
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: ${{ secrets.COMMITER_PRODUCTS_EXT_WRITER_JSON }}
      - uses: "google-github-actions/setup-gcloud@v2"
      - run: echo "OLD_BENCH_INPUT_FILES_PREFIX=$(cat ./crates/starknet_committer_and_os_cli/src/committer_cli/tests/flow_test_files_prefix)" >> $GITHUB_ENV
      - run: gcloud storage cp -r gs://committer-testing-artifacts/$OLD_BENCH_INPUT_FILES_PREFIX/* ./crates/starknet_committer_and_os_cli/test_inputs

      # List the existing benchmarks.
      - run: |
          cargo bench -p starknet_committer_and_os_cli -- --list | grep ': benchmark$' | sed -e "s/: benchmark$//" > benchmarks_list.txt

      # Benchmark the old code.
      - run: cargo bench -p starknet_committer_and_os_cli

      # Backup the downloaded files to avoid re-downloading them if they didn't change (overwritten by checkout).
      - run: mv ./crates/starknet_committer_and_os_cli/test_inputs/tree_flow_inputs.json ./crates/starknet_committer_and_os_cli/test_inputs/tree_flow_inputs.json_bu
      - run: mv ./crates/starknet_committer_and_os_cli/test_inputs/committer_flow_inputs.json ./crates/starknet_committer_and_os_cli/test_inputs/committer_flow_inputs.json_bu

      # Checkout the new code.
      - uses: actions/checkout@v4
        with:
          clean: false
      - run: echo "NEW_BENCH_INPUT_FILES_PREFIX=$(cat ./crates/starknet_committer_and_os_cli/src/committer_cli/tests/flow_test_files_prefix)" >> $GITHUB_ENV

      # Input files didn't change.
      - if: env.OLD_BENCH_INPUT_FILES_PREFIX == env.NEW_BENCH_INPUT_FILES_PREFIX
        run: |
          mv ./crates/starknet_committer_and_os_cli/test_inputs/tree_flow_inputs.json_bu ./crates/starknet_committer_and_os_cli/test_inputs/tree_flow_inputs.json
          mv ./crates/starknet_committer_and_os_cli/test_inputs/committer_flow_inputs.json_bu ./crates/starknet_committer_and_os_cli/test_inputs/committer_flow_inputs.json

      # Input files did change, download new inputs.
      - if: env.OLD_BENCH_INPUT_FILES_PREFIX != env.NEW_BENCH_INPUT_FILES_PREFIX
        run: |
          gcloud storage cp -r gs://committer-testing-artifacts/$NEW_BENCH_INPUT_FILES_PREFIX/* ./crates/starknet_committer_and_os_cli/test_inputs

      # Benchmark the new code, splitting the benchmarks, and prepare the results for posting a comment.
      - run: bash ./crates/starknet_committer_and_os_cli/benches/bench_split_and_prepare_post.sh benchmarks_list.txt bench_new.txt

      - run: echo BENCHES_RESULT=$(cat bench_new.txt) >> $GITHUB_ENV

      # Comment with a link to the workflow (or update existing comment on rerun).
      - name: Find Comment
        if: github.event_name == 'pull_request'
        uses: starkware-libs/find-comment@v3
        id: find-benchmark-comment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: Benchmark movements

      - name: Create comment
        # If the PR number is found and the comment is not found, create a new comment.
        if: github.event_name == 'pull_request'
          && steps.find-benchmark-comment.outputs.comment-id == ''
        uses: starkware-libs/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ env.BENCHES_RESULT }}

      - name: Update comment
        # If the PR number is found and the comment exists, update it.
        if: github.event_name == 'pull_request'
          && steps.find-benchmark-comment.outputs.comment-id != ''
        uses: starkware-libs/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          comment-id: ${{ steps.find-benchmark-comment.outputs.comment-id }}
          edit-mode: replace
          body: ${{ env.BENCHES_RESULT }}
