name: Sequencer - Consolidated Node System Test

on:
  workflow_dispatch:
    inputs:
      liveness_test_duration_sec:
        description: Time in seconds to keep the liveness test running.
        required: false
        default: 10
        type: number

  pull_request:
    paths:
      - ".github/workflows/consolidated_system_test.yaml"
      - "crates/**"
      - "scripts/system_tests/**"

env:
  job_link: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
  deployment_config_path: ${{ github.workspace }}/config/sequencer/testing/deployment_configs/deployment_test_consolidated.json
  namespace: sequencer-consolidated-system-test-run-${{ github.run_number }}-attempt-${{ github.run_attempt }}

permissions:
  contents: read

# On PR events, cancel existing CI runs on this same PR for this workflow.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.job }}-${{ github.event_name == 'workflow_dispatch' && github.run_id || 'pr' }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  system_test:
    runs-on: starkware-ubuntu-24.04-large
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create k3d cluster (Local k8s)
        uses: AbsaOSS/k3d-action@v2
        with:
          # Assumption: only one PR can run per machine at a time.
          cluster-name: "consolidated-system-test"
          args: >-
            --verbose
            --agents 1
            --no-lb
            --wait
            --timeout 120s

      # Install rust components.
      - uses: ./.github/actions/bootstrap
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Anvil
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: v0.3.0

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: pipenv

      - name: Setup pipenv
        run: python3 -m pip install pipenv

      - name: Install dependencies with pipenv
        run: pipenv install kubernetes

      - name: Setup cdk8s-cli
        run: npm install -g cdk8s-cli

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: deployments/images/sequencer/Dockerfile
          tags: sequencer:local
          load: true
          push: false
          build-args: |
            BUILD_MODE=debug

      - name: Build binaries
        run: cargo build --bin sequencer_node_setup --bin sequencer_simulator

      - name: Create storage files
        run: ./target/debug/sequencer_node_setup --output-base-dir ./output --data-prefix-path /data --n-consolidated 1 --n-distributed 0

      - name: Export application config dir
        run: |
          set -euo pipefail

          # Get the config directory
          app_config_dir=$(jq -r '.application_config_subdir' ${{ env.deployment_config_path }})

          # Export to environment for the next step
          echo "app_config_dir=$app_config_dir" >> $GITHUB_ENV
          echo "app_config_dir is: $app_config_dir"

      # TODO(Nadin): move the config definition out of the GitHub Actions secret section, since it no longer contains sensitive values.
      - name: Inject Config Secrets
        run: |
          python ./scripts/system_tests/config_secrets_injector.py --deployment_config_path ${{ env.deployment_config_path }} --secrets_json '${{ vars.SEQUENCER_CONFIG_JSON }}'

      - name: Generate k8s manifests
        working-directory: deployments/sequencer
        run: |
          pipenv install
          cdk8s import
          echo "Generating Kubernetes manifests using deployment config at: ${{ env.deployment_config_path }}:"
          cat "${{ env.deployment_config_path }}"
          cdk8s synth --app "pipenv run python main.py --namespace ${{ env.namespace }} --deployment-config-file ${{ env.deployment_config_path }} --deployment-image sequencer:local"

      - name: Deploy Sequencer
        working-directory: deployments/sequencer
        run: |
          echo "Deploying Sequencer..."
          kubectl create namespace ${{ env.namespace }}
          kubectl apply -R -f ./dist/

      - name: Set default namespace
        run: kubectl config set-context --current --namespace ${{ env.namespace }}

      - name: Get container logs
        if: always()
        run: |
          echo "üì• Getting pod logs and descriptions from namespace: $namespace"

          # List all pods in the namespace
          kubectl get pods -n "$namespace"

          # For each pod, get logs and description
          for pod in $(kubectl get pods -n "$namespace" -o jsonpath='{.items[*].metadata.name}'); do
            echo "---------------------------------------------"
            echo "Logs for pod: $pod"
            kubectl logs -n "$namespace" "$pod" || echo "‚ö†Ô∏è Failed to get logs for $pod"

            echo ""
            echo "Description for pod: $pod"
            kubectl describe pod -n "$namespace" "$pod" || echo "‚ö†Ô∏è Failed to describe pod $pod"
            echo "---------------------------------------------"
            echo ""
          done
