"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Probe = exports.ConnectionScheme = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const _action = require("./_action");
var ConnectionScheme;
(function (ConnectionScheme) {
    /**
     * Use HTTP request for connecting to host.
     */
    ConnectionScheme["HTTP"] = "HTTP";
    /**
     * Use HTTPS request for connecting to host.
     */
    ConnectionScheme["HTTPS"] = "HTTPS";
})(ConnectionScheme = exports.ConnectionScheme || (exports.ConnectionScheme = {}));
/**
 * Probe describes a health check to be performed against a container to
 * determine whether it is alive or ready to receive traffic.
 */
class Probe {
    constructor(probeOptions, tcpSocketOptions, commandOptions, httpGetOptions) {
        this.probeOptions = probeOptions;
        this.tcpSocketOptions = tcpSocketOptions;
        this.commandOptions = commandOptions;
        this.httpGetOptions = httpGetOptions;
    }
    /**
     * Defines a probe based on an HTTP GET request to the IP address of the container.
     *
     * @param path The URL path to hit
     * @param options Options
     */
    static fromHttpGet(path, options = {}) {
        return new Probe(options, undefined, undefined, { path, ...options });
    }
    /**
     * Defines a probe based on a command which is executed within the container.
     *
     * @param command The command to execute
     * @param options Options
     */
    static fromCommand(command, options = {}) {
        return new Probe(options, undefined, { command, ...options }, undefined);
    }
    /**
     * Defines a probe based opening a connection to a TCP socket on the container.
     *
     * @param options Options
     */
    static fromTcpSocket(options = {}) {
        return new Probe(options, options, undefined, undefined);
    }
    /**
     * @internal
     */
    _toKube(cont) {
        const exec = this.commandOptions ? _action.Action.fromCommand(this.commandOptions.command) : undefined;
        const httpGet = this.httpGetOptions ? _action.Action.fromHttpGet(cont, this.httpGetOptions.path, this.httpGetOptions) : undefined;
        const tcpSocket = this.tcpSocketOptions ? _action.Action.fromTcpSocket(cont, this.tcpSocketOptions) : undefined;
        return {
            failureThreshold: this.probeOptions.failureThreshold ?? 3,
            initialDelaySeconds: this.probeOptions.initialDelaySeconds ? this.probeOptions.initialDelaySeconds.toSeconds() : undefined,
            periodSeconds: this.probeOptions.periodSeconds ? this.probeOptions.periodSeconds.toSeconds() : undefined,
            successThreshold: this.probeOptions.successThreshold,
            timeoutSeconds: this.probeOptions.timeoutSeconds ? this.probeOptions.timeoutSeconds.toSeconds() : undefined,
            exec: exec,
            httpGet,
            tcpSocket,
        };
    }
}
exports.Probe = Probe;
_a = JSII_RTTI_SYMBOL_1;
Probe[_a] = { fqn: "cdk8s-plus-28.Probe", version: "2.5.6" };
//# sourceMappingURL=data:application/json;base64,