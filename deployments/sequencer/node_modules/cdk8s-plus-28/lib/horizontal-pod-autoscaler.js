"use strict";
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Replicas = exports.ScalingStrategy = exports.MetricTarget = exports.Metric = exports.HorizontalPodAutoscaler = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdk8s_1 = require("cdk8s");
const base_1 = require("./base");
const k8s = require("./imports/k8s");
/**
 * A HorizontalPodAutoscaler scales a workload up or down in response to a metric
 * change. This allows your services to scale up when demand is high and scale down
 * when they are no longer needed.
 *
 *
 * Typical use cases for HorizontalPodAutoscaler:
 *
 * * When Memory usage is above 70%, scale up the number of replicas to meet the demand.
 * * When CPU usage is below 30%, scale down the number of replicas to save resources.
 * * When a service is experiencing a spike in traffic, scale up the number of replicas
 *   to meet the demand. Then, when the traffic subsides, scale down the number of
 *   replicas to save resources.
 *
 * The autoscaler uses the following algorithm to determine the number of replicas to scale:
 *
 * `desiredReplicas = ceil[currentReplicas * ( currentMetricValue / desiredMetricValue )]`
 *
 * HorizontalPodAutoscaler's can be used to with any `Scalable` workload:
 * * Deployment
 * * StatefulSet
 *
 * **Targets that already have a replica count defined:**
 *
 * Remove any replica counts from the target resource before associating with a
 * HorizontalPodAutoscaler. If this isn't done, then any time a change to that object is applied,
 * Kubernetes will scale the current number of Pods to the value of the target.replicas key. This
 * may not be desired and could lead to unexpected behavior.
 *
 * @see https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#implicit-maintenance-mode-deactivation
 *
 * @example
 * const backend = new kplus.Deployment(this, 'Backend', ...);
 *
 * const hpa = new kplus.HorizontalPodAutoscaler(chart, 'Hpa', {
 *  target: backend,
 *  maxReplicas: 10,
 *  scaleUp: {
 *    policies: [
 *      {
 *        replicas: kplus.Replicas.absolute(3),
 *        duration: Duration.minutes(5),
 *      },
 *    ],
 *  },
 * });
 */
class HorizontalPodAutoscaler extends base_1.Resource {
    constructor(scope, id, props) {
        super(scope, id);
        this.resourceType = 'horizontalpodautoscaler';
        this._defaultScalingDuration = cdk8s_1.Duration.seconds(15);
        this.apiObject = new k8s.KubeHorizontalPodAutoscalerV2(this, 'Resource', {
            metadata: props.metadata,
            spec: cdk8s_1.Lazy.any({ produce: () => this._toKube() }),
        });
        if (props?.minReplicas && props.minReplicas > props.maxReplicas) {
            throw new Error(`'minReplicas' (${props.minReplicas}) must be less than or equal to 'maxReplicas' (${props.maxReplicas}) in order for HorizontalPodAutoscaler to scale.`);
        }
        if (props?.scaleUp?.stabilizationWindow !== undefined) {
            this._validateStabilizationWindow('scaleUp', props.scaleUp.stabilizationWindow);
        }
        if (props?.scaleDown?.stabilizationWindow !== undefined) {
            this._validateStabilizationWindow('scaleDown', props.scaleDown.stabilizationWindow);
        }
        if (props?.scaleUp?.policies?.length) {
            this._validateScalingPolicies('scaleUp', props.scaleUp.policies);
        }
        if (props?.scaleDown?.policies?.length) {
            this._validateScalingPolicies('scaleDown', props.scaleDown.policies);
        }
        this.target = props.target;
        this.target.markHasAutoscaler();
        this.maxReplicas = props.maxReplicas;
        this.minReplicas = props.minReplicas ?? 1;
        this.metrics = props.metrics;
        this.scaleUp = {
            strategy: ScalingStrategy.MAX_CHANGE,
            stabilizationWindow: cdk8s_1.Duration.seconds(0),
            ...props.scaleUp,
            policies: props.scaleUp?.policies?.map((p) => ({ duration: this._defaultScalingDuration, ...p })) ?? [
                {
                    replicas: Replicas.absolute(4),
                    duration: cdk8s_1.Duration.minutes(1),
                },
                {
                    replicas: Replicas.percent(200),
                    duration: cdk8s_1.Duration.minutes(1),
                },
            ],
        };
        if (props?.scaleUp?.policies?.length) {
            this._validateScalingPolicies('scaleUp', props.scaleUp.policies);
        }
        this.scaleDown = {
            strategy: ScalingStrategy.MAX_CHANGE,
            stabilizationWindow: cdk8s_1.Duration.minutes(5),
            ...props.scaleDown,
            policies: props.scaleDown?.policies?.map((p) => ({ duration: this._defaultScalingDuration, ...p })) ?? [
                {
                    replicas: Replicas.absolute(this.minReplicas),
                    duration: cdk8s_1.Duration.minutes(5),
                },
            ],
        };
        this.node.addValidation({ validate: () => this._validateTargetReplicas() });
        this.node.addValidation({ validate: () => this._validateTargetContainers() });
    }
    /**
     * Validate a list of scaling policies.
     * @internal
     */
    _validateScalingPolicies(direction, policies) {
        policies.forEach((p) => {
            if (p.duration !== undefined) {
                this._validateScalingPolicyDuration(direction, p.duration);
            }
        });
    }
    /**
     * Validate `ScalingPolicy.duration` is within the allowed range.
     *
     * `duration` range: 1 second - 30 min
     *
     * Kubernetes name: `ScalingPolicy.periodSeconds`.
     * @see https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/horizontal-pod-autoscaler-v2/#HorizontalPodAutoscalerSpec
     * @internal
     */
    _validateScalingPolicyDuration(direction, duration) {
        const periodSeconds = duration.toSeconds() ?? 15;
        const isWithinRange = Boolean(0 < periodSeconds && periodSeconds <= 1800);
        if (!isWithinRange) {
            throw new Error(`'${direction}.policies' duration (${duration.toHumanString()}) is outside of the allowed range. Must be at least 1 second long and no longer than 30 minutes.`);
        }
    }
    /**
     * Validate `ScalingRules.stabilizationWindow` is within the allowed range.
     *
     * `stabilizationWindow` range: 0 seconds - 1 hour
     *
     * @see https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/horizontal-pod-autoscaler-v2/#HorizontalPodAutoscalerSpec
     * @internal
     */
    _validateStabilizationWindow(direction, window) {
        const windowSeconds = window.toSeconds();
        const isWithinRange = Boolean(0 <= windowSeconds && windowSeconds <= 3600);
        if (!isWithinRange) {
            throw new Error(`'${direction}.stabilizationWindow' (${window.toHumanString()}) must be 0 seconds or more with a max of 1 hour.`);
        }
    }
    /**
     * Guarantee the HPA has a metric to scale on.
     * Verify that metrics are configured, if not check every pod container has a resource limit or
     * request defined.
     * @internal
     */
    _validateTargetContainers() {
        const containers = this.target.toScalingTarget().containers;
        const hasResourceConstraints = containers.some((c) => this._hasRequestsOrLimits(c));
        if (!hasResourceConstraints && !this.metrics) {
            return ['If HorizontalPodAutoscaler does not have metrics defined, then every container in the target must have a CPU or memory resource constraint defined.'];
        }
        return [];
    }
    /**
     * Prevent the HPA from scaling a target with a replica count defined.
     * @see https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#implicit-maintenance-mode-deactivation
     * @internal
     */
    _validateTargetReplicas() {
        const replicas = this.target.toScalingTarget().replicas;
        if (replicas) {
            return [
                `HorizontalPodAutoscaler target cannot have a fixed number of replicas (${replicas}).`,
            ];
        }
        return [];
    }
    /**
     * Validate that the container has at least one CPU/memory request/limit defined.
     * @internal
     */
    _hasRequestsOrLimits(c) {
        const hasRequests = c.resources?.cpu?.request || c.resources?.memory?.request;
        const hasLimits = c.resources?.cpu?.limit || c.resources?.memory?.limit;
        return Boolean(hasRequests || hasLimits);
    }
    /**
     * @internal
     */
    _toKube() {
        const scalingTarget = this.target.toScalingTarget();
        return {
            maxReplicas: this.maxReplicas,
            minReplicas: this.minReplicas,
            scaleTargetRef: {
                apiVersion: scalingTarget.apiVersion,
                name: scalingTarget.name,
                kind: scalingTarget.kind,
            },
            metrics: this.metrics?.map(m => m._toKube()),
            behavior: {
                scaleUp: {
                    policies: this.scaleUp.policies?.map((p) => ({
                        ...p.replicas._toKube(),
                        periodSeconds: p.duration?.toSeconds() ?? this._defaultScalingDuration.toSeconds(),
                    })),
                    selectPolicy: this.scaleUp.strategy,
                    stabilizationWindowSeconds: this.scaleUp.stabilizationWindow?.toSeconds(),
                },
                scaleDown: {
                    policies: this.scaleDown.policies?.map((p) => ({
                        ...p.replicas._toKube(),
                        periodSeconds: p.duration?.toSeconds() ?? this._defaultScalingDuration.toSeconds(),
                    })),
                    selectPolicy: this.scaleDown.strategy,
                    stabilizationWindowSeconds: this.scaleDown.stabilizationWindow?.toSeconds(),
                },
            },
        };
    }
}
exports.HorizontalPodAutoscaler = HorizontalPodAutoscaler;
_a = JSII_RTTI_SYMBOL_1;
HorizontalPodAutoscaler[_a] = { fqn: "cdk8s-plus-28.HorizontalPodAutoscaler", version: "2.5.6" };
/**
 * A metric condition that HorizontalPodAutoscaler's scale on.
 */
class Metric {
    constructor(metric) {
        this.metric = metric;
        this.type = metric.type;
    }
    /**
     * Metric that tracks the CPU of a container. This metric
     * will be tracked across all pods of the current scale target.
     *
     */
    static containerCpu(options) {
        return new Metric({
            type: 'ContainerResource',
            containerResource: {
                name: 'cpu',
                container: options.container.name,
                target: options.target._toKube(),
            },
        });
    }
    /**
     * Metric that tracks the Memory of a container. This metric
     * will be tracked across all pods of the current scale target.
     *
     */
    static containerMemory(options) {
        return new Metric({
            type: 'ContainerResource',
            containerResource: {
                name: 'memory',
                container: options.container.name,
                target: options.target._toKube(),
            },
        });
    }
    /**
     * Metric that tracks the volume size of a container. This metric
     * will be tracked across all pods of the current scale target.
     *
     */
    static containerStorage(options) {
        return new Metric({
            type: 'ContainerResource',
            containerResource: {
                name: 'storage',
                container: options.container.name,
                target: options.target._toKube(),
            },
        });
    }
    /**
     * Metric that tracks the local ephemeral storage of a container. This metric
     * will be tracked across all pods of the current scale target.
     *
     */
    static containerEphemeralStorage(options) {
        return new Metric({
            type: 'ContainerResource',
            containerResource: {
                name: 'ephemeral-storage',
                container: options.container.name,
                target: options.target._toKube(),
            },
        });
    }
    /**
     * A global metric that is not associated with any Kubernetes object.
     * Allows for autoscaling based on information coming from components running outside of
     * the cluster.
     *
     * Use case:
     * * Scale up when the length of an SQS queue is greater than 10 messages.
     * * Scale down when an outside load balancer's queries are less than 10000 per second.
     */
    static external(options) {
        return new Metric({
            type: 'External',
            external: {
                metric: {
                    name: options.name,
                    selector: options.labelSelector?._toKube(),
                },
                target: options.target._toKube(),
            },
        });
    }
    /**
    * Metric that describes a metric of a kubernetes object
    *
    * Use case:
    * * Scale on a Kubernetes Ingress's hits-per-second metric.
    */
    static object(options) {
        return new Metric({
            type: 'Object',
            object: {
                describedObject: {
                    apiVersion: options.object.apiVersion,
                    kind: options.object.kind,
                    name: options.object.name,
                },
                metric: {
                    name: options.name,
                    selector: options.labelSelector?._toKube(),
                },
                target: options.target._toKube(),
            },
        });
    }
    /**
     * A pod metric that will be averaged across all pods of the current scale target.
     *
     * Use case:
     * * Average CPU utilization across all pods
     * * Transactions processed per second across all pods
     */
    static pods(options) {
        return new Metric({
            type: 'Pods',
            pods: {
                metric: {
                    name: options.name,
                    selector: options.labelSelector?._toKube(),
                },
                target: options.target._toKube(),
            },
        });
    }
    /**
     * Tracks the available CPU of the pods in a target.
     *
     * Note: Since the resource usages of all the containers are summed up the total
     * pod utilization may not accurately represent the individual container resource
     * usage. This could lead to situations where a single container might be running
     * with high usage and the HPA will not scale out because the overall pod usage
     * is still within acceptable limits.
     *
     * Use case:
     * * Scale up when CPU is above 40%.
     */
    static resourceCpu(target) {
        return new Metric({
            type: 'Resource',
            resource: {
                name: 'cpu',
                target: target._toKube(),
            },
        });
    }
    /**
     * Tracks the available Memory of the pods in a target.
     *
     * Note: Since the resource usages of all the containers are summed up the total
     * pod utilization may not accurately represent the individual container resource
     * usage. This could lead to situations where a single container might be running
     * with high usage and the HPA will not scale out because the overall pod usage
     * is still within acceptable limits.
     *
     * Use case:
     * * Scale up when Memory is above 512MB.
     */
    static resourceMemory(target) {
        return new Metric({
            type: 'Resource',
            resource: {
                name: 'memory',
                target: target._toKube(),
            },
        });
    }
    /**
     * Tracks the available Storage of the pods in a target.
     *
     * Note: Since the resource usages of all the containers are summed up the total
     * pod utilization may not accurately represent the individual container resource
     * usage. This could lead to situations where a single container might be running
     * with high usage and the HPA will not scale out because the overall pod usage
     * is still within acceptable limits.
     *
     */
    static resourceStorage(target) {
        return new Metric({
            type: 'Resource',
            resource: {
                name: 'storage',
                target: target._toKube(),
            },
        });
    }
    /**
     * Tracks the available Ephemeral Storage of the pods in a target.
     *
     * Note: Since the resource usages of all the containers are summed up the total
     * pod utilization may not accurately represent the individual container resource
     * usage. This could lead to situations where a single container might be running
     * with high usage and the HPA will not scale out because the overall pod usage
     * is still within acceptable limits.
     *
     */
    static resourceEphemeralStorage(target) {
        return new Metric({
            type: 'Resource',
            resource: {
                name: 'ephemeral-storage',
                target: target._toKube(),
            },
        });
    }
    /**
     * @internal
     */
    _toKube() {
        return this.metric;
    }
}
exports.Metric = Metric;
_b = JSII_RTTI_SYMBOL_1;
Metric[_b] = { fqn: "cdk8s-plus-28.Metric", version: "2.5.6" };
/**
 * A metric condition that will trigger scaling behavior when satisfied.
 *
 * @example
 *
 * MetricTarget.averageUtilization(70); // 70% average utilization
 *
 */
class MetricTarget {
    constructor(metric) {
        this.metric = metric;
    }
    /**
    * Target a specific target value.
    *
    * @param value The target value.
    */
    static value(value) {
        return new MetricTarget({
            type: 'Value',
            value: k8s.Quantity.fromNumber(value),
        });
    }
    /**
     * Target the average value across all relevant pods.
     *
     * @param averageValue The average metric value.
     */
    static averageValue(averageValue) {
        return new MetricTarget({
            type: 'AverageValue',
            averageValue: k8s.Quantity.fromNumber(averageValue),
        });
    }
    /**
     * Target a percentage value across all relevant pods.
     *
     * @param averageUtilization The percentage of the utilization metric. e.g. `50` for 50%.
     */
    static averageUtilization(averageUtilization) {
        return new MetricTarget({
            type: 'Utilization',
            averageUtilization,
        });
    }
    /**
     * @internal
     */
    _toKube() {
        return this.metric;
    }
}
exports.MetricTarget = MetricTarget;
_c = JSII_RTTI_SYMBOL_1;
MetricTarget[_c] = { fqn: "cdk8s-plus-28.MetricTarget", version: "2.5.6" };
var ScalingStrategy;
(function (ScalingStrategy) {
    /**
     * Use the policy that provisions the most changes.
     */
    ScalingStrategy["MAX_CHANGE"] = "Max";
    /**
     * Use the policy that provisions the least amount of changes.
     */
    ScalingStrategy["MIN_CHANGE"] = "Min";
    /**
     * Disables scaling in this direction.
     *
     * @deprecated - Omit the ScalingRule instead
     */
    ScalingStrategy["DISABLED"] = "Disabled";
})(ScalingStrategy = exports.ScalingStrategy || (exports.ScalingStrategy = {}));
/**
 * The amount of replicas that will change.
 */
class Replicas {
    constructor(replicas) {
        this.replicas = replicas;
    }
    /**
     * Changes the pods by a percentage of the it's current value.
     *
     * @param value The percentage of change to apply. Must be greater than 0.
     */
    static percent(value) {
        return new Replicas({
            type: 'Percent',
            value,
        });
    }
    /**
     * Changes the pods by a percentage of the it's current value.
     *
     * @param value The amount of change to apply. Must be greater than 0.
     */
    static absolute(value) {
        return new Replicas({
            type: 'Pods',
            value,
        });
    }
    /**
     * @internal
     */
    _toKube() {
        return {
            type: this.replicas.type,
            value: this.replicas.value,
        };
    }
}
exports.Replicas = Replicas;
_d = JSII_RTTI_SYMBOL_1;
Replicas[_d] = { fqn: "cdk8s-plus-28.Replicas", version: "2.5.6" };
//# sourceMappingURL=data:application/json;base64,