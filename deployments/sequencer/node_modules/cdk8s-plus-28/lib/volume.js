"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HostPathVolumeType = exports.AzureDiskPersistentVolumeCachingMode = exports.AzureDiskPersistentVolumeKind = exports.EmptyDirMedium = exports.Volume = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdk8s_1 = require("cdk8s");
const constructs_1 = require("constructs");
const k8s = require("./imports/k8s");
/**
 * Volume represents a named volume in a pod that may be accessed by any
 * container in the pod.
 *
 * Docker also has a concept of volumes, though it is somewhat looser and less
 * managed. In Docker, a volume is simply a directory on disk or in another
 * Container. Lifetimes are not managed and until very recently there were only
 * local-disk-backed volumes. Docker now provides volume drivers, but the
 * functionality is very limited for now (e.g. as of Docker 1.7 only one volume
 * driver is allowed per Container and there is no way to pass parameters to
 * volumes).
 *
 * A Kubernetes volume, on the other hand, has an explicit lifetime - the same
 * as the Pod that encloses it. Consequently, a volume outlives any Containers
 * that run within the Pod, and data is preserved across Container restarts. Of
 * course, when a Pod ceases to exist, the volume will cease to exist, too.
 * Perhaps more importantly than this, Kubernetes supports many types of
 * volumes, and a Pod can use any number of them simultaneously.
 *
 * At its core, a volume is just a directory, possibly with some data in it,
 * which is accessible to the Containers in a Pod. How that directory comes to
 * be, the medium that backs it, and the contents of it are determined by the
 * particular volume type used.
 *
 * To use a volume, a Pod specifies what volumes to provide for the Pod (the
 * .spec.volumes field) and where to mount those into Containers (the
 * .spec.containers[*].volumeMounts field).
 *
 * A process in a container sees a filesystem view composed from their Docker
 * image and volumes. The Docker image is at the root of the filesystem
 * hierarchy, and any volumes are mounted at the specified paths within the
 * image. Volumes can not mount onto other volumes
 */
class Volume extends constructs_1.Construct {
    constructor(scope, id, name, config) {
        super(scope, id);
        this.name = name;
        this.config = config;
        this.name = name.slice(0, 63);
    }
    /**
     * Mounts an Amazon Web Services (AWS) EBS volume into your pod.
     * Unlike emptyDir, which is erased when a pod is removed, the contents of an EBS volume are
     * persisted and the volume is unmounted. This means that an EBS volume can be pre-populated with data,
     * and that data can be shared between pods.
     *
     * There are some restrictions when using an awsElasticBlockStore volume:
     *
     * - the nodes on which pods are running must be AWS EC2 instances.
     * - those instances need to be in the same region and availability zone as the EBS volume.
     * - EBS only supports a single EC2 instance mounting a volume.
     */
    static fromAwsElasticBlockStore(scope, id, volumeId, options = {}) {
        return new Volume(scope, id, options.name ?? `ebs-${volumeId}`, {
            awsElasticBlockStore: {
                volumeId,
                fsType: options.fsType ?? 'ext4',
                partition: options.partition,
                readOnly: options.readOnly ?? false,
            },
        });
    }
    /**
     * Mounts a Microsoft Azure Data Disk into a pod.
     */
    static fromAzureDisk(scope, id, diskName, diskUri, options = {}) {
        return new Volume(scope, id, options.name ?? `azuredisk-${diskName}`, {
            azureDisk: {
                diskName,
                diskUri,
                cachingMode: options.cachingMode ?? AzureDiskPersistentVolumeCachingMode.NONE,
                fsType: options.fsType ?? 'ext4',
                kind: options.kind ?? AzureDiskPersistentVolumeKind.SHARED,
                readOnly: options.readOnly ?? false,
            },
        });
    }
    /**
     * Mounts a Google Compute Engine (GCE) persistent disk (PD) into your Pod.
     * Unlike emptyDir, which is erased when a pod is removed, the contents of a PD are
     * preserved and the volume is merely unmounted. This means that a PD can be pre-populated
     * with data, and that data can be shared between pods.
     *
     * There are some restrictions when using a gcePersistentDisk:
     *
     * - the nodes on which Pods are running must be GCE VMs
     * - those VMs need to be in the same GCE project and zone as the persistent disk
     */
    static fromGcePersistentDisk(scope, id, pdName, options = {}) {
        return new Volume(scope, id, options.name ?? `gcedisk-${pdName}`, {
            gcePersistentDisk: {
                pdName,
                fsType: options.fsType ?? 'ext4',
                partition: options.partition,
                readOnly: options.readOnly ?? false,
            },
        });
    }
    /**
     * Populate the volume from a ConfigMap.
     *
     * The configMap resource provides a way to inject configuration data into
     * Pods. The data stored in a ConfigMap object can be referenced in a volume
     * of type configMap and then consumed by containerized applications running
     * in a Pod.
     *
     * When referencing a configMap object, you can simply provide its name in the
     * volume to reference it. You can also customize the path to use for a
     * specific entry in the ConfigMap.
     *
     * @param configMap The config map to use to populate the volume.
     * @param options Options
     */
    static fromConfigMap(scope, id, configMap, options = {}) {
        return new Volume(scope, id, options.name ?? `configmap-${configMap.name}`, {
            configMap: {
                name: configMap.name,
                defaultMode: options.defaultMode,
                optional: options.optional,
                items: Volume.renderItems(options.items),
            },
        });
    }
    /**
     * An emptyDir volume is first created when a Pod is assigned to a Node, and
     * exists as long as that Pod is running on that node. As the name says, it is
     * initially empty. Containers in the Pod can all read and write the same
     * files in the emptyDir volume, though that volume can be mounted at the same
     * or different paths in each Container. When a Pod is removed from a node for
     * any reason, the data in the emptyDir is deleted forever.
     *
     * @see http://kubernetes.io/docs/user-guide/volumes#emptydir
     *
     * @param options - Additional options.
     */
    static fromEmptyDir(scope, id, name, options = {}) {
        return new Volume(scope, id, name, {
            emptyDir: {
                medium: options.medium,
                sizeLimit: options.sizeLimit
                    ? k8s.Quantity.fromString(`${options.sizeLimit.toMebibytes()}Mi`)
                    : undefined,
            },
        });
    }
    /**
     * Populate the volume from a Secret.
     *
     * A secret volume is used to pass sensitive information, such as passwords, to Pods.
     * You can store secrets in the Kubernetes API and mount them as files for use by pods
     * without coupling to Kubernetes directly.
     *
     * secret volumes are backed by tmpfs (a RAM-backed filesystem)
     * so they are never written to non-volatile storage.
     *
     * @see https://kubernetes.io/docs/concepts/storage/volumes/#secret
     *
     * @param secr The secret to use to populate the volume.
     * @param options Options
     */
    static fromSecret(scope, id, secr, options = {}) {
        return new Volume(scope, id, options.name ?? `secret-${secr.name}`, {
            secret: {
                secretName: secr.name,
                defaultMode: options.defaultMode,
                optional: options.optional,
                items: Volume.renderItems(options.items),
            },
        });
    }
    /**
     * Used to mount a PersistentVolume into a Pod.
     * PersistentVolumeClaims are a way for users to "claim" durable storage (such as a GCE PersistentDisk or an iSCSI volume)
     * without knowing the details of the particular cloud environment.
     *
     * @see https://kubernetes.io/docs/concepts/storage/persistent-volumes/
     */
    static fromPersistentVolumeClaim(scope, id, claim, options = {}) {
        return new Volume(scope, id, options.name ?? `pvc-${claim.name}`, {
            persistentVolumeClaim: {
                claimName: claim.name,
                readOnly: options.readOnly ?? false,
            },
        });
    }
    /**
     * Used to mount a file or directory from the host node's filesystem into a Pod.
     * This is not something that most Pods will need, but it offers a powerful
     * escape hatch for some applications.
     *
     * @see https://kubernetes.io/docs/concepts/storage/volumes/#hostpath
     */
    static fromHostPath(scope, id, name, options) {
        return new Volume(scope, id, name, {
            hostPath: {
                path: options.path,
                type: options.type ?? HostPathVolumeType.DEFAULT,
            },
        });
    }
    /**
     * Used to mount an NFS share into a Pod.
     *
     * @see https://kubernetes.io/docs/concepts/storage/volumes/#nfs
     */
    static fromNfs(scope, id, name, options) {
        return new Volume(scope, id, name, {
            nfs: {
                server: options.server,
                path: options.path,
                readOnly: options.readOnly,
            },
        });
    }
    /**
     * Populate the volume from a CSI driver, for example the Secrets Store CSI
     * Driver: https://secrets-store-csi-driver.sigs.k8s.io/introduction.html.
     * Which in turn needs an associated provider to source the secrets, such as
     * the AWS Secrets Manager and Systems Manager Parameter Store provider:
     * https://aws.github.io/secrets-store-csi-driver-provider-aws/.
     *
     * @param driver The name of the CSI driver to use to populate the volume.
     * @param options Options for the CSI volume, including driver-specific ones.
     */
    static fromCsi(scope, id, driver, options = {}) {
        return new Volume(scope, id, options.name ?? cdk8s_1.Names.toDnsLabel(scope, { extra: [id] }), {
            csi: {
                driver: driver,
                fsType: options.fsType,
                readOnly: options.readOnly,
                volumeAttributes: options.attributes,
            },
        });
    }
    asVolume() {
        return this;
    }
    /**
     * @internal
     */
    _toKube() {
        return {
            name: this.name,
            ...this.config,
        };
    }
}
exports.Volume = Volume;
_a = JSII_RTTI_SYMBOL_1;
Volume[_a] = { fqn: "cdk8s-plus-28.Volume", version: "2.5.6" };
/**
  * @internal
 */
Volume.renderItems = (items) => {
    if (!items) {
        return undefined;
    }
    const result = new Array();
    for (const key of Object.keys(items).sort()) {
        result.push({
            key,
            path: items[key].path,
            mode: items[key].mode,
        });
    }
    return result;
};
/**
 * The medium on which to store the volume.
 */
var EmptyDirMedium;
(function (EmptyDirMedium) {
    /**
     * The default volume of the backing node.
     */
    EmptyDirMedium["DEFAULT"] = "";
    /**
     * Mount a tmpfs (RAM-backed filesystem) for you instead. While tmpfs is very
     * fast, be aware that unlike disks, tmpfs is cleared on node reboot and any
     * files you write will count against your Container's memory limit.
     */
    EmptyDirMedium["MEMORY"] = "Memory";
})(EmptyDirMedium = exports.EmptyDirMedium || (exports.EmptyDirMedium = {}));
/**
 * Azure Disk kinds.
 */
var AzureDiskPersistentVolumeKind;
(function (AzureDiskPersistentVolumeKind) {
    /**
     * Multiple blob disks per storage account.
     */
    AzureDiskPersistentVolumeKind["SHARED"] = "Shared";
    /**
     * Single blob disk per storage account.
     */
    AzureDiskPersistentVolumeKind["DEDICATED"] = "Dedicated";
    /**
     * Azure managed data disk.
     */
    AzureDiskPersistentVolumeKind["MANAGED"] = "Managed";
})(AzureDiskPersistentVolumeKind = exports.AzureDiskPersistentVolumeKind || (exports.AzureDiskPersistentVolumeKind = {}));
/**
 * Azure disk caching modes.
 */
var AzureDiskPersistentVolumeCachingMode;
(function (AzureDiskPersistentVolumeCachingMode) {
    /**
     * None.
     */
    AzureDiskPersistentVolumeCachingMode["NONE"] = "None";
    /**
     * ReadOnly.
     */
    AzureDiskPersistentVolumeCachingMode["READ_ONLY"] = "ReadOnly";
    /**
     * ReadWrite.
     */
    AzureDiskPersistentVolumeCachingMode["READ_WRITE"] = "ReadWrite";
})(AzureDiskPersistentVolumeCachingMode = exports.AzureDiskPersistentVolumeCachingMode || (exports.AzureDiskPersistentVolumeCachingMode = {}));
/**
 * Host path types.
 */
var HostPathVolumeType;
(function (HostPathVolumeType) {
    /**
     * Empty string (default) is for backward compatibility, which means that no
     * checks will be performed before mounting the hostPath volume.
     */
    HostPathVolumeType["DEFAULT"] = "";
    /**
     * If nothing exists at the given path, an empty directory will be created
     * there as needed with permission set to 0755, having the same group and
     * ownership with Kubelet.
     */
    HostPathVolumeType["DIRECTORY_OR_CREATE"] = "DirectoryOrCreate";
    /**
     * A directory must exist at the given path.
     */
    HostPathVolumeType["DIRECTORY"] = "Directory";
    /**
     * If nothing exists at the given path, an empty file will be created there
     * as needed with permission set to 0644, having the same group and ownership
     * with Kubelet.
     */
    HostPathVolumeType["FILE_OR_CREATE"] = "FileOrCreate";
    /**
     * A file must exist at the given path.
     */
    HostPathVolumeType["FILE"] = "File";
    /**
     * A UNIX socket must exist at the given path.
     */
    HostPathVolumeType["SOCKET"] = "Socket";
    /**
     * A character device must exist at the given path.
     */
    HostPathVolumeType["CHAR_DEVICE"] = "CharDevice";
    /**
     * A block device must exist at the given path.
     */
    HostPathVolumeType["BLOCK_DEVICE"] = "BlockDevice";
})(HostPathVolumeType = exports.HostPathVolumeType || (exports.HostPathVolumeType = {}));
//# sourceMappingURL=data:application/json;base64,