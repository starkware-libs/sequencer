"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClusterRole = exports.Role = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdk8s_1 = require("cdk8s");
const constructs_1 = require("constructs");
const base = require("./base");
const k8s = require("./imports/k8s");
const rb = require("./role-binding");
const utils_1 = require("./utils");
class ImportedRole extends constructs_1.Construct {
    constructor(scope, id, name) {
        super(scope, id);
        this.resourceType = 'roles';
        this._name = name;
    }
    get name() {
        return this._name;
    }
    get apiVersion() {
        return k8s.KubeRole.GVK.apiVersion;
    }
    get apiGroup() {
        return 'rbac.authorization.k8s.io';
    }
    get kind() {
        return k8s.KubeRole.GVK.kind;
    }
    get resourceName() {
        return this.name;
    }
}
/**
 * Role is a namespaced, logical grouping of PolicyRules that can be referenced
 * as a unit by a RoleBinding.
 */
class Role extends base.Resource {
    constructor(scope, id, props = {}) {
        super(scope, id);
        this.resourceType = 'roles';
        this._rules = [];
        this.apiObject = new k8s.KubeRole(this, 'Resource', {
            metadata: props.metadata,
            rules: cdk8s_1.Lazy.any({ produce: () => this.synthesizeRules() }),
        });
        for (const rule of props.rules ?? []) {
            this.allow(rule.verbs, ...rule.resources);
        }
    }
    /**
     * Imports a role from the cluster as a reference.
     */
    static fromRoleName(scope, id, name) {
        return new ImportedRole(scope, id, name);
    }
    /**
     * Rules associaated with this Role.
     * Returns a copy, use `allow` to add rules.
     */
    get rules() {
        return [...this._rules];
    }
    /**
     * Add permission to perform a list of HTTP verbs on a collection of
     * resources.
     *
     * @param resources The resource(s) to apply to
     * @see https://kubernetes.io/docs/reference/access-authn-authz/authorization/#determine-the-request-verb
     */
    allow(verbs, ...resources) {
        this._rules.push({ verbs, resources });
    }
    /**
     * Add "create" permission for the resources.
     * @param resources The resource(s) to apply to
     */
    allowCreate(...resources) {
        this.allow(['create'], ...resources);
    }
    /**
     * Add "get" permission for the resources.
     * @param resources The resource(s) to apply to
     */
    allowGet(...resources) {
        this.allow(['get'], ...resources);
    }
    /**
     * Add "list" permission for the resources.
     * @param resources The resource(s) to apply to
     */
    allowList(...resources) {
        this.allow(['list'], ...resources);
    }
    /**
     * Add "watch" permission for the resources.
     * @param resources The resource(s) to apply to
     */
    allowWatch(...resources) {
        this.allow(['watch'], ...resources);
    }
    /**
     * Add "update" permission for the resources.
     * @param resources The resource(s) to apply to
     */
    allowUpdate(...resources) {
        this.allow(['update'], ...resources);
    }
    /**
     * Add "patch" permission for the resources.
     * @param resources The resource(s) to apply to
     */
    allowPatch(...resources) {
        this.allow(['patch'], ...resources);
    }
    /**
     * Add "delete" permission for the resources.
     * @param resources The resource(s) to apply to
     */
    allowDelete(...resources) {
        this.allow(['delete'], ...resources);
    }
    /**
     * Add "deletecollection" permission for the resources.
     * @param resources The resource(s) to apply to
     */
    allowDeleteCollection(...resources) {
        this.allow(['deletecollection'], ...resources);
    }
    /**
     * Add "get", "list", and "watch" permissions for the resources.
     * @param resources The resource(s) to apply to
     */
    allowRead(...resources) {
        this.allow(['get', 'list', 'watch'], ...resources);
    }
    /**
     * Add "get", "list", "watch", "create", "update", "patch", "delete", and
     * "deletecollection" permissions for the resources.
     *
     * @param resources The resource(s) to apply to
     */
    allowReadWrite(...resources) {
        this.allow(['get', 'list', 'watch', 'create', 'update', 'patch', 'delete', 'deletecollection'], ...resources);
    }
    /**
     * Create a RoleBinding that binds the permissions in this Role
     * to a list of subjects, that will only apply this role's namespace.
     * @param subjects a list of subjects to bind to
     */
    bind(...subjects) {
        const subjectsAddress = utils_1.address(...subjects);
        const binding = new rb.RoleBinding(this, `RoleBinding${subjectsAddress}`, {
            metadata: {
                namespace: this.metadata.namespace,
            },
            role: this,
        });
        binding.addSubjects(...subjects);
        return binding;
    }
    synthesizeRules() {
        const rules = [];
        for (const rule of this._rules) {
            for (const resource of rule.resources) {
                rules.push({
                    verbs: rule.verbs,
                    apiGroups: [resource.apiGroup === 'core' ? '' : resource.apiGroup],
                    resourceNames: resource.resourceName ? [resource.resourceName] : undefined,
                    resources: resource.resourceType ? [resource.resourceType] : undefined,
                });
            }
        }
        return rules;
    }
}
exports.Role = Role;
_a = JSII_RTTI_SYMBOL_1;
Role[_a] = { fqn: "cdk8s-plus-28.Role", version: "2.5.6" };
class ImportedClusterRole extends constructs_1.Construct {
    constructor(scope, id, name) {
        super(scope, id);
        this.resourceType = 'clusterroles';
        this._name = name;
    }
    get name() {
        return this._name;
    }
    get apiVersion() {
        return k8s.KubeClusterRole.GVK.apiVersion;
    }
    get apiGroup() {
        return 'rbac.authorization.k8s.io';
    }
    get kind() {
        return k8s.KubeClusterRole.GVK.kind;
    }
    get resourceName() {
        return this.name;
    }
}
/**
 * ClusterRole is a cluster level, logical grouping of PolicyRules that can be
 * referenced as a unit by a RoleBinding or ClusterRoleBinding.
 */
class ClusterRole extends base.Resource {
    constructor(scope, id, props = {}) {
        super(scope, id);
        this.resourceType = 'clusterroles';
        this._labelSelector = {};
        this._rules = [];
        this.apiObject = new k8s.KubeClusterRole(this, 'Resource', {
            metadata: props.metadata,
            rules: cdk8s_1.Lazy.any({ produce: () => this.synthesizeRules() }),
            aggregationRule: cdk8s_1.Lazy.any({ produce: () => this.synthesizeAggregationRules() }),
        });
        for (const rule of props.rules ?? []) {
            this.allow(rule.verbs, ...rule.endpoints);
        }
        for (const [key, value] of Object.entries(props.aggregationLabels ?? {})) {
            this.aggregate(key, value);
        }
    }
    /**
     * Imports a role from the cluster as a reference.
     */
    static fromClusterRoleName(scope, id, name) {
        return new ImportedClusterRole(scope, id, name);
    }
    /**
     * Rules associaated with this Role.
     * Returns a copy, use `allow` to add rules.
     */
    get rules() {
        return [...this._rules];
    }
    /**
     * Add permission to perform a list of HTTP verbs on a collection of
     * resources.
     *
     * @param endpoints The endpoints(s) to apply to
     * @see https://kubernetes.io/docs/reference/access-authn-authz/authorization/#determine-the-request-verb
     */
    allow(verbs, ...endpoints) {
        this._rules.push({ verbs, endpoints });
    }
    /**
     * Add "create" permission for the resources.
     * @param endpoints The resource(s) to apply to
     */
    allowCreate(...endpoints) {
        this.allow(['create'], ...endpoints);
    }
    /**
     * Add "get" permission for the resources.
     * @param endpoints The resource(s) to apply to
     */
    allowGet(...endpoints) {
        this.allow(['get'], ...endpoints);
    }
    /**
     * Add "list" permission for the resources.
     * @param endpoints The resource(s) to apply to
     */
    allowList(...endpoints) {
        this.allow(['list'], ...endpoints);
    }
    /**
     * Add "watch" permission for the resources.
     * @param endpoints The resource(s) to apply to
     */
    allowWatch(...endpoints) {
        this.allow(['watch'], ...endpoints);
    }
    /**
     * Add "update" permission for the resources.
     * @param endpoints The resource(s) to apply to
     */
    allowUpdate(...endpoints) {
        this.allow(['update'], ...endpoints);
    }
    /**
     * Add "patch" permission for the resources.
     * @param endpoints The resource(s) to apply to
     */
    allowPatch(...endpoints) {
        this.allow(['patch'], ...endpoints);
    }
    /**
     * Add "delete" permission for the resources.
     * @param endpoints The resource(s) to apply to
     */
    allowDelete(...endpoints) {
        this.allow(['delete'], ...endpoints);
    }
    /**
     * Add "deletecollection" permission for the resources.
     * @param endpoints The resource(s) to apply to
     */
    allowDeleteCollection(...endpoints) {
        this.allow(['deletecollection'], ...endpoints);
    }
    /**
     * Add "get", "list", and "watch" permissions for the resources.
     * @param endpoints The resource(s) to apply to
     */
    allowRead(...endpoints) {
        this.allow(['get', 'list', 'watch'], ...endpoints);
    }
    /**
     * Add "get", "list", "watch", "create", "update", "patch", "delete", and
     * "deletecollection" permissions for the resources.
     *
     * @param endpoints The resource(s) to apply to
     */
    allowReadWrite(...endpoints) {
        this.allow(['get', 'list', 'watch', 'create', 'update', 'patch', 'delete', 'deletecollection'], ...endpoints);
    }
    /**
     * Aggregate rules from roles matching this label selector.
     */
    aggregate(key, value) {
        this._labelSelector[key] = value;
    }
    /**
     * Combines the rules of the argument ClusterRole into this ClusterRole
     * using aggregation labels.
     * @param rol
     */
    combine(rol) {
        const key = `cdk8s.cluster-role/aggregate-to-${cdk8s_1.Names.toLabelValue(this)}`;
        const value = 'true';
        rol.metadata.addLabel(key, value);
        this.aggregate(key, value);
    }
    /**
     * Create a RoleBinding that binds the permissions in this ClusterRole
     * to a list of subjects, that will only apply to the given namespace.
     * @param namespace the namespace to limit permissions to.
     * @param subjects a list of subjects to bind to
     */
    bindInNamespace(namespace, ...subjects) {
        const binding = new rb.RoleBinding(this, `RoleBinding-${namespace}`, {
            metadata: {
                namespace,
            },
            role: this,
        });
        binding.addSubjects(...subjects);
        return binding;
    }
    /**
     * Create a ClusterRoleBinding that binds the permissions in this
     * ClusterRole to a list of subjects, without namespace restrictions.
     * @param subjects a list of subjects to bind to
     */
    bind(...subjects) {
        const binding = new rb.ClusterRoleBinding(this, 'ClusterRoleBinding', {
            role: this,
        });
        binding.addSubjects(...subjects);
        return binding;
    }
    synthesizeRules() {
        const rules = [];
        for (const rule of this._rules) {
            for (const endpoint of rule.endpoints) {
                const resource = endpoint.asApiResource();
                const nonResource = endpoint.asNonApiResource();
                if (resource && nonResource) {
                    throw new Error('Endpoint must be either resource or non resource. not both.');
                }
                if (!resource && !nonResource) {
                    throw new Error('Endpoint must be either resource or non resource. not neither.');
                }
                if (resource) {
                    rules.push({
                        apiGroups: [resource.apiGroup === 'core' ? '' : resource.apiGroup],
                        resources: [resource.resourceType],
                        resourceNames: resource.resourceName ? [resource.resourceName] : [],
                        verbs: rule.verbs,
                    });
                }
                if (nonResource) {
                    rules.push({ verbs: rule.verbs, nonResourceUrLs: [nonResource] });
                }
            }
        }
        return rules;
    }
    synthesizeAggregationRules() {
        if (Object.keys(this._labelSelector).length === 0) {
            return undefined;
        }
        return { clusterRoleSelectors: [{ matchLabels: this._labelSelector }] };
    }
}
exports.ClusterRole = ClusterRole;
_b = JSII_RTTI_SYMBOL_1;
ClusterRole[_b] = { fqn: "cdk8s-plus-28.ClusterRole", version: "2.5.6" };
//# sourceMappingURL=data:application/json;base64,