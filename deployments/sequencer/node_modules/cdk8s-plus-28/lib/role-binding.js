"use strict";
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Group = exports.User = exports.ClusterRoleBinding = exports.RoleBinding = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdk8s_1 = require("cdk8s");
const constructs_1 = require("constructs");
const base_1 = require("./base");
const k8s = require("./imports/k8s");
const utils_1 = require("./utils");
/**
 * A RoleBinding grants permissions within a specific namespace to a user or
 * set of users.
 */
class RoleBinding extends base_1.Resource {
    constructor(scope, id, props) {
        super(scope, id);
        this.resourceType = 'rolebindings';
        this.role = props.role;
        this._subjects = new Array();
        this.apiObject = new k8s.KubeRoleBinding(this, 'Resource', {
            metadata: props.metadata,
            subjects: cdk8s_1.Lazy.any({ produce: () => this.synthesizeSubjects() }),
            roleRef: cdk8s_1.Lazy.any({ produce: () => this.synthesizeRoleRef() }),
        });
    }
    /**
     * Adds a subject to the role.
     * @param subjects The subjects to add
     */
    addSubjects(...subjects) {
        for (const subject of subjects) {
            this._subjects.push(subject);
        }
    }
    get subjects() {
        return [...this._subjects];
    }
    synthesizeRoleRef() {
        return {
            apiGroup: this.role.apiGroup,
            kind: this.role.kind,
            name: this.role.name,
        };
    }
    synthesizeSubjects() {
        return this._subjects.map(subject => subject.toSubjectConfiguration()).map((subject) => utils_1.filterUndefined({
            apiGroup: subject.apiGroup === 'core' ? '' : subject.apiGroup,
            kind: subject.kind,
            name: subject.name,
            namespace: subject.namespace,
        }));
    }
}
exports.RoleBinding = RoleBinding;
_a = JSII_RTTI_SYMBOL_1;
RoleBinding[_a] = { fqn: "cdk8s-plus-28.RoleBinding", version: "2.5.6" };
/**
 * A ClusterRoleBinding grants permissions cluster-wide to a user or
 * set of users.
 */
class ClusterRoleBinding extends base_1.Resource {
    constructor(scope, id, props) {
        super(scope, id);
        this.resourceType = 'clusterrolebindings';
        this.role = props.role;
        this._subjects = new Array();
        this.apiObject = new k8s.KubeClusterRoleBinding(this, 'Resource', {
            metadata: props.metadata,
            subjects: cdk8s_1.Lazy.any({ produce: () => this.synthesizeSubjects() }),
            roleRef: cdk8s_1.Lazy.any({ produce: () => this.synthesizeRoleRef() }),
        });
    }
    /**
     * Adds a subject to the role.
     * @param subjects The subjects to add
     */
    addSubjects(...subjects) {
        for (const subject of subjects) {
            this._subjects.push(subject);
        }
    }
    get subjects() {
        return [...this._subjects];
    }
    synthesizeRoleRef() {
        return {
            apiGroup: this.role.apiGroup,
            kind: this.role.kind,
            name: this.role.name,
        };
    }
    synthesizeSubjects() {
        return this._subjects.map(subject => subject.toSubjectConfiguration()).map((subject) => utils_1.filterUndefined({
            apiGroup: subject.apiGroup === 'core' ? '' : subject.apiGroup,
            kind: subject.kind,
            name: subject.name,
            namespace: subject.namespace,
        }));
    }
}
exports.ClusterRoleBinding = ClusterRoleBinding;
_b = JSII_RTTI_SYMBOL_1;
ClusterRoleBinding[_b] = { fqn: "cdk8s-plus-28.ClusterRoleBinding", version: "2.5.6" };
/**
 * Represents a user.
 */
class User extends constructs_1.Construct {
    constructor(scope, id, name) {
        super(scope, id);
        this.apiGroup = 'rbac.authorization.k8s.io';
        this.kind = 'User';
        this.name = name;
    }
    /**
     * Reference a user in the cluster by name.
     */
    static fromName(scope, id, name) {
        return new User(scope, id, name);
    }
    /**
     * @see ISubect.toSubjectConfiguration()
     */
    toSubjectConfiguration() {
        return {
            kind: this.kind,
            name: this.name,
            apiGroup: this.apiGroup,
        };
    }
}
exports.User = User;
_c = JSII_RTTI_SYMBOL_1;
User[_c] = { fqn: "cdk8s-plus-28.User", version: "2.5.6" };
/**
 * Represents a group.
 */
class Group extends constructs_1.Construct {
    constructor(scope, id, name) {
        super(scope, id);
        this.apiGroup = 'rbac.authorization.k8s.io';
        this.kind = 'Group';
        this.name = name;
    }
    /**
     * Reference a group by name.
     */
    static fromName(scope, id, name) {
        return new Group(scope, id, name);
    }
    /**
     * @see ISubect.toSubjectConfiguration()
     */
    toSubjectConfiguration() {
        return {
            kind: this.kind,
            name: this.name,
            apiGroup: this.apiGroup,
        };
    }
}
exports.Group = Group;
_d = JSII_RTTI_SYMBOL_1;
Group[_d] = { fqn: "cdk8s-plus-28.Group", version: "2.5.6" };
//# sourceMappingURL=data:application/json;base64,