"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Namespaces = exports.Namespace = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdk8s_1 = require("cdk8s");
const constructs_1 = require("constructs");
const base = require("./base");
const k8s = require("./imports/k8s");
const pod = require("./pod");
/**
 * In Kubernetes, namespaces provides a mechanism for isolating groups of resources within a single cluster.
 * Names of resources need to be unique within a namespace, but not across namespaces.
 * Namespace-based scoping is applicable only for namespaced objects (e.g. Deployments, Services, etc) and
 * not for cluster-wide objects (e.g. StorageClass, Nodes, PersistentVolumes, etc).
 */
class Namespace extends base.Resource {
    constructor(scope, id, props = {}) {
        super(scope, id);
        this.resourceType = 'namespaces';
        this.apiObject = new k8s.KubeNamespace(this, 'Resource', {
            metadata: props.metadata,
            spec: cdk8s_1.Lazy.any({ produce: () => this._toKube() }),
        });
        this._pods = pod.Pods.all(this, 'Pods', {
            namespaces: Namespaces.select(this, 'Namespaces', { names: [this.name] }),
        });
    }
    /**
     * @see INamespaceSelector.toNamespaceSelectorConfig()
     */
    toNamespaceSelectorConfig() {
        return { names: [this.name] };
    }
    /**
     * @see INetworkPolicyPeer.toNetworkPolicyPeerConfig()
     */
    toNetworkPolicyPeerConfig() {
        return this._pods.toNetworkPolicyPeerConfig();
    }
    /**
     * @see INetworkPolicyPeer.toPodSelector()
     */
    toPodSelector() {
        return this._pods.toPodSelector();
    }
    /**
     * @internal
     */
    _toKube() {
        return {};
    }
}
exports.Namespace = Namespace;
_a = JSII_RTTI_SYMBOL_1;
Namespace[_a] = { fqn: "cdk8s-plus-28.Namespace", version: "2.5.6" };
/**
 * @see https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/#automatic-labelling
 */
Namespace.NAME_LABEL = 'kubernetes.io/metadata.name';
/**
 * Represents a group of namespaces.
 */
class Namespaces extends constructs_1.Construct {
    constructor(scope, id, expressions, names, labels) {
        super(scope, id);
        this.expressions = expressions;
        this.names = names;
        this.labels = labels;
        this._pods = pod.Pods.all(this, 'Pods', { namespaces: this });
    }
    /**
     * Select specific namespaces.
     */
    static select(scope, id, options) {
        return new Namespaces(scope, id, options.expressions, options.names, options.labels);
    }
    /**
     * Select all namespaces.
     */
    static all(scope, id) {
        return Namespaces.select(scope, id, { expressions: [], labels: {} });
    }
    /**
     * @see INamespaceSelector.toNamespaceSelectorConfig()
     */
    toNamespaceSelectorConfig() {
        return {
            labelSelector: pod.LabelSelector.of({ expressions: this.expressions, labels: this.labels }),
            names: this.names,
        };
    }
    /**
     * @see INetworkPolicyPeer.toNetworkPolicyPeerConfig()
     */
    toNetworkPolicyPeerConfig() {
        return this._pods.toNetworkPolicyPeerConfig();
    }
    /**
     * @see INetworkPolicyPeer.toPodSelector()
     */
    toPodSelector() {
        return this._pods.toPodSelector();
    }
}
exports.Namespaces = Namespaces;
_b = JSII_RTTI_SYMBOL_1;
Namespaces[_b] = { fqn: "cdk8s-plus-28.Namespaces", version: "2.5.6" };
//# sourceMappingURL=data:application/json;base64,