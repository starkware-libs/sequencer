"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.validatePeerConfig = exports.NetworkPolicy = exports.NetworkPolicyTrafficDefault = exports.NetworkProtocol = exports.NetworkPolicyIpBlock = exports.NetworkPolicyPort = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdk8s_1 = require("cdk8s");
const constructs_1 = require("constructs");
const base = require("./base");
const k8s = require("./imports/k8s");
const namespace = require("./namespace");
const pod = require("./pod");
const utils_1 = require("./utils");
/**
 * Describes a port to allow traffic on.
 */
class NetworkPolicyPort {
    constructor(port, endPort, protocol) {
        this.port = port;
        this.endPort = endPort;
        this.protocol = protocol;
    }
    /**
     * Distinct TCP ports
     */
    static tcp(port) {
        return new NetworkPolicyPort(k8s.IntOrString.fromNumber(port), undefined, NetworkProtocol.TCP);
    }
    /**
     * A TCP port range
     */
    static tcpRange(startPort, endPort) {
        return new NetworkPolicyPort(k8s.IntOrString.fromNumber(startPort), endPort, NetworkProtocol.TCP);
    }
    /**
     * Any TCP traffic
     */
    static allTcp() {
        return new NetworkPolicyPort(k8s.IntOrString.fromNumber(0), 65535, NetworkProtocol.TCP);
    }
    /**
     * Distinct UDP ports
     */
    static udp(port) {
        return new NetworkPolicyPort(k8s.IntOrString.fromNumber(port), undefined, NetworkProtocol.UDP);
    }
    /**
     * A UDP port range
     */
    static udpRange(startPort, endPort) {
        return new NetworkPolicyPort(k8s.IntOrString.fromNumber(startPort), endPort, NetworkProtocol.UDP);
    }
    /**
     * Any UDP traffic
     */
    static allUdp() {
        return new NetworkPolicyPort(k8s.IntOrString.fromNumber(0), 65535, NetworkProtocol.UDP);
    }
    /**
     * Custom port configuration.
     */
    static of(props) {
        return new NetworkPolicyPort(props.port ? k8s.IntOrString.fromNumber(props.port) : undefined, props.endPort, props.protocol);
    }
    /**
     * @internal
     */
    _toKube() {
        return { port: this.port, endPort: this.endPort, protocol: this.protocol };
    }
}
exports.NetworkPolicyPort = NetworkPolicyPort;
_a = JSII_RTTI_SYMBOL_1;
NetworkPolicyPort[_a] = { fqn: "cdk8s-plus-28.NetworkPolicyPort", version: "2.5.6" };
/**
 * Describes a particular CIDR (Ex. "192.168.1.1/24","2001:db9::/64") that is
 * allowed to the pods matched by a network policy selector.
 * The except entry describes CIDRs that should not be included within this rule.
 */
class NetworkPolicyIpBlock extends constructs_1.Construct {
    constructor(scope, id, 
    /**
     * A string representing the IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64".
     */
    cidr, 
    /**
     * A slice of CIDRs that should not be included within an IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64".
     * Except values will be rejected if they are outside the CIDR range.
     */
    except) {
        super(scope, id);
        this.cidr = cidr;
        this.except = except;
    }
    /**
     * Create an IPv4 peer from a CIDR
     */
    static ipv4(scope, id, cidrIp, except) {
        const cidrMatch = cidrIp.match(/^(\d{1,3}\.){3}\d{1,3}(\/\d+)?$/);
        if (!cidrMatch) {
            throw new Error(`Invalid IPv4 CIDR: "${cidrIp}"`);
        }
        if (!cidrMatch[2]) {
            throw new Error(`CIDR mask is missing in IPv4: "${cidrIp}". Did you mean "${cidrIp}/32"?`);
        }
        return new NetworkPolicyIpBlock(scope, id, cidrIp, except);
    }
    /**
     * Any IPv4 address
     */
    static anyIpv4(scope, id) {
        return new NetworkPolicyIpBlock(scope, id, '0.0.0.0/0');
    }
    /**
     * Create an IPv6 peer from a CIDR
     */
    static ipv6(scope, id, cidrIp, except) {
        const cidrMatch = cidrIp.match(/^([\da-f]{0,4}:){2,7}([\da-f]{0,4})?(\/\d+)?$/);
        if (!cidrMatch) {
            throw new Error(`Invalid IPv6 CIDR: "${cidrIp}"`);
        }
        if (!cidrMatch[3]) {
            throw new Error(`CIDR mask is missing in IPv6: "${cidrIp}". Did you mean "${cidrIp}/128"?`);
        }
        return new NetworkPolicyIpBlock(scope, id, cidrIp, except);
    }
    /**
     * Any IPv6 address
     */
    static anyIpv6(scope, id) {
        return new NetworkPolicyIpBlock(scope, id, '::/0');
    }
    /**
     * @see INetworkPolicyPeer.toNetworkPolicyPeerConfig()
     */
    toNetworkPolicyPeerConfig() {
        return { ipBlock: this };
    }
    /**
     * @see INetworkPolicyPeer.toPodSelector()
     */
    toPodSelector() {
        return undefined;
    }
    /**
     * @internal
     */
    _toKube() {
        return { cidr: this.cidr, except: this.except };
    }
}
exports.NetworkPolicyIpBlock = NetworkPolicyIpBlock;
_b = JSII_RTTI_SYMBOL_1;
NetworkPolicyIpBlock[_b] = { fqn: "cdk8s-plus-28.NetworkPolicyIpBlock", version: "2.5.6" };
/**
 * Network protocols.
 */
var NetworkProtocol;
(function (NetworkProtocol) {
    /**
     * TCP.
     */
    NetworkProtocol["TCP"] = "TCP";
    /**
     * UDP.
     */
    NetworkProtocol["UDP"] = "UDP";
    /**
     * SCTP.
     */
    NetworkProtocol["SCTP"] = "SCTP";
})(NetworkProtocol = exports.NetworkProtocol || (exports.NetworkProtocol = {}));
/**
 * Default behaviors of network traffic in policies.
 */
var NetworkPolicyTrafficDefault;
(function (NetworkPolicyTrafficDefault) {
    /**
     * The policy denies all traffic.
     * Since rules are additive, additional rules or policies can allow
     * specific traffic.
     */
    NetworkPolicyTrafficDefault["DENY"] = "DENY";
    /**
     * The policy allows all traffic (either ingress or egress).
     * Since rules are additive, no additional rule or policies can
     * subsequently deny the traffic.
     */
    NetworkPolicyTrafficDefault["ALLOW"] = "ALLOW";
})(NetworkPolicyTrafficDefault = exports.NetworkPolicyTrafficDefault || (exports.NetworkPolicyTrafficDefault = {}));
/**
 * Control traffic flow at the IP address or port level (OSI layer 3 or 4),
 * network policies are an application-centric construct which allow you
 * to specify how a pod is allowed to communicate with various network peers.
 *
 * - Outgoing traffic is allowed if there are no network policies selecting
 *   the pod (and cluster policy otherwise allows the traffic),
 *   OR if the traffic matches at least one egress rule across all of the
 *   network policies that select the pod.
 *
 * - Incoming traffic is allowed to a pod if there are no network policies
 *   selecting the pod (and cluster policy otherwise allows the traffic),
 *   OR if the traffic source is the pod's local node,
 *   OR if the traffic matches at least one ingress rule across all of
 *   the network policies that select the pod.
 *
 * Network policies do not conflict; they are additive.
 * If any policy or policies apply to a given pod for a given
 * direction, the connections allowed in that direction from
 * that pod is the union of what the applicable policies allow.
 * Thus, order of evaluation does not affect the policy result.
 *
 * For a connection from a source pod to a destination pod to be allowed,
 * both the egress policy on the source pod and the ingress policy on the
 * destination pod need to allow the connection.
 * If either side does not allow the connection, it will not happen.
 *
 * @see https://kubernetes.io/docs/concepts/services-networking/network-policies/#networkpolicy-resource
 */
class NetworkPolicy extends base.Resource {
    constructor(scope, id, props = {}) {
        super(scope, id);
        this.resourceType = 'networkpolicies';
        this._egressRules = [];
        this._ingressRules = [];
        this._policyTypes = new Set();
        const podSelector = props.selector ?? pod.Pods.all(this, 'AllPods');
        this._podSelectorConfig = podSelector.toPodSelectorConfig();
        let ns;
        if (!props.metadata?.namespace) {
            if (this._podSelectorConfig.namespaces?.labelSelector && !this._podSelectorConfig.namespaces?.labelSelector.isEmpty()) {
                throw new Error(`Unable to create a network policy for a selector (${podSelector.node.path}) that selects pods in namespaces based on labels`);
            }
            if (this._podSelectorConfig.namespaces?.names && this._podSelectorConfig.namespaces.names.length > 1) {
                throw new Error(`Unable to create a network policy for a selector (${podSelector.node.path}) that selects pods in multiple namespaces`);
            }
            ns = this._podSelectorConfig.namespaces?.names ? this._podSelectorConfig.namespaces?.names[0] : undefined;
        }
        else {
            ns = props.metadata.namespace;
        }
        this.apiObject = new k8s.KubeNetworkPolicy(this, 'Resource', {
            metadata: { ...props.metadata, namespace: ns },
            spec: cdk8s_1.Lazy.any({ produce: () => this._toKube() }),
        });
        this.configureDefaultBehavior('Egress', props.egress?.default);
        this.configureDefaultBehavior('Ingress', props.ingress?.default);
        for (const rule of props.egress?.rules ?? []) {
            this.addEgressRule(rule.peer, rule.ports);
        }
        for (const rule of props.ingress?.rules ?? []) {
            this.addIngressRule(rule.peer, rule.ports);
        }
    }
    /**
     * Allow outgoing traffic to the peer.
     *
     * If ports are not passed, traffic will be allowed on all ports.
     */
    addEgressRule(peer, ports) {
        this._policyTypes.add('Egress');
        this._egressRules.push({ ports: (ports ?? []).map(p => p._toKube()), to: this.createNetworkPolicyPeers(peer) });
    }
    /**
     * Allow incoming traffic from the peer.
     *
     * If ports are not passed, traffic will be allowed on all ports.
     */
    addIngressRule(peer, ports) {
        this._policyTypes.add('Ingress');
        this._ingressRules.push({ ports: (ports ?? []).map(p => p._toKube()), from: this.createNetworkPolicyPeers(peer) });
    }
    createNetworkPolicyPeers(peer) {
        const config = peer.toNetworkPolicyPeerConfig();
        validatePeerConfig(config);
        if (config.ipBlock) {
            // ip block is a single peer.
            return [{ ipBlock: config.ipBlock._toKube() }];
        }
        if (!config.podSelector.namespaces?.names) {
            // when no explicit namespaces are defined we can just use
            // the selector as is
            return [{
                    namespaceSelector: config.podSelector.namespaces?.labelSelector?._toKube(),
                    podSelector: config.podSelector.labelSelector._toKube(),
                }];
        }
        // when explicit namespaces are defined, we need to create a separate
        // peer for each, since a label selector cannot have multiple name labels. (they will conflict)
        const namespaceSelector = config.podSelector?.namespaces?.labelSelector?._toKube() ?? {};
        return config.podSelector.namespaces.names.map(n => ({
            podSelector: config.podSelector.labelSelector._toKube(),
            namespaceSelector: {
                matchExpressions: namespaceSelector.matchExpressions,
                matchLabels: {
                    ...namespaceSelector.matchLabels,
                    [namespace.Namespace.NAME_LABEL]: n,
                },
            },
        }));
    }
    configureDefaultBehavior(direction, _default) {
        if (!_default) {
            return;
        }
        if (_default === NetworkPolicyTrafficDefault.DENY) {
            // https://kubernetes.io/docs/concepts/services-networking/network-policies/#default-deny-all-egress-traffic
            this._policyTypes.add(direction);
        }
        if (_default === NetworkPolicyTrafficDefault.ALLOW) {
            // https://kubernetes.io/docs/concepts/services-networking/network-policies/#allow-all-egress-traffic
            this._policyTypes.add(direction);
            if (direction === 'Egress') {
                this._egressRules.push({});
            }
            else {
                this._ingressRules.push({});
            }
        }
    }
    /**
     * @internal
     */
    _toKube() {
        return {
            podSelector: this._podSelectorConfig.labelSelector._toKube(),
            egress: utils_1.undefinedIfEmpty(this._egressRules),
            ingress: utils_1.undefinedIfEmpty(this._ingressRules),
            policyTypes: utils_1.undefinedIfEmpty(Array.from(this._policyTypes)),
        };
    }
}
exports.NetworkPolicy = NetworkPolicy;
_c = JSII_RTTI_SYMBOL_1;
NetworkPolicy[_c] = { fqn: "cdk8s-plus-28.NetworkPolicy", version: "2.5.6" };
function validatePeerConfig(peerConfig) {
    if (!peerConfig.ipBlock && !peerConfig.podSelector) {
        throw new Error('Inavlid peer: either \'ipBlock\' or \'podSelector\' must be defined');
    }
    if (peerConfig.ipBlock && peerConfig.podSelector) {
        throw new Error('Inavlid peer: only one of \'ipBlock\' and \'podSelector\' must be defined');
    }
}
exports.validatePeerConfig = validatePeerConfig;
//# sourceMappingURL=data:application/json;base64,