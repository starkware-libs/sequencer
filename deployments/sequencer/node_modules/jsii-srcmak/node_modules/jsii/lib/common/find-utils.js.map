{"version":3,"file":"find-utils.js","sourceRoot":"","sources":["../../src/common/find-utils.ts"],"names":[],"mappings":";;AAYA,wBAaC;AAQD,8CAKC;AAQD,0DAgBC;AA9DD,8BAA8B;AAC9B,kCAAkC;AAClC,oCAAqC;AAErC;;;;;;;GAOG;AACH,SAAgB,MAAM,CAAC,SAAiB,EAAE,IAA8B;IACtE,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;IAE/B,IAAI,MAAM,EAAE,CAAC;QACX,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACvC,IAAI,MAAM,KAAK,SAAS,EAAE,CAAC;QACzB,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,OAAO,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AAC9B,CAAC;AAED;;;;;GAKG;AACH,SAAgB,iBAAiB,CAAC,WAAmB,EAAE,SAAiB;IACtE,OAAO,MAAM,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,EAAE;QAC/B,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC;QAC9C,OAAO,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,IAAI,KAAK,WAAW,CAAC;IACpG,CAAC,CAAC,CAAC;AACL,CAAC;AAED;;;;;GAKG;AACH,SAAgB,uBAAuB,CAAC,cAAsB,EAAE,WAAmB;IACjF,oFAAoF;IACpF,gDAAgD;IAChD,MAAM,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,cAAc,EAAE;QACjD,KAAK,EAAE,CAAC,WAAW,CAAC;KACrB,CAAC,CAAC;IAEH,8EAA8E;IAC9E,6EAA6E;IAC7E,MAAM,cAAc,GAAG,iBAAiB,CAAC,cAAc,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;IAEnF,IAAI,CAAC,cAAc,EAAE,CAAC;QACpB,MAAM,IAAI,iBAAS,CAAC,8BAA8B,cAAc,WAAW,WAAW,GAAG,CAAC,CAAC;IAC7F,CAAC;IAED,OAAO,cAAc,CAAC;AACxB,CAAC","sourcesContent":["import * as fs from 'node:fs';\nimport * as path from 'node:path';\nimport { JsiiError } from '../utils';\n\n/**\n * Find a directory up the tree from a starting directory matching a condition\n *\n * Will return `undefined` if no directory matches\n *\n * (This code is duplicated among jsii/jsii-pacmak/jsii-reflect. Changes should be done in all\n * 3 locations, and we should unify these at some point: https://github.com/aws/jsii/issues/3236)\n */\nexport function findUp(directory: string, pred: (dir: string) => boolean): string | undefined {\n  const result = pred(directory);\n\n  if (result) {\n    return directory;\n  }\n\n  const parent = path.dirname(directory);\n  if (parent === directory) {\n    return undefined;\n  }\n\n  return findUp(parent, pred);\n}\n\n/**\n * Find the package.json for a given package upwards from the given directory\n *\n * (This code is duplicated among jsii/jsii-pacmak/jsii-reflect. Changes should be done in all\n * 3 locations, and we should unify these at some point: https://github.com/aws/jsii/issues/3236)\n */\nexport function findPackageJsonUp(packageName: string, directory: string) {\n  return findUp(directory, (dir) => {\n    const pjFile = path.join(dir, 'package.json');\n    return fs.existsSync(pjFile) && JSON.parse(fs.readFileSync(pjFile, 'utf-8')).name === packageName;\n  });\n}\n\n/**\n * Find the directory that contains a given dependency, identified by its 'package.json', from a starting search directory\n *\n * (This code is duplicated among jsii/jsii-pacmak/jsii-reflect. Changes should be done in all\n * 3 locations, and we should unify these at some point: https://github.com/aws/jsii/issues/3236)\n */\nexport function findDependencyDirectory(dependencyName: string, searchStart: string) {\n  // Explicitly do not use 'require(\"dep/package.json\")' because that will fail if the\n  // package does not export that particular file.\n  const entryPoint = require.resolve(dependencyName, {\n    paths: [searchStart],\n  });\n\n  // Search up from the given directory, looking for a package.json that matches\n  // the dependency name (so we don't accidentally find stray 'package.jsons').\n  const depPkgJsonPath = findPackageJsonUp(dependencyName, path.dirname(entryPoint));\n\n  if (!depPkgJsonPath) {\n    throw new JsiiError(`Could not find dependency '${dependencyName}' from '${searchStart}'`);\n  }\n\n  return depPkgJsonPath;\n}\n"]}