{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/transforms/utils.ts"],"names":[],"mappings":";;AAUA,oDAkBC;AA1BD;;;;;;;GAOG;AACH,SAAgB,oBAAoB,CAAC,GAAG,YAA2C;IACjF,8EAA8E;IAC9E,6EAA6E;IAC7E,yEAAyE;IACzE,OAAO;QACL,MAAM,EAAE,YAAY;aACjB,GAAG,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,WAAW,CAAC,MAAO,CAAC;aACzC,MAAM,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,IAAI,IAAI,CAAC;aACxC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,SAAyC,CAAC;QAClG,KAAK,EAAE,YAAY;aAChB,GAAG,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,WAAW,CAAC,KAAM,CAAC;aACxC,MAAM,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,IAAI,IAAI,CAAC;aACxC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,SAAwC,CAAC;QACjG,iBAAiB,EAAE,YAAY;aAC5B,GAAG,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,WAAW,CAAC,iBAAkB,CAAC;aACpD,MAAM,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,IAAI,IAAI,CAAC;aACxC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,SAAoD,CAAC;KAC9G,CAAC;AACJ,CAAC","sourcesContent":["import { CustomTransformers } from 'typescript';\n\n/**\n * Combines a collection of `CustomTransformers` configurations into a single\n * one, preserving the order of arguments.\n *\n * @param transformers the list of transformers to combine.\n *\n * @returns the combined transformer.\n */\nexport function combinedTransformers(...transformers: readonly CustomTransformers[]): CustomTransformers {\n  // Note the ! below are just to stop the type checker from seeing undefined as\n  // a value for the whole map-filter-reduce chain, as this would require heavy\n  // syntax that is not desirable. The filter step removes the `undefined`.\n  return {\n    before: transformers\n      .map((transformer) => transformer.before!)\n      .filter((transform) => transform != null)\n      .reduce((acc, elt) => (acc ? [...acc, ...elt] : elt), undefined as CustomTransformers['before']),\n    after: transformers\n      .map((transformer) => transformer.after!)\n      .filter((transform) => transform != null)\n      .reduce((acc, elt) => (acc ? [...acc, ...elt] : elt), undefined as CustomTransformers['after']),\n    afterDeclarations: transformers\n      .map((transformer) => transformer.afterDeclarations!)\n      .filter((transform) => transform != null)\n      .reduce((acc, elt) => (acc ? [...acc, ...elt] : elt), undefined as CustomTransformers['afterDeclarations']),\n  };\n}\n"]}