{"version":3,"file":"deprecation-warnings.js","sourceRoot":"","sources":["../../src/transforms/deprecation-warnings.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'node:fs';\nimport * as path from 'node:path';\nimport * as spec from '@jsii/spec';\nimport { Assembly } from '@jsii/spec';\nimport * as ts from 'typescript';\n\nimport { symbolIdentifier } from '../common/symbol-id';\nimport { ProjectInfo } from '../project-info';\n\nexport const WARNINGSCODE_FILE_NAME = '.warnings.jsii.js';\nconst WARNING_FUNCTION_NAME = 'print';\nconst PARAMETER_NAME = 'p';\nconst FOR_LOOP_ITEM_NAME = 'o';\nconst NAMESPACE = 'jsiiDeprecationWarnings';\nconst LOCAL_ENUM_NAMESPACE = 'ns';\nconst VISITED_OBJECTS_SET_NAME = 'visitedObjects';\nconst DEPRECATION_ERROR = 'DeprecationError';\nconst GET_PROPERTY_DESCRIPTOR = 'getPropertyDescriptor';\n\nexport class DeprecationWarningsInjector {\n  private transformers: ts.CustomTransformers = {\n    before: [],\n  };\n\n  public constructor(private readonly typeChecker: ts.TypeChecker) {}\n\n  public process(assembly: Assembly, projectInfo: ProjectInfo) {\n    const projectRoot = projectInfo.projectRoot;\n    const functionDeclarations: ts.FunctionDeclaration[] = [];\n\n    const types = assembly.types ?? {};\n    for (const type of Object.values(types)) {\n      const statements: ts.Statement[] = [];\n      let isEmpty = true;\n\n      // This will add the parameter to the set of visited objects, to prevent infinite recursion\n      statements.push(\n        ts.factory.createExpressionStatement(\n          ts.factory.createCallExpression(\n            ts.factory.createPropertyAccessExpression(ts.factory.createIdentifier(VISITED_OBJECTS_SET_NAME), 'add'),\n            undefined,\n            [ts.factory.createIdentifier(PARAMETER_NAME)],\n          ),\n        ),\n      );\n\n      const tryStatements = [];\n      if (spec.isDeprecated(type) && spec.isEnumType(type)) {\n        // The type is deprecated\n        tryStatements.push(createWarningFunctionCall(type.fqn, type.docs?.deprecated));\n        isEmpty = false;\n      }\n\n      if (spec.isEnumType(type) && type.locationInModule?.filename) {\n        tryStatements.push(createEnumRequireStatement(type.locationInModule?.filename));\n        tryStatements.push(createDuplicateEnumValuesCheck(type));\n\n        for (const member of Object.values(type.members ?? [])) {\n          if (spec.isDeprecated(member)) {\n            // The enum member is deprecated\n            const condition = ts.factory.createBinaryExpression(\n              ts.factory.createIdentifier(PARAMETER_NAME),\n              ts.SyntaxKind.EqualsEqualsEqualsToken,\n              ts.factory.createPropertyAccessExpression(\n                ts.factory.createPropertyAccessExpression(ts.factory.createIdentifier(LOCAL_ENUM_NAMESPACE), type.name),\n                member.name,\n              ),\n            );\n            tryStatements.push(\n              createWarningFunctionCall(`${type.fqn}#${member.name}`, member.docs?.deprecated, condition),\n            );\n            isEmpty = false;\n          }\n        }\n      } else if (spec.isInterfaceType(type) && type.datatype) {\n        const { statementsByProp, excludedProps } = processInterfaceType(\n          type,\n          types,\n          assembly,\n          projectInfo,\n          undefined,\n          undefined,\n        );\n\n        for (const [name, statement] of statementsByProp.entries()) {\n          if (!excludedProps.has(name)) {\n            tryStatements.push(statement);\n            isEmpty = false;\n          }\n        }\n      }\n\n      statements.push(\n        ts.factory.createTryStatement(\n          ts.factory.createBlock(tryStatements),\n          undefined,\n          ts.factory.createBlock([\n            ts.factory.createExpressionStatement(\n              ts.factory.createCallExpression(\n                ts.factory.createPropertyAccessExpression(\n                  ts.factory.createIdentifier(VISITED_OBJECTS_SET_NAME),\n                  'delete',\n                ),\n                undefined,\n                [ts.factory.createIdentifier(PARAMETER_NAME)],\n              ),\n            ),\n          ]),\n        ),\n      );\n\n      const paramValue = ts.factory.createParameterDeclaration(undefined, undefined, PARAMETER_NAME);\n      const functionName = fnName(type.fqn);\n      const functionDeclaration = ts.factory.createFunctionDeclaration(\n        undefined,\n        undefined,\n        ts.factory.createIdentifier(functionName),\n        [],\n        [paramValue],\n        undefined,\n        createFunctionBlock(isEmpty ? [] : statements),\n      );\n      functionDeclarations.push(functionDeclaration);\n    }\n    this.transformers = {\n      before: [\n        (context) => {\n          const transformer = new Transformer(\n            this.typeChecker,\n            context,\n            projectRoot,\n            this.buildTypeIndex(assembly),\n            assembly,\n          );\n          return transformer.transform.bind(transformer);\n        },\n      ],\n    };\n    generateWarningsFile(projectRoot, functionDeclarations);\n  }\n\n  public get customTransformers(): ts.CustomTransformers {\n    return this.transformers;\n  }\n\n  private buildTypeIndex(assembly: Assembly): Map<string, spec.Type> {\n    const result = new Map<string, spec.Type>();\n\n    for (const type of Object.values(assembly.types ?? {})) {\n      const symbolId = type.symbolId;\n      if (symbolId) {\n        result.set(symbolId, type);\n      }\n    }\n\n    return result;\n  }\n}\n\nfunction processInterfaceType(\n  type: spec.InterfaceType,\n  types: { [p: string]: spec.Type },\n  assembly: Assembly,\n  projectInfo: ProjectInfo,\n  statementsByProp: Map<string, ts.Statement> = new Map<string, ts.Statement>(),\n  excludedProps: Set<string> = new Set<string>(),\n) {\n  for (const prop of Object.values(type.properties ?? {})) {\n    const fqn = `${type.fqn}#${prop.name}`;\n    if (spec.isDeprecated(prop) || spec.isDeprecated(type)) {\n      // If the property individually is deprecated, or the entire type is deprecated\n      const deprecatedDocs = prop.docs?.deprecated ?? type.docs?.deprecated;\n      const statement = createWarningFunctionCall(\n        fqn,\n        deprecatedDocs,\n        ts.factory.createBinaryExpression(\n          ts.factory.createStringLiteral(prop.name),\n          ts.SyntaxKind.InKeyword,\n          ts.factory.createIdentifier(PARAMETER_NAME),\n        ),\n        undefined,\n      );\n      statementsByProp.set(prop.name, statement);\n    } else {\n      /* If a prop is not deprecated, we don't want to generate a warning for it,\n         even if another property with the same name is deprecated in another\n         super-interface. */\n      excludedProps.add(prop.name);\n    }\n\n    if (spec.isNamedTypeReference(prop.type) && Object.keys(types).includes(prop.type.fqn)) {\n      const functionName = importedFunctionName(prop.type.fqn, assembly, projectInfo);\n      if (functionName) {\n        const statement = createTypeHandlerCall(functionName, `${PARAMETER_NAME}.${prop.name}`);\n        statementsByProp.set(`${prop.name}_`, statement);\n      }\n    } else if (\n      spec.isCollectionTypeReference(prop.type) &&\n      spec.isNamedTypeReference(prop.type.collection.elementtype)\n    ) {\n      const functionName = importedFunctionName(prop.type.collection.elementtype.fqn, assembly, projectInfo);\n      if (functionName) {\n        const statement = createTypeHandlerCall(\n          functionName,\n          `${PARAMETER_NAME}.${prop.name}`,\n          prop.type.collection.kind,\n        );\n        statementsByProp.set(`${prop.name}_`, statement);\n      }\n    } else if (\n      spec.isUnionTypeReference(prop.type) &&\n      spec.isNamedTypeReference(prop.type.union.types[0]) &&\n      Object.keys(types).includes(prop.type.union.types[0].fqn)\n    ) {\n      const functionName = importedFunctionName(prop.type.union.types[0].fqn, assembly, projectInfo);\n      if (functionName) {\n        const statement = createTypeHandlerCall(functionName, `${PARAMETER_NAME}.${prop.name}`);\n        statementsByProp.set(`${prop.name}_`, statement);\n      }\n    }\n  }\n\n  // We also generate calls to all the supertypes\n  for (const interfaceName of type.interfaces ?? []) {\n    const assemblies = projectInfo.dependencyClosure.concat(assembly);\n    const superType = findType(interfaceName, assemblies);\n    if (superType.type) {\n      processInterfaceType(\n        superType.type as spec.InterfaceType,\n        types,\n        assembly,\n        projectInfo,\n        statementsByProp,\n        excludedProps,\n      );\n    }\n  }\n  return { statementsByProp, excludedProps };\n}\n\nfunction fnName(fqn: string): string {\n  return fqn.replace(/[^\\w\\d]/g, '_');\n}\n\nfunction createFunctionBlock(statements: ts.Statement[]): ts.Block {\n  if (statements.length > 0) {\n    const validation = ts.factory.createIfStatement(\n      ts.factory.createBinaryExpression(\n        ts.factory.createIdentifier(PARAMETER_NAME),\n        ts.SyntaxKind.EqualsEqualsToken,\n        ts.factory.createNull(),\n      ),\n      ts.factory.createReturnStatement(),\n    );\n    return ts.factory.createBlock([validation, ...statements], true);\n  }\n  return ts.factory.createBlock([], true);\n}\n\nfunction createWarningFunctionCall(\n  fqn: string,\n  message = '',\n  condition?: ts.Expression,\n  includeNamespace = false,\n): ts.Statement {\n  const functionName = includeNamespace ? `${NAMESPACE}.${WARNING_FUNCTION_NAME}` : WARNING_FUNCTION_NAME;\n\n  const mainStatement = ts.factory.createExpressionStatement(\n    ts.factory.createCallExpression(ts.factory.createIdentifier(functionName), undefined, [\n      ts.factory.createStringLiteral(fqn),\n      ts.factory.createStringLiteral(message),\n    ]),\n  );\n\n  return condition ? ts.factory.createIfStatement(condition, mainStatement) : mainStatement;\n}\n\nfunction generateWarningsFile(projectRoot: string, functionDeclarations: ts.FunctionDeclaration[]) {\n  const names = [...functionDeclarations].map((d) => d.name?.text).filter(Boolean);\n  const exportedSymbols = [WARNING_FUNCTION_NAME, GET_PROPERTY_DESCRIPTOR, DEPRECATION_ERROR, ...names].join(',');\n\n  const functionText = `function ${WARNING_FUNCTION_NAME}(name, deprecationMessage) {\n  const deprecated = process.env.JSII_DEPRECATED;\n  const deprecationMode = ['warn', 'fail', 'quiet'].includes(deprecated) ? deprecated : 'warn';\n  const message = \\`\\${name} is deprecated.\\\\n  \\${deprecationMessage.trim()}\\\\n  This API will be removed in the next major release.\\`;\n  switch (deprecationMode) {\n    case \"fail\":\n      throw new ${DEPRECATION_ERROR}(message);\n    case \"warn\":\n      console.warn(\"[WARNING]\", message);\n      break;\n  }\n}\n\nfunction ${GET_PROPERTY_DESCRIPTOR}(obj, prop) {\n  const descriptor = Object.getOwnPropertyDescriptor(obj, prop);\n  if (descriptor) {\n    return descriptor;\n  }\n  const proto = Object.getPrototypeOf(obj);\n  const prototypeDescriptor = proto && getPropertyDescriptor(proto, prop);\n  if (prototypeDescriptor) {\n    return prototypeDescriptor;\n  }\n  return {};\n}\n\nconst ${VISITED_OBJECTS_SET_NAME} = new Set();\n\nclass ${DEPRECATION_ERROR} extends Error {\n  constructor(...args) {\n    super(...args);\n    Object.defineProperty(this, 'name', {\n      configurable: false,\n      enumerable: true,\n      value: '${DEPRECATION_ERROR}',\n      writable: false,\n    });\n  }\n}\n\nmodule.exports = {${exportedSymbols}}\n`;\n\n  const printer = ts.createPrinter({ newLine: ts.NewLineKind.LineFeed });\n  const resultFile = ts.createSourceFile(\n    path.join(projectRoot, WARNINGSCODE_FILE_NAME),\n    functionText,\n    ts.ScriptTarget.Latest,\n    false,\n    ts.ScriptKind.JS,\n  );\n\n  const declarations = functionDeclarations.map((declaration) =>\n    printer.printNode(ts.EmitHint.Unspecified, declaration, resultFile),\n  );\n\n  const content = declarations.concat(printer.printFile(resultFile)).join('\\n');\n\n  fs.writeFileSync(path.join(projectRoot, WARNINGSCODE_FILE_NAME), content);\n}\n\nclass Transformer {\n  private warningCallsWereInjected = false;\n\n  public constructor(\n    private readonly typeChecker: ts.TypeChecker,\n    private readonly context: ts.TransformationContext,\n    private readonly projectRoot: string,\n    private readonly typeIndex: Map<string, spec.Type>,\n    private readonly assembly: Assembly,\n  ) {}\n\n  public transform<T extends ts.Node>(node: T): T {\n    this.warningCallsWereInjected = false;\n\n    const result = this.visitEachChild(node);\n\n    if (ts.isSourceFile(result) && this.warningCallsWereInjected) {\n      const importDir = path.relative(path.dirname(result.fileName), this.projectRoot);\n      const importPath = importDir.startsWith('..')\n        ? unixPath(path.join(importDir, WARNINGSCODE_FILE_NAME))\n        : `./${WARNINGSCODE_FILE_NAME}`;\n\n      return ts.factory.updateSourceFile(result, [\n        createRequireStatement(NAMESPACE, importPath),\n        ...result.statements,\n      ]) as any;\n    }\n    return result;\n  }\n\n  private visitEachChild<T extends ts.Node>(node: T): T {\n    return ts.visitEachChild(node, this.visitor.bind(this), this.context);\n  }\n\n  private visitor<T extends ts.Node>(node: T): ts.VisitResult<T> {\n    if (ts.isMethodDeclaration(node) && node.body != null) {\n      const statements = this.getStatementsForDeclaration(node);\n      this.warningCallsWereInjected = this.warningCallsWereInjected || statements.length > 0;\n      return ts.factory.updateMethodDeclaration(\n        node,\n        node.modifiers,\n        node.asteriskToken,\n        node.name,\n        node.questionToken,\n        node.typeParameters,\n        node.parameters,\n        node.type,\n        ts.factory.updateBlock(node.body, [\n          ...wrapWithRethrow(\n            statements,\n            ts.factory.createPropertyAccessExpression(ts.factory.createThis(), node.name.getText(node.getSourceFile())),\n          ),\n          ...node.body.statements,\n        ]),\n      ) as any;\n    } else if (ts.isGetAccessorDeclaration(node) && node.body != null) {\n      const statements = this.getStatementsForDeclaration(node);\n      this.warningCallsWereInjected = this.warningCallsWereInjected || statements.length > 0;\n      return ts.factory.updateGetAccessorDeclaration(\n        node,\n        node.modifiers,\n        node.name,\n        node.parameters,\n        node.type,\n        ts.factory.updateBlock(node.body, [\n          ...wrapWithRethrow(\n            statements,\n            ts.factory.createPropertyAccessExpression(\n              ts.factory.createCallExpression(\n                ts.factory.createPropertyAccessExpression(\n                  ts.factory.createIdentifier(NAMESPACE),\n                  GET_PROPERTY_DESCRIPTOR,\n                ),\n                undefined,\n                [ts.factory.createThis(), ts.factory.createStringLiteral(node.name.getText(node.getSourceFile()))],\n              ),\n              'get',\n            ),\n          ),\n          ...node.body.statements,\n        ]),\n      ) as any;\n    } else if (ts.isSetAccessorDeclaration(node) && node.body != null) {\n      const statements = this.getStatementsForDeclaration(node);\n      this.warningCallsWereInjected = this.warningCallsWereInjected || statements.length > 0;\n      return ts.factory.updateSetAccessorDeclaration(\n        node,\n        node.modifiers,\n        node.name,\n        node.parameters,\n        ts.factory.updateBlock(node.body, [\n          ...wrapWithRethrow(\n            statements,\n            ts.factory.createPropertyAccessExpression(\n              ts.factory.createCallExpression(\n                ts.factory.createPropertyAccessExpression(\n                  ts.factory.createIdentifier(NAMESPACE),\n                  GET_PROPERTY_DESCRIPTOR,\n                ),\n                undefined,\n                [ts.factory.createThis(), ts.factory.createStringLiteral(node.name.getText(node.getSourceFile()))],\n              ),\n              'set',\n            ),\n          ),\n          ...node.body.statements,\n        ]),\n      ) as any;\n    } else if (ts.isConstructorDeclaration(node) && node.body != null) {\n      const statements = this.getStatementsForDeclaration(node);\n      this.warningCallsWereInjected = this.warningCallsWereInjected || statements.length > 0;\n      return ts.factory.updateConstructorDeclaration(\n        node,\n        node.modifiers,\n        node.parameters,\n        ts.factory.updateBlock(node.body, insertStatements(node.body, wrapWithRethrow(statements, node.parent.name!))),\n      ) as any;\n    }\n\n    return this.visitEachChild(node);\n  }\n\n  /**\n   * @param getOrSet for property accessors, determines which of the getter or\n   *                 setter should be used to get the caller function value.\n   */\n  private getStatementsForDeclaration(\n    node: ts.MethodDeclaration | ts.GetAccessorDeclaration | ts.SetAccessorDeclaration | ts.ConstructorDeclaration,\n  ): ts.Statement[] {\n    const klass = node.parent;\n    const classSymbolId = symbolIdentifier(this.typeChecker, this.typeChecker.getTypeAtLocation(klass).symbol);\n    if (classSymbolId && this.typeIndex.has(classSymbolId)) {\n      const classType = this.typeIndex.get(classSymbolId)! as spec.ClassType;\n\n      if (ts.isConstructorDeclaration(node)) {\n        const initializer = classType?.initializer;\n        if (initializer) {\n          return this.getStatements(classType, initializer);\n        }\n      }\n\n      const methods = classType?.methods ?? [];\n      const method = methods.find((m) => m.name === node.name?.getText());\n      if (method) {\n        return this.getStatements(classType, method);\n      }\n\n      const properties = classType?.properties ?? [];\n      const property = properties.find((p) => p.name === node.name?.getText());\n      if (property) {\n        return createWarningStatementForElement(property, classType);\n      }\n    }\n    return [];\n  }\n\n  private getStatements(classType: spec.ClassType, method: spec.Method | spec.Initializer) {\n    const statements = createWarningStatementForElement(method, classType);\n    for (const parameter of Object.values(method.parameters ?? {})) {\n      const parameterType =\n        this.assembly.types && spec.isNamedTypeReference(parameter.type)\n          ? this.assembly.types[parameter.type.fqn]\n          : undefined;\n\n      if (parameterType) {\n        const functionName = `${NAMESPACE}.${fnName(parameterType.fqn)}`;\n        statements.push(\n          ts.factory.createExpressionStatement(\n            ts.factory.createCallExpression(ts.factory.createIdentifier(functionName), undefined, [\n              ts.factory.createIdentifier(parameter.name),\n            ]),\n          ),\n        );\n      }\n    }\n\n    return statements;\n  }\n}\n\nfunction createWarningStatementForElement(\n  element: spec.Callable | spec.Property,\n  classType: spec.ClassType,\n): ts.Statement[] {\n  if (spec.isDeprecated(element)) {\n    const elementName = (element as spec.Method | spec.Property).name;\n    const fqn = elementName ? `${classType.fqn}#${elementName}` : classType.fqn;\n    const message = element.docs?.deprecated ?? classType.docs?.deprecated;\n    return [createWarningFunctionCall(fqn, message, undefined, true)];\n  }\n  return [];\n}\n\n/**\n * Inserts a list of statements in the correct position inside a block of statements.\n * If there is a `super` call, It inserts the statements just after it. Otherwise,\n * insert the statements right at the beginning of the block.\n */\nfunction insertStatements(block: ts.Block, newStatements: ts.Statement[]) {\n  function splicePoint(statement: ts.Statement | undefined) {\n    if (statement == null) {\n      return 0;\n    }\n    let isSuper = false;\n    statement.forEachChild((node) => {\n      if (ts.isCallExpression(node) && node.expression.kind === ts.SyntaxKind.SuperKeyword) {\n        isSuper = true;\n      }\n    });\n    return isSuper ? 1 : 0;\n  }\n\n  const result = [...block.statements];\n  result.splice(splicePoint(block.statements[0]), 0, ...newStatements);\n  return ts.factory.createNodeArray(result);\n}\n\nfunction createEnumRequireStatement(typeLocation: string): ts.Statement {\n  const { ext } = path.parse(typeLocation);\n  const jsFileName = typeLocation.replace(ext, '.js');\n\n  return createRequireStatement(LOCAL_ENUM_NAMESPACE, `./${jsFileName}`);\n}\n\nfunction createRequireStatement(name: string, importPath: string): ts.Statement {\n  return ts.factory.createVariableStatement(\n    undefined,\n    ts.factory.createVariableDeclarationList(\n      [\n        ts.factory.createVariableDeclaration(\n          name,\n          undefined,\n          undefined,\n          ts.factory.createCallExpression(ts.factory.createIdentifier('require'), undefined, [\n            ts.factory.createStringLiteral(importPath),\n          ]),\n        ),\n      ],\n      ts.NodeFlags.Const,\n    ),\n  );\n}\n\n/**\n * Returns a ready-to-used function name (including a `require`, if necessary)\n */\nfunction importedFunctionName(typeName: string, assembly: Assembly, projectInfo: ProjectInfo) {\n  const assemblies = projectInfo.dependencyClosure.concat(assembly);\n  const { type, moduleName } = findType(typeName, assemblies);\n  if (type) {\n    return moduleName !== assembly.name\n      ? `require(\"${moduleName}/${WARNINGSCODE_FILE_NAME}\").${fnName(type.fqn)}`\n      : fnName(type.fqn);\n  }\n  return undefined;\n}\n\n/**\n * Find the type and module name in an array of assemblies\n * matching a given type name\n */\nfunction findType(typeName: string, assemblies: Assembly[]) {\n  for (const asm of assemblies) {\n    if (asm.metadata?.jsii?.compiledWithDeprecationWarnings) {\n      const types = asm.types ?? {};\n      for (const name of Object.keys(types)) {\n        if (typeName === name) {\n          return { type: types[name], moduleName: asm.name };\n        }\n      }\n    }\n  }\n  return {};\n}\n\nfunction createTypeHandlerCall(\n  functionName: string,\n  parameter: string,\n  collectionKind?: spec.CollectionKind,\n): ts.Statement {\n  switch (collectionKind) {\n    case spec.CollectionKind.Array:\n      return ts.factory.createIfStatement(\n        ts.factory.createBinaryExpression(\n          ts.factory.createIdentifier(parameter),\n          ts.SyntaxKind.ExclamationEqualsToken,\n          ts.factory.createNull(),\n        ),\n        ts.factory.createForOfStatement(\n          undefined,\n          ts.factory.createVariableDeclarationList(\n            [ts.factory.createVariableDeclaration(FOR_LOOP_ITEM_NAME)],\n            ts.NodeFlags.Const,\n          ),\n          ts.factory.createIdentifier(parameter),\n          createTypeHandlerCall(functionName, FOR_LOOP_ITEM_NAME),\n        ),\n      );\n    case spec.CollectionKind.Map:\n      return ts.factory.createIfStatement(\n        ts.factory.createBinaryExpression(\n          ts.factory.createIdentifier(parameter),\n          ts.SyntaxKind.ExclamationEqualsToken,\n          ts.factory.createNull(),\n        ),\n        ts.factory.createForOfStatement(\n          undefined,\n          ts.factory.createVariableDeclarationList(\n            [ts.factory.createVariableDeclaration(FOR_LOOP_ITEM_NAME)],\n            ts.NodeFlags.Const,\n          ),\n          ts.factory.createCallExpression(\n            ts.factory.createPropertyAccessExpression(ts.factory.createIdentifier('Object'), 'values'),\n            undefined,\n            [ts.factory.createIdentifier(parameter)],\n          ),\n          createTypeHandlerCall(functionName, FOR_LOOP_ITEM_NAME),\n        ),\n      );\n    case undefined:\n      return ts.factory.createIfStatement(\n        ts.factory.createPrefixUnaryExpression(\n          ts.SyntaxKind.ExclamationToken,\n          ts.factory.createCallExpression(\n            ts.factory.createPropertyAccessExpression(\n              ts.factory.createIdentifier(VISITED_OBJECTS_SET_NAME),\n              ts.factory.createIdentifier('has'),\n            ),\n            undefined,\n            [ts.factory.createIdentifier(parameter)],\n          ),\n        ),\n        ts.factory.createExpressionStatement(\n          ts.factory.createCallExpression(ts.factory.createIdentifier(functionName), undefined, [\n            ts.factory.createIdentifier(parameter),\n          ]),\n        ),\n      );\n  }\n}\n\n/**\n * There is a chance an enum contains duplicates values with distinct keys,\n * with one of those keys being deprecated. This is a potential pattern to \"rename\" an enum.\n * In this case, we can't concretely determine if the deprecated member was used or not,\n * so in those cases we skip the warnings altogether, rather than erroneously warning for valid usage.\n * This create a statement to check if the enum value is a duplicate:\n *\n * if (Object.values(Foo).filter(x => x === p).length > 1) { return; }\n *\n * Note that we can't just check the assembly for these duplicates, due to:\n * https://github.com/aws/jsii/issues/2782\n */\nfunction createDuplicateEnumValuesCheck(type: spec.TypeBase & spec.EnumType): ts.Statement {\n  return ts.factory.createIfStatement(\n    ts.factory.createBinaryExpression(\n      ts.factory.createPropertyAccessExpression(\n        ts.factory.createCallExpression(\n          ts.factory.createPropertyAccessExpression(\n            ts.factory.createCallExpression(\n              ts.factory.createPropertyAccessExpression(ts.factory.createIdentifier('Object'), 'values'),\n              undefined,\n              [ts.factory.createPropertyAccessExpression(ts.factory.createIdentifier(LOCAL_ENUM_NAMESPACE), type.name)],\n            ),\n            ts.factory.createIdentifier('filter'),\n          ),\n          undefined,\n          [\n            ts.factory.createArrowFunction(\n              undefined,\n              undefined,\n              [ts.factory.createParameterDeclaration(undefined, undefined, 'x')],\n              undefined,\n              ts.factory.createToken(ts.SyntaxKind.EqualsGreaterThanToken),\n              ts.factory.createBinaryExpression(\n                ts.factory.createIdentifier('x'),\n                ts.factory.createToken(ts.SyntaxKind.EqualsEqualsEqualsToken),\n                ts.factory.createIdentifier(PARAMETER_NAME),\n              ),\n            ),\n          ],\n        ),\n        ts.factory.createIdentifier('length'),\n      ),\n      ts.factory.createToken(ts.SyntaxKind.GreaterThanToken),\n      ts.factory.createNumericLiteral('1'),\n    ),\n    ts.factory.createReturnStatement(),\n  );\n}\n\n// We try-then-rethrow exceptions to avoid runtimes displaying an uncanny wall of text if the place\n// where the error was thrown is webpacked. For example, jest somehow manages to capture the throw\n// location and renders the source line (which may be the whole file) when bundled.\nfunction wrapWithRethrow(statements: ts.Statement[], caller: ts.Expression): ts.Statement[] {\n  if (statements.length === 0) {\n    return statements;\n  }\n  return [\n    ts.factory.createTryStatement(\n      ts.factory.createBlock(statements),\n      ts.factory.createCatchClause(\n        ts.factory.createVariableDeclaration('error'),\n        ts.factory.createBlock([\n          // If this is a DeprecationError, trim its stack trace to surface level before re-throwing,\n          // so we don't carry out possibly confusing frames from injected code. That can be toggled\n          // off by setting JSII_DEBUG=1, so we can also diagnose in-injected code faults.\n          ts.factory.createIfStatement(\n            ts.factory.createBinaryExpression(\n              ts.factory.createBinaryExpression(\n                ts.factory.createPropertyAccessExpression(\n                  ts.factory.createPropertyAccessExpression(ts.factory.createIdentifier('process'), 'env'),\n                  'JSII_DEBUG',\n                ),\n                ts.SyntaxKind.ExclamationEqualsEqualsToken,\n                ts.factory.createStringLiteral('1'),\n              ),\n              ts.SyntaxKind.AmpersandAmpersandToken,\n              ts.factory.createBinaryExpression(\n                ts.factory.createPropertyAccessExpression(ts.factory.createIdentifier('error'), 'name'),\n                ts.SyntaxKind.EqualsEqualsEqualsToken,\n                ts.factory.createStringLiteral(DEPRECATION_ERROR),\n              ),\n            ),\n            ts.factory.createBlock([\n              ts.factory.createExpressionStatement(\n                ts.factory.createCallExpression(\n                  ts.factory.createPropertyAccessExpression(ts.factory.createIdentifier('Error'), 'captureStackTrace'),\n                  undefined,\n                  [ts.factory.createIdentifier('error'), caller],\n                ),\n              ),\n            ]),\n          ),\n          ts.factory.createThrowStatement(ts.factory.createIdentifier('error')),\n        ]),\n      ),\n      undefined,\n    ),\n  ];\n}\n\n/**\n * Force a path to be UNIXy (use `/` as a separator)\n *\n * `path.join()` etc. will use the system-dependent path separator (either `/` or `\\`\n * depending on your platform).\n *\n * However, if we actually emit the path-dependent separator to the `.js` files, then\n * files compiled with jsii on Windows cannot be used on any other platform. That seems\n * like an unnecessary restriction, especially since a `/` will work fine on Windows,\n * so make sure to always emit `/`.\n *\n * TSC itself always strictly emits `/` (or at least, emits the same what you put in).\n */\nfunction unixPath(filePath: string) {\n  if (path.sep === '\\\\') {\n    return filePath.replace(/\\\\/g, '/');\n  }\n  return filePath;\n}\n"]}