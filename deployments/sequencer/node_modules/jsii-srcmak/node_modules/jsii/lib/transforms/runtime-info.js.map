{"version":3,"file":"runtime-info.js","sourceRoot":"","sources":["../../src/transforms/runtime-info.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\n\n/**\n * Provides a TransformerFactory to annotate classes with runtime information\n * (e.g., fully-qualified name, version).\n *\n * It does this by first inserting this definition at the top of each source file:\n * ```\n * var JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\n * ```\n *\n * Then, for each class that has registered runtime information during assembly,\n * insert a static member to the class with its fqn and version:\n * ```\n * private static readonly [JSII_RTTI_SYMBOL_1] = { fqn: \"ModuleName.ClassName\", version: \"1.2.3\" }\n * ```\n */\nexport class RuntimeTypeInfoInjector {\n  private readonly fqnsByClass = new Map<ts.ClassDeclaration, string>();\n\n  public constructor(private readonly version: string) {}\n\n  /**\n   * Register the fully-qualified name (fqn) of a class with its ClassDeclaration.\n   * Only ClassDeclarations with registered fqns will be annotated.\n   */\n  public registerClassFqn(clazz: ts.ClassDeclaration, fqn: string) {\n    this.fqnsByClass.set(clazz, fqn);\n  }\n\n  /**\n   * Return the set of Transformers to be used in TSC's program.emit()\n   */\n  public makeTransformers(): ts.CustomTransformers {\n    return {\n      before: [this.runtimeTypeTransformer()],\n    };\n  }\n\n  public runtimeTypeTransformer(): ts.TransformerFactory<ts.SourceFile> {\n    return (context) => {\n      const { factory } = context;\n\n      return (sourceFile): ts.SourceFile => {\n        const rttiSymbolIdentifier = factory.createUniqueName('JSII_RTTI_SYMBOL');\n\n        let classesAnnotated = false;\n        const visitor = (node: ts.Node): ts.Node => {\n          if (ts.isClassDeclaration(node)) {\n            const fqn = this.getClassFqn(node);\n            if (fqn) {\n              classesAnnotated = true;\n              return this.addRuntimeInfoToClass(node, fqn, rttiSymbolIdentifier, factory);\n            }\n          }\n          return ts.visitEachChild(node, visitor, context);\n        };\n\n        // Visit the source file, annotating the classes.\n        let annotatedSourceFile = ts.visitNode(sourceFile, visitor) as ts.SourceFile;\n\n        // Only add the symbol definition if it's actually used.\n        if (classesAnnotated) {\n          const rttiSymbol = factory.createCallExpression(\n            factory.createPropertyAccessExpression(factory.createIdentifier('Symbol'), factory.createIdentifier('for')),\n            undefined,\n            [factory.createStringLiteral('jsii.rtti')],\n          );\n          const rttiSymbolDeclaration = factory.createVariableDeclaration(\n            rttiSymbolIdentifier,\n            undefined,\n            undefined,\n            rttiSymbol,\n          );\n          const variableDeclaration = factory.createVariableStatement(\n            [],\n            factory.createVariableDeclarationList([rttiSymbolDeclaration], ts.NodeFlags.Const),\n          );\n\n          annotatedSourceFile = factory.updateSourceFile(annotatedSourceFile, [\n            variableDeclaration,\n            ...annotatedSourceFile.statements,\n          ]);\n        }\n\n        return annotatedSourceFile;\n      };\n    };\n  }\n\n  /** Used instead of direct access to the map to faciliate testing. */\n  protected getClassFqn(clazz: ts.ClassDeclaration): string | undefined {\n    return this.fqnsByClass.get(clazz);\n  }\n\n  /**\n   * If the ClassDeclaration has an associated fully-qualified name registered,\n   * will append a static property to the class with the fqn and version.\n   */\n  private addRuntimeInfoToClass(\n    node: ts.ClassDeclaration,\n    fqn: string,\n    rttiSymbol: ts.Identifier,\n    factory: ts.NodeFactory,\n  ): ts.ClassDeclaration {\n    const runtimeInfo = factory.createObjectLiteralExpression([\n      factory.createPropertyAssignment(factory.createIdentifier('fqn'), factory.createStringLiteral(fqn)),\n      factory.createPropertyAssignment(factory.createIdentifier('version'), factory.createStringLiteral(this.version)),\n    ]);\n\n    const runtimeProperty = factory.createPropertyDeclaration(\n      [\n        factory.createModifier(ts.SyntaxKind.PrivateKeyword),\n        factory.createModifier(ts.SyntaxKind.StaticKeyword),\n        factory.createModifier(ts.SyntaxKind.ReadonlyKeyword),\n      ],\n      factory.createComputedPropertyName(rttiSymbol),\n      undefined,\n      undefined,\n      runtimeInfo,\n    );\n\n    return factory.updateClassDeclaration(\n      node,\n      node.modifiers,\n      node.name,\n      node.typeParameters,\n      node.heritageClauses,\n      factory.createNodeArray([runtimeProperty, ...node.members]),\n    );\n  }\n}\n"]}