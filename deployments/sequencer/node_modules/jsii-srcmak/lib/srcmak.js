"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.srcmak = srcmak;
const path = __importStar(require("path"));
const util_1 = require("util");
const fs = __importStar(require("fs-extra"));
const ncp_1 = require("ncp");
const compile_1 = require("./compile");
const util_2 = require("./util");
const ncp = (0, util_1.promisify)(ncp_1.ncp);
const pacmakModule = require.resolve('jsii-pacmak/bin/jsii-pacmak');
async function srcmak(srcdir, options = {}) {
    if (!(await fs.pathExists(srcdir))) {
        throw new Error(`unable to find source directory ${srcdir}`);
    }
    await (0, util_2.mkdtemp)(async (workdir) => {
        // copy sources to temp directory
        await fs.copy(srcdir, workdir);
        // perform jsii compilation
        await (0, compile_1.compile)(workdir, options);
        // extract .jsii if requested
        if (options.jsii) {
            await fs.copy(path.join(workdir, '.jsii'), options.jsii.path);
        }
        // run pacmak to generate code
        await (0, util_2.exec)(pacmakModule, ['--code-only'], { cwd: workdir });
        // extract code based on selected languages
        if (options.python) {
            const reldir = options.python.moduleName.replace(/\./g, '/'); // jsii replaces "." with "/"
            const source = path.resolve(path.join(workdir, 'dist/python/src', reldir));
            const target = path.join(options.python.outdir, reldir);
            await fs.move(source, target, { overwrite: true });
        }
        if (options.java) {
            const source = path.resolve(path.join(workdir, 'dist/java/src/'));
            const target = path.join(options.java.outdir, 'src/');
            await fs.mkdirp(target); // make sure target directory exists
            await ncp(source, target, { clobber: false });
        }
        if (options.csharp) {
            const reldir = options.csharp.namespace;
            const source = path.resolve(path.join(workdir, 'dist/dotnet/', reldir));
            const target = path.join(options.csharp.outdir, reldir);
            await fs.move(source, target, { overwrite: true });
        }
        if (options.golang) {
            const reldir = options.golang.packageName;
            const source = path.resolve(path.join(workdir, 'dist/go/', reldir));
            const target = path.join(options.golang.outdir, reldir);
            await fs.move(source, target, { overwrite: true });
            // remove go.mod as this would make it a submodule
            await fs.remove(path.join(target, 'go.mod'));
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjbWFrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NyY21hay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBWUEsd0JBbURDO0FBL0RELDJDQUE2QjtBQUM3QiwrQkFBaUM7QUFDakMsNkNBQStCO0FBQy9CLDZCQUFrQztBQUNsQyx1Q0FBb0M7QUFFcEMsaUNBQXVDO0FBRXZDLE1BQU0sR0FBRyxHQUFHLElBQUEsZ0JBQVMsRUFBQyxTQUFJLENBQUMsQ0FBQztBQUU1QixNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLDZCQUE2QixDQUFDLENBQUM7QUFFN0QsS0FBSyxVQUFVLE1BQU0sQ0FBQyxNQUFjLEVBQUUsVUFBbUIsRUFBRztJQUNqRSxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ25DLE1BQU0sSUFBSSxLQUFLLENBQUMsbUNBQW1DLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVELE1BQU0sSUFBQSxjQUFPLEVBQUMsS0FBSyxFQUFDLE9BQU8sRUFBQyxFQUFFO1FBQzVCLGlDQUFpQztRQUNqQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRS9CLDJCQUEyQjtRQUMzQixNQUFNLElBQUEsaUJBQU8sRUFBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFaEMsNkJBQTZCO1FBQzdCLElBQUksT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ2pCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hFLENBQUM7UUFFRCw4QkFBOEI7UUFDOUIsTUFBTSxJQUFBLFdBQUksRUFBQyxZQUFZLEVBQUUsQ0FBQyxhQUFhLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBRTVELDJDQUEyQztRQUMzQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNuQixNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsNkJBQTZCO1lBQzNGLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUMzRSxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3hELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDckQsQ0FBQztRQUVELElBQUksT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ2pCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1lBQ2xFLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDdEQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsb0NBQW9DO1lBQzdELE1BQU0sR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUNoRCxDQUFDO1FBRUQsSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDbkIsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7WUFDeEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUN4RSxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3hELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDckQsQ0FBQztRQUVELElBQUksT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ25CLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDO1lBQzFDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDcEUsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztZQUN4RCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBQ25ELGtEQUFrRDtZQUNsRCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUMvQyxDQUFDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IHByb21pc2lmeSB9IGZyb20gJ3V0aWwnO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHsgbmNwIGFzIF9uY3AgfSBmcm9tICduY3AnO1xuaW1wb3J0IHsgY29tcGlsZSB9IGZyb20gJy4vY29tcGlsZSc7XG5pbXBvcnQgeyBPcHRpb25zIH0gZnJvbSAnLi9vcHRpb25zJztcbmltcG9ydCB7IGV4ZWMsIG1rZHRlbXAgfSBmcm9tICcuL3V0aWwnO1xuXG5jb25zdCBuY3AgPSBwcm9taXNpZnkoX25jcCk7XG5cbmNvbnN0IHBhY21ha01vZHVsZSA9IHJlcXVpcmUucmVzb2x2ZSgnanNpaS1wYWNtYWsvYmluL2pzaWktcGFjbWFrJyk7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzcmNtYWsoc3JjZGlyOiBzdHJpbmcsIG9wdGlvbnM6IE9wdGlvbnMgPSB7IH0pIHtcbiAgaWYgKCEoYXdhaXQgZnMucGF0aEV4aXN0cyhzcmNkaXIpKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgdW5hYmxlIHRvIGZpbmQgc291cmNlIGRpcmVjdG9yeSAke3NyY2Rpcn1gKTtcbiAgfVxuXG4gIGF3YWl0IG1rZHRlbXAoYXN5bmMgd29ya2RpciA9PiB7XG4gICAgLy8gY29weSBzb3VyY2VzIHRvIHRlbXAgZGlyZWN0b3J5XG4gICAgYXdhaXQgZnMuY29weShzcmNkaXIsIHdvcmtkaXIpO1xuXG4gICAgLy8gcGVyZm9ybSBqc2lpIGNvbXBpbGF0aW9uXG4gICAgYXdhaXQgY29tcGlsZSh3b3JrZGlyLCBvcHRpb25zKTtcblxuICAgIC8vIGV4dHJhY3QgLmpzaWkgaWYgcmVxdWVzdGVkXG4gICAgaWYgKG9wdGlvbnMuanNpaSkge1xuICAgICAgYXdhaXQgZnMuY29weShwYXRoLmpvaW4od29ya2RpciwgJy5qc2lpJyksIG9wdGlvbnMuanNpaS5wYXRoKTtcbiAgICB9XG5cbiAgICAvLyBydW4gcGFjbWFrIHRvIGdlbmVyYXRlIGNvZGVcbiAgICBhd2FpdCBleGVjKHBhY21ha01vZHVsZSwgWyctLWNvZGUtb25seSddLCB7IGN3ZDogd29ya2RpciB9KTtcblxuICAgIC8vIGV4dHJhY3QgY29kZSBiYXNlZCBvbiBzZWxlY3RlZCBsYW5ndWFnZXNcbiAgICBpZiAob3B0aW9ucy5weXRob24pIHtcbiAgICAgIGNvbnN0IHJlbGRpciA9IG9wdGlvbnMucHl0aG9uLm1vZHVsZU5hbWUucmVwbGFjZSgvXFwuL2csICcvJyk7IC8vIGpzaWkgcmVwbGFjZXMgXCIuXCIgd2l0aCBcIi9cIlxuICAgICAgY29uc3Qgc291cmNlID0gcGF0aC5yZXNvbHZlKHBhdGguam9pbih3b3JrZGlyLCAnZGlzdC9weXRob24vc3JjJywgcmVsZGlyKSk7XG4gICAgICBjb25zdCB0YXJnZXQgPSBwYXRoLmpvaW4ob3B0aW9ucy5weXRob24ub3V0ZGlyLCByZWxkaXIpO1xuICAgICAgYXdhaXQgZnMubW92ZShzb3VyY2UsIHRhcmdldCwgeyBvdmVyd3JpdGU6IHRydWUgfSk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuamF2YSkge1xuICAgICAgY29uc3Qgc291cmNlID0gcGF0aC5yZXNvbHZlKHBhdGguam9pbih3b3JrZGlyLCAnZGlzdC9qYXZhL3NyYy8nKSk7XG4gICAgICBjb25zdCB0YXJnZXQgPSBwYXRoLmpvaW4ob3B0aW9ucy5qYXZhLm91dGRpciwgJ3NyYy8nKTtcbiAgICAgIGF3YWl0IGZzLm1rZGlycCh0YXJnZXQpOyAvLyBtYWtlIHN1cmUgdGFyZ2V0IGRpcmVjdG9yeSBleGlzdHNcbiAgICAgIGF3YWl0IG5jcChzb3VyY2UsIHRhcmdldCwgeyBjbG9iYmVyOiBmYWxzZSB9KTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5jc2hhcnApIHtcbiAgICAgIGNvbnN0IHJlbGRpciA9IG9wdGlvbnMuY3NoYXJwLm5hbWVzcGFjZTtcbiAgICAgIGNvbnN0IHNvdXJjZSA9IHBhdGgucmVzb2x2ZShwYXRoLmpvaW4od29ya2RpciwgJ2Rpc3QvZG90bmV0LycsIHJlbGRpcikpO1xuICAgICAgY29uc3QgdGFyZ2V0ID0gcGF0aC5qb2luKG9wdGlvbnMuY3NoYXJwLm91dGRpciwgcmVsZGlyKTtcbiAgICAgIGF3YWl0IGZzLm1vdmUoc291cmNlLCB0YXJnZXQsIHsgb3ZlcndyaXRlOiB0cnVlIH0pO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmdvbGFuZykge1xuICAgICAgY29uc3QgcmVsZGlyID0gb3B0aW9ucy5nb2xhbmcucGFja2FnZU5hbWU7XG4gICAgICBjb25zdCBzb3VyY2UgPSBwYXRoLnJlc29sdmUocGF0aC5qb2luKHdvcmtkaXIsICdkaXN0L2dvLycsIHJlbGRpcikpO1xuICAgICAgY29uc3QgdGFyZ2V0ID0gcGF0aC5qb2luKG9wdGlvbnMuZ29sYW5nLm91dGRpciwgcmVsZGlyKTtcbiAgICAgIGF3YWl0IGZzLm1vdmUoc291cmNlLCB0YXJnZXQsIHsgb3ZlcndyaXRlOiB0cnVlIH0pO1xuICAgICAgLy8gcmVtb3ZlIGdvLm1vZCBhcyB0aGlzIHdvdWxkIG1ha2UgaXQgYSBzdWJtb2R1bGVcbiAgICAgIGF3YWl0IGZzLnJlbW92ZShwYXRoLmpvaW4odGFyZ2V0LCAnZ28ubW9kJykpO1xuICAgIH1cbiAgfSk7XG59XG4iXX0=