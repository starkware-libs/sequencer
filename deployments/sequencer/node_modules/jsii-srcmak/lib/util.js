"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mkdtemp = mkdtemp;
exports.exec = exec;
exports.validateOptions = validateOptions;
const child_process_1 = require("child_process");
const os = __importStar(require("os"));
const path = __importStar(require("path"));
const fs = __importStar(require("fs-extra"));
async function mkdtemp(closure) {
    const workdir = await fs.mkdtemp(path.join(os.tmpdir(), 'temp-'));
    try {
        await closure(workdir);
        if (!process.env.RETAIN_TMP) {
            await fs.remove(workdir);
        }
        else {
            console.error(`NOTE: Temp directory retained (RETAIN_TMP=1): ${workdir}`);
        }
    }
    catch (e) {
        console.error(`NOTE: Temp directory retained due to an error: ${workdir}`);
        throw e;
    }
}
async function exec(moduleName, args = [], options = {}) {
    return new Promise((ok, fail) => {
        var _a, _b;
        const opts = {
            ...options,
            stdio: ['inherit', 'pipe', 'pipe'],
            shell: true,
        };
        const child = (0, child_process_1.spawn)(`"${process.execPath}"`, [moduleName, ...args], opts);
        const data = new Array();
        (_a = child.stdout) === null || _a === void 0 ? void 0 : _a.on('data', chunk => data.push(chunk));
        (_b = child.stderr) === null || _b === void 0 ? void 0 : _b.on('data', chunk => data.push(chunk));
        const newError = (message) => {
            var _a, _b;
            return new Error([
                message,
                '  | ' + Buffer.concat(data).toString('utf-8').split('\n').filter(x => x).join('\n  | '),
                '  +----------------------------------------------------------------------------------',
                `  | Command: ${moduleName} ${args.join(' ')}`,
                `  | Workdir: ${path.resolve((_b = (_a = options.cwd) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : '.')}`,
                '  +----------------------------------------------------------------------------------',
            ].join('\n'));
        };
        child.once('error', err => {
            throw newError(`jsii compilation failed. error: ${err.message}`);
        });
        child.once('exit', code => {
            if (code === 0) {
                return ok();
            }
            else {
                return fail(newError(`jsii compilation failed with non-zero exit code: ${code}`));
            }
        });
    });
}
/**
 * This validates that the Python module name, Java package name, and C# namespace
 * conform to language-specific constraints.
 *
 * @param options Options set by the consumer
 * @throws error if options do not conform
 */
function validateOptions(options) {
    var _a, _b, _c, _d;
    if ((_a = options.python) === null || _a === void 0 ? void 0 : _a.moduleName.includes('-')) {
        throw new Error(`Python moduleName [${options.python.moduleName}] may not contain "-"`);
    }
    if ((_b = options.java) === null || _b === void 0 ? void 0 : _b.package.includes('-')) {
        throw new Error(`Java package [${options.java.package}] may not contain "-"`);
    }
    if ((_c = options.csharp) === null || _c === void 0 ? void 0 : _c.namespace.includes('-')) {
        throw new Error(`C# namespace [${options.csharp.namespace}] may not contain "-"`);
    }
    if ((_d = options.golang) === null || _d === void 0 ? void 0 : _d.moduleName.includes('_')) {
        throw new Error(`Go module name [${options.golang.moduleName}] may not contain "_"`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFNQSwwQkFjQztBQUVELG9CQW1DQztBQVNELDBDQWdCQztBQWxGRCxpREFBb0Q7QUFDcEQsdUNBQXlCO0FBQ3pCLDJDQUE2QjtBQUM3Qiw2Q0FBK0I7QUFHeEIsS0FBSyxVQUFVLE9BQU8sQ0FBQyxPQUF1QztJQUNuRSxNQUFNLE9BQU8sR0FBRyxNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUNsRSxJQUFJLENBQUM7UUFDSCxNQUFNLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV2QixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUM1QixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDM0IsQ0FBQzthQUFNLENBQUM7WUFDTixPQUFPLENBQUMsS0FBSyxDQUFDLGlEQUFpRCxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQzVFLENBQUM7SUFDSCxDQUFDO0lBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztRQUNYLE9BQU8sQ0FBQyxLQUFLLENBQUMsa0RBQWtELE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDM0UsTUFBTSxDQUFDLENBQUM7SUFDVixDQUFDO0FBQ0gsQ0FBQztBQUVNLEtBQUssVUFBVSxJQUFJLENBQUMsVUFBa0IsRUFBRSxPQUFpQixFQUFFLEVBQUUsVUFBd0IsRUFBRztJQUM3RixPQUFPLElBQUksT0FBTyxDQUFPLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFOztRQUVwQyxNQUFNLElBQUksR0FBaUI7WUFDekIsR0FBRyxPQUFPO1lBQ1YsS0FBSyxFQUFFLENBQUMsU0FBUyxFQUFF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dUJBQXVCLENBQUMsQ0FBQztJQUNwRixDQUFDO0lBRUQsSUFBSSxNQUFBLE9BQU8sQ0FBQyxNQUFNLDBDQUFFLFVBQVUsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUM3QyxNQUFNLElBQUksS0FBSyxDQUFDLG1CQUFtQixPQUFPLENBQUMsTUFBTSxDQUFDLFVBQVUsdUJBQXVCLENBQUMsQ0FBQztJQUN2RixDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNwYXduLCBTcGF3bk9wdGlvbnMgfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCAqIGFzIG9zIGZyb20gJ29zJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgeyBPcHRpb25zIH0gZnJvbSAnLi9vcHRpb25zJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1rZHRlbXAoY2xvc3VyZTogKGRpcjogc3RyaW5nKSA9PiBQcm9taXNlPHZvaWQ+KSB7XG4gIGNvbnN0IHdvcmtkaXIgPSBhd2FpdCBmcy5ta2R0ZW1wKHBhdGguam9pbihvcy50bXBkaXIoKSwgJ3RlbXAtJykpO1xuICB0cnkge1xuICAgIGF3YWl0IGNsb3N1cmUod29ya2Rpcik7XG5cbiAgICBpZiAoIXByb2Nlc3MuZW52LlJFVEFJTl9UTVApIHtcbiAgICAgIGF3YWl0IGZzLnJlbW92ZSh3b3JrZGlyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5lcnJvcihgTk9URTogVGVtcCBkaXJlY3RvcnkgcmV0YWluZWQgKFJFVEFJTl9UTVA9MSk6ICR7d29ya2Rpcn1gKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmVycm9yKGBOT1RFOiBUZW1wIGRpcmVjdG9yeSByZXRhaW5lZCBkdWUgdG8gYW4gZXJyb3I6ICR7d29ya2Rpcn1gKTtcbiAgICB0aHJvdyBlO1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBleGVjKG1vZHVsZU5hbWU6IHN0cmluZywgYXJnczogc3RyaW5nW10gPSBbXSwgb3B0aW9uczogU3Bhd25PcHRpb25zID0geyB9KSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPigob2ssIGZhaWwpID0+IHtcblxuICAgIGNvbnN0IG9wdHM6IFNwYXduT3B0aW9ucyA9IHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBzdGRpbzogWydpbmhlcml0JywgJ3BpcGUnLCAncGlwZSddLFxuICAgICAgc2hlbGw6IHRydWUsXG4gICAgfTtcbiAgICBjb25zdCBjaGlsZCA9IHNwYXduKGBcIiR7cHJvY2Vzcy5leGVjUGF0aH1cImAsIFttb2R1bGVOYW1lLCAuLi5hcmdzXSwgb3B0cyk7XG5cbiAgICBjb25zdCBkYXRhID0gbmV3IEFycmF5PEJ1ZmZlcj4oKTtcbiAgICBjaGlsZC5zdGRvdXQ/Lm9uKCdkYXRhJywgY2h1bmsgPT4gZGF0YS5wdXNoKGNodW5rKSk7XG4gICAgY2hpbGQuc3RkZXJyPy5vbignZGF0YScsIGNodW5rID0+IGRhdGEucHVzaChjaHVuaykpO1xuXG4gICAgY29uc3QgbmV3RXJyb3IgPSAobWVzc2FnZTogc3RyaW5nKSA9PiBuZXcgRXJyb3IoW1xuICAgICAgbWVzc2FnZSxcbiAgICAgICcgIHwgJyArIEJ1ZmZlci5jb25jYXQoZGF0YSkudG9TdHJpbmcoJ3V0Zi04Jykuc3BsaXQoJ1xcbicpLmZpbHRlcih4ID0+IHgpLmpvaW4oJ1xcbiAgfCAnKSxcbiAgICAgICcgICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJyxcbiAgICAgIGAgIHwgQ29tbWFuZDogJHttb2R1bGVOYW1lfSAke2FyZ3Muam9pbignICcpfWAsXG4gICAgICBgICB8IFdvcmtkaXI6ICR7cGF0aC5yZXNvbHZlKG9wdGlvbnMuY3dkPy50b1N0cmluZygpID8/ICcuJyl9YCxcbiAgICAgICcgICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJyxcbiAgICBdLmpvaW4oJ1xcbicpKTtcblxuICAgIGNoaWxkLm9uY2UoJ2Vycm9yJywgZXJyID0+IHtcbiAgICAgIHRocm93IG5ld0Vycm9yKGBqc2lpIGNvbXBpbGF0aW9uIGZhaWxlZC4gZXJyb3I6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgfSk7XG5cbiAgICBjaGlsZC5vbmNlKCdleGl0JywgY29kZSA9PiB7XG4gICAgICBpZiAoY29kZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gb2soKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWlsKG5ld0Vycm9yKGBqc2lpIGNvbXBpbGF0aW9uIGZhaWxlZCB3aXRoIG5vbi16ZXJvIGV4aXQgY29kZTogJHtjb2RlfWApKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhpcyB2YWxpZGF0ZXMgdGhhdCB0aGUgUHl0aG9uIG1vZHVsZSBuYW1lLCBKYXZhIHBhY2thZ2UgbmFtZSwgYW5kIEMjIG5hbWVzcGFjZVxuICogY29uZm9ybSB0byBsYW5ndWFnZS1zcGVjaWZpYyBjb25zdHJhaW50cy5cbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIHNldCBieSB0aGUgY29uc3VtZXJcbiAqIEB0aHJvd3MgZXJyb3IgaWYgb3B0aW9ucyBkbyBub3QgY29uZm9ybVxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVPcHRpb25zKG9wdGlvbnM6IE9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMucHl0aG9uPy5tb2R1bGVOYW1lLmluY2x1ZGVzKCctJykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFB5dGhvbiBtb2R1bGVOYW1lIFske29wdGlvbnMucHl0aG9uLm1vZHVsZU5hbWV9XSBtYXkgbm90IGNvbnRhaW4gXCItXCJgKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmphdmE/LnBhY2thZ2UuaW5jbHVkZXMoJy0nKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgSmF2YSBwYWNrYWdlIFske29wdGlvbnMuamF2YS5wYWNrYWdlfV0gbWF5IG5vdCBjb250YWluIFwiLVwiYCk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5jc2hhcnA/Lm5hbWVzcGFjZS5pbmNsdWRlcygnLScpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDIyBuYW1lc3BhY2UgWyR7b3B0aW9ucy5jc2hhcnAubmFtZXNwYWNlfV0gbWF5IG5vdCBjb250YWluIFwiLVwiYCk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5nb2xhbmc/Lm1vZHVsZU5hbWUuaW5jbHVkZXMoJ18nKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgR28gbW9kdWxlIG5hbWUgWyR7b3B0aW9ucy5nb2xhbmcubW9kdWxlTmFtZX1dIG1heSBub3QgY29udGFpbiBcIl9cImApO1xuICB9XG59XG4iXX0=