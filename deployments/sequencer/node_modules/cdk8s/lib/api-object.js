"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiObject = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const constructs_1 = require("constructs");
const _util_1 = require("./_util");
const chart_1 = require("./chart");
const json_patch_1 = require("./json-patch");
const metadata_1 = require("./metadata");
const resolve_1 = require("./resolve");
const API_OBJECT_SYMBOL = Symbol.for('cdk8s.ApiObject');
class ApiObject extends constructs_1.Construct {
    /**
     * Return whether the given object is an `ApiObject`.
     *
     * We do attribute detection since we can't reliably use 'instanceof'.
  
     * @param o The object to check
     */
    static isApiObject(o) {
        return o !== null && typeof o === 'object' && API_OBJECT_SYMBOL in o;
    }
    /**
     * Implements `instanceof ApiObject` using the more reliable `ApiObject.isApiObject` static method
     *
     * @param o The object to check
     * @internal
     */
    static [(_a = JSII_RTTI_SYMBOL_1, Symbol.hasInstance)](o) {
        return ApiObject.isApiObject(o);
    }
    /**
     * Returns the `ApiObject` named `Resource` which is a child of the given
     * construct. If `c` is an `ApiObject`, it is returned directly. Throws an
     * exception if the construct does not have a child named `Default` _or_ if
     * this child is not an `ApiObject`.
     *
     * @param c The higher-level construct
     */
    static of(c) {
        if (c instanceof ApiObject) {
            return c;
        }
        const child = c.node.defaultChild;
        if (!child) {
            throw new Error(`cannot find a (direct or indirect) child of type ApiObject for construct ${c.node.path}`);
        }
        return ApiObject.of(child);
    }
    /**
     * Defines an API object.
     *
     * @param scope the construct scope
     * @param id namespace
     * @param props options
     */
    constructor(scope, id, props) {
        super(scope, id);
        this.props = props;
        this.patches = new Array();
        this.chart = chart_1.Chart.of(this);
        this.kind = props.kind;
        this.apiVersion = props.apiVersion;
        this.apiGroup = parseApiGroup(this.apiVersion);
        this.name = props.metadata?.name ?? this.chart.generateObjectName(this);
        this.metadata = new metadata_1.ApiObjectMetadataDefinition({
            name: this.name,
            // user defined values
            ...props.metadata,
            namespace: props.metadata?.namespace ?? this.chart.namespace,
            labels: {
                ...this.chart.labels,
                ...props.metadata?.labels,
            },
            apiObject: this,
        });
        Object.defineProperty(this, API_OBJECT_SYMBOL, { value: true });
    }
    /**
     * Create a dependency between this ApiObject and other constructs.
     * These can be other ApiObjects, Charts, or custom.
     *
     * @param dependencies the dependencies to add.
     */
    addDependency(...dependencies) {
        this.node.addDependency(...dependencies);
    }
    /**
     * Applies a set of RFC-6902 JSON-Patch operations to the manifest
     * synthesized for this API object.
     *
     * @param ops The JSON-Patch operations to apply.
     *
     * @example
     *
     *   kubePod.addJsonPatch(JsonPatch.replace('/spec/enableServiceLinks', true));
     *
     */
    addJsonPatch(...ops) {
        this.patches.push(...ops);
    }
    /**
     * Renders the object to Kubernetes JSON.
     *
     * To disable sorting of dictionary keys in output object set the
     * `CDK8S_DISABLE_SORT` environment variable to any non-empty value.
     */
    toJson() {
        try {
            const data = {
                ...this.props,
                metadata: this.metadata.toJson(),
            };
            const sortKeys = process.env.CDK8S_DISABLE_SORT ? false : true;
            const json = (0, _util_1.sanitizeValue)((0, resolve_1.resolve)([], data, this), { sortKeys });
            const patched = json_patch_1.JsonPatch.apply(json, ...this.patches);
            // reorder top-level keys so that we first have "apiVersion", "kind" and
            // "metadata" and then all the rest
            const result = {};
            const orderedKeys = ['apiVersion', 'kind', 'metadata', ...Object.keys(patched)];
            for (const k of orderedKeys) {
                if (k in patched) {
                    result[k] = patched[k];
                }
            }
            return result;
        }
        catch (e) {
            throw new Error(`Failed serializing construct at path '${this.node.path}' with name '${this.name}': ${e}`);
        }
    }
}
exports.ApiObject = ApiObject;
ApiObject[_a] = { fqn: "cdk8s.ApiObject", version: "2.70.12" };
function parseApiGroup(apiVersion) {
    const v = apiVersion.split('/');
    // no group means "core"
    // https://kubernetes.io/docs/reference/using-api/api-overview/#api-groups
    if (v.length === 1) {
        return 'core';
    }
    if (v.length === 2) {
        return v[0];
    }
    throw new Error(`invalid apiVersion ${apiVersion}, expecting GROUP/VERSION. See https://kubernetes.io/docs/reference/using-api/api-overview/#api-groups`);
}
//# sourceMappingURL=data:application/json;base64,