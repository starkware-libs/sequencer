"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidationPlugin = exports.ValidationReport = exports.ValidationLogger = exports.ValidationContext = void 0;
const fs = __importStar(require("fs"));
const os = __importStar(require("os"));
const table_1 = require("table");
const yaml = __importStar(require("yaml"));
/**
 * Context available to plugins during validation.
 */
class ValidationContext {
    constructor(
    /**
     * The list of manifests to validate.
     */
    manifests, 
    /**
     * The NodeJS package name of the plugin running the validation.
     */
    pkg, 
    /**
     * The version of the NodeJS package that runs the validation.
     */
    version, 
    /**
     * Construct metadata of resources in the application.
     */
    metadata = {}, 
    /**
     * Whether or not the synth command was executed with --stdout.
     */
    stdout) {
        this.manifests = manifests;
        this.pkg = pkg;
        this.version = version;
        this.metadata = metadata;
        this.stdout = stdout;
        this.report = new ValidationReport(this.pkg, this.version, this.metadata ?? {}, stdout ?? false);
        this.logger = new ValidationLogger();
    }
    parseManifest(manifestPath) {
        const parsed = yaml.parseAllDocuments(fs.readFileSync(manifestPath, { encoding: 'utf-8' }));
        const resources = Array.isArray(parsed) ? parsed : [parsed];
        return resources.map(r => r.toJS());
    }
}
exports.ValidationContext = ValidationContext;
/**
 * Logger available to plugins during validation. Use this instead of `console.log`.
 */
class ValidationLogger {
    /**
     * Log a message.
     */
    log(message) {
        console.log(message);
    }
}
exports.ValidationLogger = ValidationLogger;
/**
 * The report emitted by the plugin after evaluation.
 */
class ValidationReport {
    constructor(pkg, version, metadata, stdout) {
        this.pkg = pkg;
        this.version = version;
        this.metadata = metadata;
        this.stdout = stdout;
        this.violations = [];
    }
    /**
     * Add a violation to the report.
     */
    addViolation(violation) {
        if (this._summary) {
            throw new Error('Violations cannot be added to report after its submitted');
        }
        const violatingConstructs = [];
        for (const resource of violation.violatingResources) {
            const constructPath = this.metadata[resource.resourceName]?.path;
            violatingConstructs.push({
                ...resource,
                // augment with construct metadata
                constructPath: constructPath,
                // if synth is executed with --stdout, the manifest path
                // here is temporary and will be deleted once the command finishes.
                manifestPath: this.stdout ? 'STDOUT' : resource.manifestPath,
            });
        }
        this.violations.push({
            ruleName: violation.ruleName,
            recommendation: violation.recommendation,
            violatingConstructs: violatingConstructs,
            fix: violation.fix,
        });
    }
    /**
     * Submit the report with a status and additional metadata.
     */
    submit(status, metadata) {
        this._summary = { status, plugin: this.pkg, version: this.version, metadata };
    }
    /**
     * Whether or not the report was successfull.
     */
    get success() {
        if (!this._summary) {
            throw new Error('Unable to determine report status: Report is incomplete. Call \'report.submit\'');
        }
        return this._summary.status === 'success';
    }
    /**
     * Transform the report to a well formatted table string.
     */
    toString() {
        const json = this.toJson();
        const output = [json.title];
        output.push('-'.repeat(json.title.length));
        output.push('');
        output.push('(Summary)');
        output.push('');
        output.push((0, table_1.table)([
            ['Status', json.summary.status],
            ['Plugin', json.summary.plugin],
            ['Version', json.summary.version],
            ...Object.entries(json.summary.metadata ?? {}),
        ]));
        if (json.violations) {
            output.push('');
            output.push('(Violations)');
        }
        for (const violation of json.violations) {
            const occurrences = violation.violatingConstructs.flatMap(c => c.locations).length;
            const title = reset(red(bright(`${violation.ruleName} (${occurrences} occurrences)`)));
            output.push('');
            output.push(title);
            output.push('');
            output.push('  Occurrences:');
            for (const construct of violation.violatingConstructs) {
                output.push('');
                output.push(`    - Construct Path: ${construct.constructPath ?? 'N/A'}`);
                output.push(`    - Manifest Path: ${construct.manifestPath}`);
                output.push(`    - Resource Name: ${construct.resourceName}`);
                if (construct.locations) {
                    output.push('    - Locations:');
                    for (const location of construct.locations) {
                        output.push(`      > ${location}`);
                    }
                }
            }
            output.push('');
            output.push(`  Recommendation: ${violation.recommendation}`);
            output.push(`  How to fix: ${violation.fix}`);
        }
        return output.join(os.EOL);
    }
    /**
     * Transform the report into a JSON object.
     */
    toJson() {
        if (!this._summary) {
            throw new Error('Unable to determine report result: Report is incomplete. Call \'report.submit\'');
        }
        return {
            title: `Validation Report (${this.pkg}@${this.version})`,
            violations: this.violations,
            summary: this._summary,
        };
    }
}
exports.ValidationReport = ValidationReport;
/**
 * Utiliy class for loading validation plugins.
 */
class ValidationPlugin {
    /**
     * Load the validation plugin and create the necessary context for its execution.
     */
    static load(validation, app, stdout, pluginManager) {
        const plugin = pluginManager.load({
            pkg: validation.package,
            version: validation.version,
            class: validation.class,
            properties: validation.properties,
            installEnv: validation.installEnv,
        });
        if (typeof (plugin.instance.validate) !== 'function') {
            throw new Error(`Instance of class '${validation.class}' from package '${validation.package}@${validation.version}' is not a validation plugin. Are you sure you specified the correct class?`);
        }
        const metadata = app.constructMetadata ? this.loadConstructMetadata(app.constructMetadata) : {};
        const context = new ValidationContext(app.manifests, plugin.package.pkg, plugin.package.version, metadata, stdout);
        return { plugin: plugin.instance, context };
    }
    static loadConstructMetadata(constructMetadataPath) {
        const contents = JSON.parse(fs.readFileSync(constructMetadataPath, { encoding: 'utf-8' }));
        const resources = {};
        if (contents.version !== '1.0.0') {
            throw new Error(`Unexpected version of construct metadata at ${constructMetadataPath}: ${contents.version}. Supported versions are: [1.0.0]`);
        }
        for (const [name, metadata] of Object.entries(contents.resources)) {
            resources[name] = { path: metadata.path };
        }
        return resources;
    }
}
exports.ValidationPlugin = ValidationPlugin;
function reset(s) {
    return `${s}\x1b[0m`;
}
function red(s) {
    return `\x1b[31m${s}`;
}
function bright(s) {
    return `\x1b[1m${s}`;
}
//# sourceMappingURL=data:application/json;base64,