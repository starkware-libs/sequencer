/// <reference types="node" />
/// <reference types="node" />
import { SpawnOptions } from 'child_process';
import { BinaryToTextEncoding } from 'crypto';
import { ImportSpec, ValidationConfig } from './config';
import { PluginManager } from './plugins/_manager';
import { SafeReviver } from './reviver';
export declare const PREFIX_DELIM = ":=";
export declare function shell(program: string, args?: string[], options?: SpawnOptions): Promise<string>;
export declare function mkdtemp(closure: (dir: string) => Promise<void>): Promise<void>;
export declare function synthApp(command: string, outdir: string, stdout: boolean, metadata: boolean): Promise<SynthesizedApp>;
export declare function validateApp(app: SynthesizedApp, stdout: boolean, validations: ValidationConfig[], pluginManager: PluginManager, reportsFile?: string): Promise<void>;
export declare function safeParseJson(text: string, reviver: SafeReviver): any;
export declare function safeParseYaml(text: string, reviver: SafeReviver): any[];
export declare function download(url: string): Promise<string>;
export declare function findManifests(directory: string): Promise<string[]>;
export declare function findConstructMetadata(directory: string): string | undefined;
/**
 * Result of synthesizing an application.
 */
export interface SynthesizedApp {
    /**
     * The list of manifests produced by the app.
     */
    readonly manifests: readonly string[];
    /**
     * The construct metadata file (if exists).
     */
    readonly constructMetadata?: string;
}
export declare function parseImports(spec: string): ImportSpec;
export declare function hashAndEncode(input: string, algorithm?: string, encoding?: BinaryToTextEncoding): string;
export declare function deriveFileName(url: string): string;
export declare function isK8sImport(value: string): boolean;
export declare function isHelmImport(value: string): boolean;
export declare function crdsArePresent(imprts: string[] | undefined): boolean;
