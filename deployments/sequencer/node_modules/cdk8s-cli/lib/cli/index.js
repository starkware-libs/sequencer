"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const colors_1 = require("colors");
const yargs = __importStar(require("yargs"));
const upgrades_1 = require("../upgrades");
async function main() {
    const ya = yargs
        .option('check-upgrade', { type: 'boolean', desc: 'Check for cdk8s-cli upgrade', default: true })
        .check(argv => {
        if (argv.checkUpgrade) {
            const versions = (0, upgrades_1.upgradeAvailable)();
            if (versions) {
                console.error('------------------------------------------------------------------------------------------------');
                console.error((0, colors_1.yellow)(`A new version ${versions.latest} of cdk8s-cli is available (current ${versions.current}).`));
                console.error((0, colors_1.yellow)('Run "npm install -g cdk8s-cli" to install the latest version on your system.'));
                console.error((0, colors_1.yellow)('For additional installation methods, see https://cdk8s.io/docs/latest/getting-started'));
                console.error('------------------------------------------------------------------------------------------------');
            }
        }
        return true;
    }, true)
        .commandDir('cmds')
        .recommendCommands()
        .wrap(yargs.terminalWidth())
        .showHelpOnFail(false)
        .env('CDK8S')
        .epilogue('Options can be specified via environment variables with the "CDK8S_" prefix (e.g. "CDK8S_OUTPUT")')
        .help();
    const args = ya.argv;
    if (args._.length === 0) {
        yargs.showHelp();
    }
}
main().catch(e => {
    console.error(e.stack);
    process.exit(1);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY2xpL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxtQ0FBZ0M7QUFDaEMsNkNBQStCO0FBQy9CLDBDQUErQztBQUUvQyxLQUFLLFVBQVUsSUFBSTtJQUNqQixNQUFNLEVBQUUsR0FBRyxLQUFLO1NBQ2IsTUFBTSxDQUFDLGVBQWUsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLDZCQUE2QixFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQztTQUNoRyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDWixJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsTUFBTSxRQUFRLEdBQUcsSUFBQSwyQkFBZ0IsR0FBRSxDQUFDO1lBQ3BDLElBQUksUUFBUSxFQUFFO2dCQUNaLE9BQU8sQ0FBQyxLQUFLLENBQUMsa0dBQWtHLENBQUMsQ0FBQztnQkFDbEgsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFBLGVBQU0sRUFBQyxpQkFBaUIsUUFBUSxDQUFDLE1BQU0sdUNBQXVDLFFBQVEsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ25ILE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBQSxlQUFNLEVBQUMsOEVBQThFLENBQUMsQ0FBQyxDQUFDO2dCQUN0RyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUEsZUFBTSxFQUFDLHVGQUF1RixDQUFDLENBQUMsQ0FBQztnQkFDL0csT0FBTyxDQUFDLEtBQUssQ0FBQyxrR0FBa0csQ0FBQyxDQUFDO2FBQ25IO1NBQ0Y7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUMsRUFBRSxJQUFJLENBQUM7U0FDUCxVQUFVLENBQUMsTUFBTSxDQUFDO1NBQ2xCLGlCQUFpQixFQUFFO1NBQ25CLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDM0IsY0FBYyxDQUFDLEtBQUssQ0FBQztTQUNyQixHQUFHLENBQUMsT0FBTyxDQUFDO1NBQ1osUUFBUSxDQUFDLG1HQUFtRyxDQUFDO1NBQzdHLElBQUksRUFBRSxDQUFDO0lBRVYsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQztJQUNyQixJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUN2QixLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7S0FDbEI7QUFDSCxDQUFDO0FBRUQsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFO0lBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkIsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsQixDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHllbGxvdyB9IGZyb20gJ2NvbG9ycyc7XG5pbXBvcnQgKiBhcyB5YXJncyBmcm9tICd5YXJncyc7XG5pbXBvcnQgeyB1cGdyYWRlQXZhaWxhYmxlIH0gZnJvbSAnLi4vdXBncmFkZXMnO1xuXG5hc3luYyBmdW5jdGlvbiBtYWluKCkge1xuICBjb25zdCB5YSA9IHlhcmdzXG4gICAgLm9wdGlvbignY2hlY2stdXBncmFkZScsIHsgdHlwZTogJ2Jvb2xlYW4nLCBkZXNjOiAnQ2hlY2sgZm9yIGNkazhzLWNsaSB1cGdyYWRlJywgZGVmYXVsdDogdHJ1ZSB9KVxuICAgIC5jaGVjayhhcmd2ID0+IHtcbiAgICAgIGlmIChhcmd2LmNoZWNrVXBncmFkZSkge1xuICAgICAgICBjb25zdCB2ZXJzaW9ucyA9IHVwZ3JhZGVBdmFpbGFibGUoKTtcbiAgICAgICAgaWYgKHZlcnNpb25zKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJyk7XG4gICAgICAgICAgY29uc29sZS5lcnJvcih5ZWxsb3coYEEgbmV3IHZlcnNpb24gJHt2ZXJzaW9ucy5sYXRlc3R9IG9mIGNkazhzLWNsaSBpcyBhdmFpbGFibGUgKGN1cnJlbnQgJHt2ZXJzaW9ucy5jdXJyZW50fSkuYCkpO1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoeWVsbG93KCdSdW4gXCJucG0gaW5zdGFsbCAtZyBjZGs4cy1jbGlcIiB0byBpbnN0YWxsIHRoZSBsYXRlc3QgdmVyc2lvbiBvbiB5b3VyIHN5c3RlbS4nKSk7XG4gICAgICAgICAgY29uc29sZS5lcnJvcih5ZWxsb3coJ0ZvciBhZGRpdGlvbmFsIGluc3RhbGxhdGlvbiBtZXRob2RzLCBzZWUgaHR0cHM6Ly9jZGs4cy5pby9kb2NzL2xhdGVzdC9nZXR0aW5nLXN0YXJ0ZWQnKSk7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSwgdHJ1ZSlcbiAgICAuY29tbWFuZERpcignY21kcycpXG4gICAgLnJlY29tbWVuZENvbW1hbmRzKClcbiAgICAud3JhcCh5YXJncy50ZXJtaW5hbFdpZHRoKCkpXG4gICAgLnNob3dIZWxwT25GYWlsKGZhbHNlKVxuICAgIC5lbnYoJ0NESzhTJylcbiAgICAuZXBpbG9ndWUoJ09wdGlvbnMgY2FuIGJlIHNwZWNpZmllZCB2aWEgZW52aXJvbm1lbnQgdmFyaWFibGVzIHdpdGggdGhlIFwiQ0RLOFNfXCIgcHJlZml4IChlLmcuIFwiQ0RLOFNfT1VUUFVUXCIpJylcbiAgICAuaGVscCgpO1xuXG4gIGNvbnN0IGFyZ3MgPSB5YS5hcmd2O1xuICBpZiAoYXJncy5fLmxlbmd0aCA9PT0gMCkge1xuICAgIHlhcmdzLnNob3dIZWxwKCk7XG4gIH1cbn1cblxubWFpbigpLmNhdGNoKGUgPT4ge1xuICBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICBwcm9jZXNzLmV4aXQoMSk7XG59KTtcbiJdfQ==