"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.crdsArePresent = exports.isHelmImport = exports.isK8sImport = exports.deriveFileName = exports.hashAndEncode = exports.parseImports = exports.findConstructMetadata = exports.findManifests = exports.download = exports.safeParseYaml = exports.safeParseJson = exports.validateApp = exports.synthApp = exports.mkdtemp = exports.shell = exports.PREFIX_DELIM = void 0;
const child_process_1 = require("child_process");
const crypto_1 = require("crypto");
const fs_1 = require("fs");
const http = __importStar(require("http"));
const https = __importStar(require("https"));
const os = __importStar(require("os"));
const path = __importStar(require("path"));
const url_1 = require("url");
const fs = __importStar(require("fs-extra"));
const yaml = __importStar(require("yaml"));
const crds_dev_1 = require("./import/crds-dev");
const validation_1 = require("./plugins/validation");
exports.PREFIX_DELIM = ':=';
async function shell(program, args = [], options = {}) {
    const command = `"${program} ${args.join(' ')}" at ${path.resolve(options.cwd?.toString() ?? '.')}`;
    return new Promise((ok, ko) => {
        const child = (0, child_process_1.spawn)(program, args, { stdio: ['inherit', 'pipe', 'inherit'], ...options });
        const data = new Array();
        child.stdout?.on('data', chunk => data.push(chunk));
        child.once('error', err => ko(new Error(`command ${command} failed: ${err}`)));
        child.once('exit', code => {
            if (code === 0) {
                return ok(Buffer.concat(data).toString('utf-8'));
            }
            else {
                return ko(new Error(`command ${command} returned a non-zero exit code ${code}`));
            }
        });
    });
}
exports.shell = shell;
async function mkdtemp(closure) {
    const workdir = await fs.mkdtemp(path.join(os.tmpdir(), 'cdk8s-'));
    try {
        await closure(workdir);
    }
    finally {
        await fs.remove(workdir);
    }
}
exports.mkdtemp = mkdtemp;
async function synthApp(command, outdir, stdout, metadata) {
    if (!stdout) {
        console.log('Synthesizing application');
    }
    await shell(command, [], {
        shell: true,
        env: {
            ...process.env,
            CDK8S_OUTDIR: outdir,
            // record metadata so that the validation report
            // has contruct aware context.
            CDK8S_RECORD_CONSTRUCT_METADATA: process.env.CDK8S_RECORD_CONSTRUCT_METADATA ?? (metadata ? 'true' : 'false'),
        },
    });
    if (!await fs.pathExists(outdir)) {
        console.error(`ERROR: synthesis failed, app expected to create "${outdir}"`);
        process.exit(1);
    }
    let found = false;
    const yamlFiles = await findManifests(outdir);
    if (yamlFiles?.length) {
        if (!stdout) {
            for (const yamlFile of yamlFiles) {
                console.log(`  - ${yamlFile}`);
            }
        }
        found = true;
    }
    if (!found) {
        console.error('No manifests synthesized');
    }
    const constructMetadata = findConstructMetadata(outdir);
    return { manifests: yamlFiles, constructMetadata };
}
exports.synthApp = synthApp;
async function validateApp(app, stdout, validations, pluginManager, reportsFile) {
    const validators = [];
    for (const validation of validations) {
        const { plugin, context } = validation_1.ValidationPlugin.load(validation, app, stdout, pluginManager);
        validators.push({ plugin, context });
    }
    const reports = [];
    let success = true;
    console.log('Performing validations');
    for (const validator of validators) {
        await validator.plugin.validate(validator.context);
        const report = validator.context.report;
        success = success && report.success;
        reports.push(report);
    }
    console.log('Validations finished');
    // now we can print them. we don't incrementally print
    // so to not clutter the terminal in case of errors.
    for (const report of reports) {
        console.log('');
        console.log(report.toString());
        console.log('');
    }
    if (reportsFile) {
        if (fs.existsSync(reportsFile)) {
            throw new Error(`Unable to write validation reports file. Already exists: ${reportsFile}`);
        }
        // write the reports in JSON to a file
        fs.writeFileSync(reportsFile, JSON.stringify({
            reports: reports.map(r => r.toJson()),
        }, null, 2));
    }
    // exit with failure if any report resulted in a failure
    if (!success) {
        console.error('Validation failed. See above reports for details');
        process.exit(2);
    }
    console.log('Validations ended succesfully');
}
exports.validateApp = validateApp;
function safeParseJson(text, reviver) {
    const json = JSON.parse(text);
    reviver.sanitize(json);
    return json;
}
exports.safeParseJson = safeParseJson;
function safeParseYaml(text, reviver) {
    // parseAllDocuments doesnt accept a reviver
    // so we first parse normally and than transform
    // to JS using the reviver.
    const parsed = yaml.parseAllDocuments(text);
    const docs = [];
    for (const doc of parsed) {
        const json = doc.toJS();
        reviver.sanitize(json);
        docs.push(json);
    }
    return docs;
}
exports.safeParseYaml = safeParseYaml;
async function download(url) {
    let client;
    const proto = (0, url_1.parse)(url).protocol;
    if (!proto || proto === 'file:') {
        return fs.readFile(url, 'utf-8');
    }
    switch (proto) {
        case 'https:':
            client = https;
            break;
        case 'http:':
            client = http;
            break;
        default:
            throw new Error(`unsupported protocol ${proto}`);
    }
    return new Promise((ok, ko) => {
        const req = client.get(url, res => {
            switch (res.statusCode) {
                case 200: {
                    const data = new Array();
                    res.on('data', chunk => data.push(chunk));
                    res.once('end', () => ok(Buffer.concat(data).toString('utf-8')));
                    res.once('error', ko);
                    break;
                }
                case 301:
                case 302: {
                    if (res.headers.location) {
                        ok(download(res.headers.location));
                    }
                    break;
                }
                default: {
                    ko(new Error(`${res.statusMessage}: ${url}`));
                }
            }
        });
        req.once('error', ko);
        req.end();
    });
}
exports.download = download;
async function findManifests(directory) {
    // Ensure path is valid
    try {
        await fs_1.promises.access(directory);
    }
    catch {
        return [];
    }
    // Read Path contents
    const entries = await fs_1.promises.readdir(directory, { withFileTypes: true });
    // Get files within the current directory
    const files = entries
        .filter(file => (!file.isDirectory() && file.name.endsWith('.yaml')))
        .map(file => (directory + '/' + file.name));
    // Get sub-folders within the current folder
    const folders = entries.filter(folder => folder.isDirectory());
    for (const folder of folders) {
        files.push(...await findManifests(`${directory}/${folder.name}`));
    }
    return files;
}
exports.findManifests = findManifests;
function findConstructMetadata(directory) {
    // this file is optionally created during synthesis
    const p = path.join(directory, 'construct-metadata.json');
    return fs.existsSync(p) ? p : undefined;
}
exports.findConstructMetadata = findConstructMetadata;
function parseImports(spec) {
    const splitImport = spec.split(exports.PREFIX_DELIM);
    // k8s@x.y.z
    // crd.yaml
    // url.com/crd.yaml
    if (splitImport.length === 1) {
        return {
            source: spec,
        };
    }
    // crd:=crd.yaml
    // crd:=url.com/crd.yaml
    if (splitImport.length === 2) {
        return {
            moduleNamePrefix: splitImport[0],
            source: splitImport[1],
        };
    }
    throw new Error('Unable to parse import specification. Syntax is [NAME:=]SPEC');
}
exports.parseImports = parseImports;
function hashAndEncode(input, algorithm = 'sha256', encoding = 'hex') {
    const hash = (0, crypto_1.createHash)(algorithm);
    hash.update(input);
    return hash.digest(encoding);
}
exports.hashAndEncode = hashAndEncode;
function deriveFileName(url) {
    const devUrl = (0, crds_dev_1.matchCrdsDevUrl)(url);
    let filename = undefined;
    if (devUrl) {
        const lastIndexOfSlash = devUrl.lastIndexOf('/');
        const lastIndexOfAt = devUrl.lastIndexOf('@');
        filename = (lastIndexOfSlash > 0 && lastIndexOfAt > 0) ? devUrl.slice(lastIndexOfSlash + 1, lastIndexOfAt) : undefined;
    }
    else {
        const lastIndexOfSlash = url.lastIndexOf('/');
        const lastIndexOfYaml = url.lastIndexOf('.yaml') > 0 ? url.lastIndexOf('.yaml') : url.lastIndexOf('.yml');
        filename = (lastIndexOfSlash > 0 && lastIndexOfYaml > 0) ? url.slice(lastIndexOfSlash + 1, lastIndexOfYaml) : undefined;
    }
    if (!filename) {
        // If the url if for a local file, then just encode the filename and not the entire path
        // Since path can depend on platform
        let file = (0, fs_1.existsSync)(url) ? path.basename(url) : url;
        filename = hashAndEncode(file);
    }
    return filename;
}
exports.deriveFileName = deriveFileName;
function isK8sImport(value) {
    if (value !== 'k8s' && !value.startsWith('k8s@')) {
        return false;
    }
    return true;
}
exports.isK8sImport = isK8sImport;
function isHelmImport(value) {
    if (!value.startsWith('helm:') && !value.includes(':=helm:')) {
        return false;
    }
    return true;
}
exports.isHelmImport = isHelmImport;
function crdsArePresent(imprts) {
    return (imprts ?? []).some(imprt => (!isK8sImport(imprt) && !isHelmImport(imprt)));
}
exports.crdsArePresent = crdsArePresent;
//# sourceMappingURL=data:application/json;base64,