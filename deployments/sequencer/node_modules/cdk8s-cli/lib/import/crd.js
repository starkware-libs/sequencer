"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.safeParseCrds = exports.ImportCustomResourceDefinition = exports.CustomResourceDefinition = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const ajv_1 = __importDefault(require("ajv"));
const codemaker_1 = require("codemaker");
const json2jsii_1 = require("json2jsii");
const base_1 = require("./base");
const codegen_1 = require("./codegen");
const reviver_1 = require("../reviver");
const util_1 = require("../util");
const CRD_KIND = 'CustomResourceDefinition';
// all these APIs are compatible from our perspective.
const SUPPORTED_API_VERSIONS = [
    'apiextensions.k8s.io/v1beta1',
    'apiextensions.k8s.io/v1',
];
class CustomResourceDefinition {
    constructor(manifest) {
        this.versions = [];
        const apiVersion = manifest?.apiVersion ?? 'undefined';
        assert(SUPPORTED_API_VERSIONS.includes(apiVersion), `"apiVersion" is "${apiVersion}" but it should be one of: ${SUPPORTED_API_VERSIONS.map(x => `"${x}"`).join(', ')}`);
        assert(manifest.kind === CRD_KIND, `"kind" must be "${CRD_KIND}"`);
        const spec = manifest.spec;
        if (!spec) {
            throw new Error('manifest does not have a "spec" attribute');
        }
        this.group = spec.group;
        this.kind = spec.names.kind;
        if (spec.version) {
            this.addVersions([{ name: spec.version, schema: spec.validation?.openAPIV3Schema }]);
        }
        else {
            this.addVersions((spec.versions ?? []).map(v => ({ name: v.name, schema: v.schema?.openAPIV3Schema ?? spec.validation?.openAPIV3Schema })));
        }
        if (this.versions.length === 0) {
            throw new Error('unable to determine CRD versions');
        }
    }
    merge(crd) {
        this.addVersions(crd.versions);
    }
    addVersions(versions) {
        for (const v of versions) {
            const existingVersions = this.versions.map(ver => ver.name);
            if (existingVersions.includes(v.name)) {
                throw new Error(`Found multiple occurrences of version ${v.name} for ${this.key}`);
            }
            this.versions.push({ name: v.name, schema: v.schema });
        }
    }
    get key() {
        return `${this.group}/${this.kind.toLocaleLowerCase()}`;
    }
    async generateTypeScript(code, options) {
        for (let i = 0; i < this.versions.length; i++) {
            const version = this.versions[i];
            // to preseve backwards compatiblity, only append a suffix for
            // the second version onwards.
            const suffix = i === 0 ? '' : (0, codemaker_1.toPascalCase)(version.name);
            const types = new json2jsii_1.TypeGenerator({});
            (0, codegen_1.generateConstruct)(types, {
                group: this.group,
                version: version.name,
                kind: this.kind,
                fqn: `${this.kind}${suffix}`,
                schema: version.schema,
                custom: true,
                prefix: options.classNamePrefix,
                suffix,
            });
            code.line(types.render());
        }
    }
}
exports.CustomResourceDefinition = CustomResourceDefinition;
class ImportCustomResourceDefinition extends base_1.ImportBase {
    static async fromSpec(importSpec) {
        const { source } = importSpec;
        const manifest = await (0, util_1.download)(source);
        return new ImportCustomResourceDefinition(manifest);
    }
    constructor(rawManifest) {
        super();
        this.groups = {};
        this.rawManifest = rawManifest;
        const manifest = safeParseCrds(rawManifest);
        const crds = {};
        const groups = {};
        for (const spec of manifest) {
            const crd = new CustomResourceDefinition(spec);
            const key = crd.key;
            if (key in crds) {
                // might contain different versions - lets try to merge them in
                crds[key].merge(crd);
            }
            else {
                crds[key] = crd;
            }
        }
        //sort to ensure consistent ordering for snapshot compare
        const sortedCrds = Object.values(crds).sort((a, b) => a.key.localeCompare(b.key));
        for (const crd of sortedCrds) {
            const g = crd.group;
            if (!(g in groups)) {
                groups[g] = new Array();
            }
            groups[g].push(crd);
        }
        this.groups = groups;
    }
    get moduleNames() {
        return Object.keys(this.groups);
    }
    async generateTypeScript(code, moduleName, options) {
        const crds = this.groups[moduleName];
        (0, codegen_1.emitHeader)(code, true);
        for (const crd of crds) {
            console.log(`  ${crd.key}`);
            await crd.generateTypeScript(code, options);
        }
    }
}
exports.ImportCustomResourceDefinition = ImportCustomResourceDefinition;
function assert(condition, message) {
    if (!condition) {
        throw new Error(`invalid CustomResourceDefinition manifest: ${message}`);
    }
}
function safeParseCrds(manifest) {
    const schemaPath = path.join(__dirname, '..', 'schemas', 'crd.schema.json');
    const schema = JSON.parse(fs.readFileSync(schemaPath, { encoding: 'utf8' }));
    const reviver = new reviver_1.SafeReviver({
        sanitizers: [reviver_1.SafeReviver.DESCRIPTION_SANITIZER, reviver_1.SafeReviver.LEGAL_CHAR_SANITIZER],
    });
    // first parse and strip
    const objects = (0, util_1.safeParseYaml)(manifest, reviver);
    // since the manifest can contain non crds as well, we first
    // collect all crds and only apply a schema validation on them.
    const crds = [];
    function collectCRDs(objs) {
        for (const obj of objs.filter(o => o)) {
            if (obj.kind === CRD_KIND) {
                crds.push(obj);
            }
            if (obj.kind === 'List') {
                collectCRDs(obj.items);
            }
        }
    }
    collectCRDs(objects);
    const ajv = new ajv_1.default();
    const validate = ajv.compile(schema);
    const errors = [];
    for (const crd of crds) {
        validate(crd);
        if (validate.errors) {
            errors.push(...validate.errors);
        }
        ;
    }
    if (errors.length > 0) {
        throw new Error(`Schema validation errors detected\n ${errors.map(e => `* ${e.message}`).join('\n')}`);
    }
    return crds;
}
exports.safeParseCrds = safeParseCrds;
//# sourceMappingURL=data:application/json;base64,