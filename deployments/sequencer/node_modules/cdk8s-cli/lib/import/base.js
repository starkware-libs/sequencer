"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportBase = exports.Language = void 0;
const path = __importStar(require("path"));
const codemaker_1 = require("codemaker");
const fs = __importStar(require("fs-extra"));
const srcmak = __importStar(require("jsii-srcmak"));
const util_1 = require("../util");
var Language;
(function (Language) {
    Language["TYPESCRIPT"] = "typescript";
    Language["PYTHON"] = "python";
    Language["CSHARP"] = "csharp";
    Language["JAVA"] = "java";
    Language["GO"] = "go";
})(Language = exports.Language || (exports.Language = {}));
class ImportBase {
    async import(options) {
        const code = new codemaker_1.CodeMaker();
        const outdir = path.resolve(options.outdir);
        await fs.mkdirp(outdir);
        const isTypescript = options.targetLanguage === Language.TYPESCRIPT;
        const { moduleNamePrefix } = options;
        if (this.moduleNames.length === 0) {
            console.error('warning: no definitions to import');
        }
        const mapFunc = (origName) => {
            let name = origName;
            switch (options.targetLanguage) {
                case Language.PYTHON:
                case Language.JAVA:
                    name = name.split('.').reverse().join('.');
                    break;
            }
            return {
                origName: origName,
                name: name,
            };
        };
        // sort to ensure python writes parent packages first, so children are not deleted
        const modules = this.moduleNames.map(mapFunc).sort((a, b) => a.name.localeCompare(b.name));
        for (const module of modules) {
            // output the name of the imported resource
            console.log(module.origName);
            const fileName = moduleNamePrefix ? `${moduleNamePrefix}-${module.name}.ts` : `${module.name}.ts`;
            code.openFile(fileName);
            code.indentation = 2;
            await this.generateTypeScript(code, module.origName, {
                classNamePrefix: options.classNamePrefix,
            });
            code.closeFile(fileName);
            if (isTypescript) {
                await code.save(outdir);
            }
            if (!isTypescript || options.outputJsii) {
                await (0, util_1.mkdtemp)(async (staging) => {
                    // this is not typescript, so we generate in a staging directory and
                    // use jsii-srcmak to compile and extract the language-specific source
                    // into our project.
                    await code.save(staging);
                    // these are the module dependencies we compile against
                    const deps = ['@types/node', 'constructs', 'cdk8s'];
                    const opts = {
                        entrypoint: fileName,
                        moduleKey: moduleNamePrefix ? `${moduleNamePrefix}_${module.name}` : module.name,
                        deps: deps.map(dep => path.dirname(require.resolve(`${dep}/package.json`))),
                    };
                    // used for testing.
                    if (options.outputJsii) {
                        opts.jsii = { path: options.outputJsii };
                    }
                    // python!
                    if (options.targetLanguage === Language.PYTHON) {
                        const moduleName = `${moduleNamePrefix ? `${moduleNamePrefix}.${module.name}` : module.name}`.replace(/-/g, '_');
                        opts.python = {
                            outdir: outdir,
                            moduleName,
                        };
                    }
                    // java!
                    if (options.targetLanguage === Language.JAVA) {
                        const javaName = module.name.replace(/\//g, '.').replace(/-/g, '_');
                        opts.java = {
                            outdir: '.',
                            package: `imports.${moduleNamePrefix ? moduleNamePrefix + '.' + javaName : javaName}`,
                        };
                    }
                    // go!
                    if (options.targetLanguage === Language.GO) {
                        const { userModuleName, userModulePath } = this.getGoModuleName(outdir);
                        const relativeDir = path.relative(userModulePath, outdir);
                        // go package names may only consist of letters or digits.
                        // underscores are allowed too, but they are less idiomatic
                        // this converts e.g. "cert-manager.path.to.url" to "certmanagerpathtourl"
                        const importModuleName = module.name.replace(/[^A-Za-z0-9]/g, '').toLocaleLowerCase();
                        opts.golang = {
                            outdir: outdir,
                            moduleName: `${userModuleName}/${relativeDir}`,
                            packageName: moduleNamePrefix ? moduleNamePrefix + '_' + importModuleName : importModuleName,
                        };
                    }
                    // csharp!
                    if (options.targetLanguage === Language.CSHARP) {
                        const csharpName = module.name.replace(/\//g, '.').replace(/-/g, '_').replace(/(?:^|_)([a-z])/g, (_, char) => char.toUpperCase());
                        opts.csharp = {
                            outdir: outdir,
                            namespace: `Imports.${moduleNamePrefix ? moduleNamePrefix + '.' + csharpName : csharpName}`,
                        };
                    }
                    await srcmak.srcmak(staging, opts);
                });
            }
        }
    }
    /**
     * Traverses up directories until it finds a directory with a go.mod file,
     * and parses the module name from the file.
     */
    getGoModuleName(origOutdir) {
        let outdir = path.resolve(origOutdir);
        while (outdir !== path.dirname(outdir)) {
            const file = path.join(outdir, 'go.mod');
            if (fs.existsSync(file)) {
                const contents = fs.readFileSync(file, 'utf8');
                const matches = /module (.*)/.exec(contents);
                if (!matches) {
                    throw new Error('Invalid go.mod file - could not find module path.');
                }
                return {
                    userModuleName: matches[1],
                    userModulePath: outdir,
                };
            }
            outdir = path.dirname(outdir);
        }
        throw new Error(`Cannot find go.mod file within ${origOutdir} or any of its parent directories.`);
    }
}
exports.ImportBase = ImportBase;
//# sourceMappingURL=data:application/json;base64,