"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportHelm = void 0;
const child_process_1 = require("child_process");
const fs = __importStar(require("fs"));
const os = __importStar(require("os"));
const path = __importStar(require("path"));
const cdk8s_1 = require("cdk8s");
const json2jsii_1 = require("json2jsii");
const semver = __importStar(require("semver"));
const base_1 = require("./base");
const codegen_1 = require("./codegen");
const MAX_HELM_BUFFER = 10 * 1024 * 1024;
const CHART_SCHEMA = 'values.schema.json';
const CHART_YAML = 'Chart.yaml';
class ImportHelm extends base_1.ImportBase {
    static async fromSpec(importSpec) {
        const { source } = importSpec;
        return new ImportHelm(source);
    }
    constructor(source) {
        super();
        this.chartDependencies = [];
        const [chartUrl, chartName, chartVersion] = extractHelmChartDetails(source);
        this.chartName = chartName;
        this.chartUrl = chartUrl;
        this.chartVersion = chartVersion;
        const tmpDir = pullHelmRepo(chartUrl, chartName, chartVersion);
        const chartYamlFilePath = path.join(tmpDir, this.chartName, CHART_YAML);
        const contents = cdk8s_1.Yaml.load(chartYamlFilePath);
        if (contents.length === 1 && contents[0].dependencies) {
            for (const dependency of contents[0].dependencies) {
                this.chartDependencies.push(dependency.name);
            }
        }
        const potentialSchemaPath = path.join(tmpDir, this.chartName, CHART_SCHEMA);
        this.chartSchemaPath = fs.existsSync(potentialSchemaPath) ? potentialSchemaPath : undefined;
        this.schema = this.chartSchemaPath ? JSON.parse(fs.readFileSync(this.chartSchemaPath, 'utf-8')) : undefined;
        cleanup(tmpDir);
    }
    get moduleNames() {
        return [this.chartName];
    }
    async generateTypeScript(code) {
        (0, codegen_1.emitHelmHeader)(code);
        const types = new json2jsii_1.TypeGenerator({
            definitions: this.schema?.definitions,
            toJson: false,
            sanitizeEnums: true,
        });
        (0, codegen_1.generateHelmConstruct)(types, {
            schema: this.schema,
            chartName: this.chartName,
            chartUrl: this.chartUrl,
            chartVersion: this.chartVersion,
            chartDependencies: this.chartDependencies,
            fqn: this.chartName,
        });
        code.line(types.render());
    }
}
exports.ImportHelm = ImportHelm;
/**
 * Gets information about the helm chart from the helm url
 * @param url
 * @returns chartUrl, chartName and chartVersion
 */
function extractHelmChartDetails(url) {
    let chartUrl;
    let chartName;
    let chartVersion;
    if (url.startsWith('helm:oci://')) {
        // URL: helm:oci://registry-1.docker.io/bitnamicharts/wordpress@17.1.17
        const helmRegex = /^helm:(oci:\/\/[A-Za-z0-9_.-:\-]+)\@([0-9]+)\.([0-9]+)\.([A-Za-z0-9-+]+)$/;
        const helmDetails = helmRegex.exec(url);
        if (!helmDetails) {
            throw Error(`Invalid helm URL: ${url}. Must match the format: 'helm:<oci-registry-url>@<chart-version>'.`);
        }
        chartUrl = helmDetails[1];
        const lastIndexOfSlash = chartUrl.lastIndexOf('/');
        chartName = chartUrl.substring(lastIndexOfSlash + 1);
        const major = helmDetails[2];
        const minor = helmDetails[3];
        const patch = helmDetails[4];
        chartVersion = `${major}.${minor}.${patch}`;
    }
    else {
        // URL: helm:https://lacework.github.io/helm-charts/lacework-agent@6.9.0
        const helmRegex = /^helm:([A-Za-z0-9_.-:\-]+)\/([A-Za-z0-9_.-:\-]+)\@([0-9]+)\.([0-9]+)\.([A-Za-z0-9-+]+)$/;
        const helmDetails = helmRegex.exec(url);
        if (!helmDetails) {
            throw Error(`Invalid helm URL: ${url}. Must match the format: 'helm:<repo-url>/<chart-name>@<chart-version>'.`);
        }
        chartUrl = helmDetails[1];
        chartName = helmDetails[2];
        const major = helmDetails[3];
        const minor = helmDetails[4];
        const patch = helmDetails[5];
        chartVersion = `${major}.${minor}.${patch}`;
    }
    if (!semver.valid(chartVersion)) {
        throw new Error(`Invalid chart version (${chartVersion}) in URL: ${url}. Must follow SemVer-2 (see https://semver.org/).`);
    }
    return [chartUrl, chartName, chartVersion];
}
/**
 * Pulls the helm chart in a temporary directory
 * @param chartUrl Chart url
 * @param chartName Chart name
 * @param chartVersion Chart version
 * @returns Temporary directory path
 */
function pullHelmRepo(chartUrl, chartName, chartVersion) {
    const workdir = fs.mkdtempSync(path.join(os.tmpdir(), 'cdk8s-helm-'));
    const args = new Array();
    args.push('pull');
    if (!chartUrl.startsWith('oci://')) {
        args.push(chartName);
        args.push('--repo', chartUrl);
    }
    else {
        args.push(chartUrl);
    }
    args.push('--version', chartVersion);
    args.push('--untar');
    args.push('--untardir', workdir);
    const command = 'helm';
    const helm = (0, child_process_1.spawnSync)(command, args, {
        maxBuffer: MAX_HELM_BUFFER,
    });
    if (helm.error) {
        const err = helm.error.message;
        if (err.includes('ENOENT')) {
            throw new Error(`Unable to execute '${command}' to pull the Helm chart. Is helm installed on your system?`);
        }
        throw new Error(`Failed pulling helm chart from URL (${chartUrl}): ${err}`);
    }
    if (helm.status !== 0) {
        throw new Error(helm.stderr.toString());
    }
    return workdir;
}
/**
 * Cleanup temp directory created
 * @param tmpDir Temporary directory path
 */
function cleanup(tmpDir) {
    fs.rmSync(tmpDir, { recursive: true });
}
//# sourceMappingURL=data:application/json;base64,