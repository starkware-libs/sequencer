{"version":3,"file":"structure-renderer.js","sourceRoot":"","sources":["../../src/markdown/structure-renderer.ts"],"names":[],"mappings":"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","sourcesContent":["import * as cm from 'commonmark';\n\nimport { CommonMarkRenderer, prefixLines, RendererContext } from './markdown';\n\n/**\n * A renderer that will render a CommonMark tree to show its structure\n */\nexport class StructureRenderer implements CommonMarkRenderer {\n  public block_quote(node: cm.Node, context: RendererContext) {\n    return this.handle('block_quote', node, context);\n  }\n  public code(node: cm.Node, context: RendererContext) {\n    return this.handle('code', node, context);\n  }\n  public code_block(node: cm.Node, context: RendererContext) {\n    return this.handle('code_block', node, context);\n  }\n  public text(node: cm.Node, context: RendererContext) {\n    return this.handle('text', node, context);\n  }\n  public softbreak(node: cm.Node, context: RendererContext) {\n    return this.handle('softbreak', node, context);\n  }\n  public linebreak(node: cm.Node, context: RendererContext) {\n    return this.handle('linebreak', node, context);\n  }\n  public emph(node: cm.Node, context: RendererContext) {\n    return this.handle('emph', node, context);\n  }\n  public strong(node: cm.Node, context: RendererContext) {\n    return this.handle('strong', node, context);\n  }\n  public html_inline(node: cm.Node, context: RendererContext) {\n    return this.handle('html_inline', node, context);\n  }\n  public html_block(node: cm.Node, context: RendererContext) {\n    return this.handle('html_block', node, context);\n  }\n  public link(node: cm.Node, context: RendererContext) {\n    return this.handle('link', node, context);\n  }\n  public image(node: cm.Node, context: RendererContext) {\n    return this.handle('image', node, context);\n  }\n  public document(node: cm.Node, context: RendererContext) {\n    return this.handle('document', node, context);\n  }\n  public paragraph(node: cm.Node, context: RendererContext) {\n    return this.handle('paragraph', node, context);\n  }\n  public list(node: cm.Node, context: RendererContext) {\n    return this.handle('list', node, context);\n  }\n  public item(node: cm.Node, context: RendererContext) {\n    return this.handle('item', node, context);\n  }\n  public heading(node: cm.Node, context: RendererContext) {\n    return this.handle('heading', node, context);\n  }\n  public thematic_break(node: cm.Node, context: RendererContext) {\n    return this.handle('thematic_break', node, context);\n  }\n  public custom_block(node: cm.Node, context: RendererContext) {\n    return this.handle('custom_block', node, context);\n  }\n  public custom_inline(node: cm.Node, context: RendererContext) {\n    return this.handle('custom_inline', node, context);\n  }\n\n  private handle(name: string, node: cm.Node, context: RendererContext) {\n    const contents = context.content();\n\n    const enterText = [name, inspectNode(node)].filter((x) => x).join(' ');\n\n    if (contents) {\n      return `(${enterText}\\n${prefixLines('  ', contents)})\\n`;\n    }\n    return `(${enterText})\\n`;\n  }\n}\n\nfunction inspectNode(n: cm.Node): string {\n  const INTERESTING_KEYS = [\n    'literal',\n    'destination',\n    'title',\n    'info',\n    'level',\n    'listType',\n    'listTight',\n    'listStart',\n    'listDelimiter',\n  ];\n  const ret: any = {};\n  // tslint:disable-next-line:forin\n  for (const key of INTERESTING_KEYS) {\n    const value = (n as any)[key];\n    if (typeof value === 'string' || typeof value === 'number') {\n      ret[key] = value;\n    }\n  }\n  return JSON.stringify(ret);\n}\n"]}