{"version":3,"file":"xml-comment-renderer.js","sourceRoot":"","sources":["../../src/markdown/xml-comment-renderer.ts"],"names":[],"mappings":"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","sourcesContent":["import { DOMParser, MIME_TYPE, XMLSerializer } from '@xmldom/xmldom';\nimport * as cm from 'commonmark';\n\nimport { makeXmlEscaper } from './escapes';\nimport { prefixLines, RendererContext } from './markdown';\nimport { MarkdownRenderer, para, stripPara } from './markdown-renderer';\n\nconst ESCAPE = makeXmlEscaper();\n\n/**\n * A renderer that will render a CommonMark tree to .NET XML comments\n *\n * Mostly concerns itself with code annotations and escaping; tags that the\n * XML formatter doesn't have equivalents for will be rendered back to MarkDown.\n */\nexport class CSharpXmlCommentRenderer extends MarkdownRenderer {\n  public override block_quote(_node: cm.Node, context: RendererContext) {\n    return para(prefixLines('    ', stripPara(context.content())));\n  }\n\n  public override code(node: cm.Node, _context: RendererContext) {\n    return `<c>${ESCAPE.text(node.literal)}</c>`;\n  }\n\n  public override code_block(node: cm.Node, _context: RendererContext) {\n    return para(`<code><![CDATA[\\n${node.literal}]]></code>`);\n  }\n\n  public override text(node: cm.Node, _context: RendererContext) {\n    return ESCAPE.text(node.literal) ?? '';\n  }\n\n  public override link(node: cm.Node, context: RendererContext) {\n    return `<a href=\"${ESCAPE.attribute(node.destination) ?? ''}\">${context.content()}</a>`;\n  }\n\n  public override image(node: cm.Node, context: RendererContext) {\n    return `<img alt=\"${ESCAPE.text2attr(context.content())}\" src=\"${ESCAPE.attribute(node.destination) ?? ''}\" />`;\n  }\n\n  public override emph(_node: cm.Node, context: RendererContext) {\n    return `<em>${context.content()}</em>`;\n  }\n\n  public override strong(_node: cm.Node, context: RendererContext) {\n    return `<strong>${context.content()}</strong>`;\n  }\n\n  public override heading(node: cm.Node, context: RendererContext) {\n    return para(`<h${node.level}>${context.content()}</h${node.level}>`);\n  }\n\n  public override list(node: cm.Node, context: RendererContext) {\n    const listType = node.listType === 'bullet' ? 'bullet' : 'number';\n\n    return para(`<list type=\"${listType}\">\\n${context.content()}</list>`);\n  }\n\n  public override item(_node: cm.Node, context: RendererContext) {\n    return `<description>${stripPara(context.content())}</description>\\n`;\n  }\n\n  public override thematic_break(_node: cm.Node, _context: RendererContext) {\n    return para('<hr />');\n  }\n\n  /**\n   * HTML needs to be converted to XML\n   *\n   * If we don't do this, the parser will reject the whole XML block once it sees an unclosed\n   * <img> tag.\n   */\n  public override html_inline(node: cm.Node, _context: RendererContext) {\n    const html = node.literal ?? '';\n    try {\n      // An html string fails to parse unless it is wrapped into a document root element\n      // We fake this, by wrapping the inline html into an artificial root element,\n      // and for rendering only selecting its children.\n      const dom = new DOMParser().parseFromString(`<jsii-root>${html}</jsii-root>`, MIME_TYPE.HTML);\n      const fragment = dom.createDocumentFragment();\n      for (const child of Array.from(dom.firstChild?.childNodes ?? [])) {\n        fragment.appendChild(child);\n      }\n      return new XMLSerializer().serializeToString(fragment);\n    } catch {\n      // Could not parse - we'll escape unsafe XML entities here...\n      return html.replace(/[<>&]/g, (char: string) => {\n        switch (char) {\n          case '&':\n            return '&amp;';\n          case '<':\n            return '&lt;';\n          case '>':\n            return '&gt;';\n          default:\n            return char;\n        }\n      });\n    }\n  }\n\n  /**\n   * HTML needs to be converted to XML\n   *\n   * If we don't do this, the parser will reject the whole XML block once it sees an unclosed\n   * <img> tag.\n   */\n  public override html_block(node: cm.Node, context: RendererContext) {\n    return this.html_inline(node, context);\n  }\n}\n"]}