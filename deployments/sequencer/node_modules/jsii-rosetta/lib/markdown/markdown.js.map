{"version":3,"file":"markdown.js","sourceRoot":"","sources":["../../src/markdown/markdown.ts"],"names":[],"mappings":";;AAEA,8CAOC;AA+BD,oDAoBC;AAED,kDAKC;AAED,kCAKC;AAED,wCAIC;AAhFD,iCAAiC;AAEjC,SAAgB,iBAAiB,CAAC,MAAc,EAAE,QAA4B,EAAE,SAA6B;IAC3G,MAAM,MAAM,GAAG,IAAI,EAAE,CAAC,MAAM,EAAE,CAAC;IAC/B,MAAM,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACjC,IAAI,SAAS,EAAE,CAAC;QACd,mBAAmB,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;IACtC,CAAC;IACD,OAAO,oBAAoB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;AAC7C,CAAC;AA+BD,SAAgB,oBAAoB,CAAC,IAAa,EAAE,QAA4B;IAC9E,MAAM,OAAO,GAAoB;QAC/B,OAAO,CAAC,CAAU;YAChB,OAAO,oBAAoB,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;QAC3C,CAAC;QAED,OAAO;YACL,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAClC,CAAC;QAED,QAAQ;YACN,MAAM,KAAK,GAAG,EAAE,CAAC;YACjB,KAAK,MAAM,KAAK,IAAI,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC;gBACzC,KAAK,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;YACpD,CAAC;YACD,OAAO,KAAK,CAAC;QACf,CAAC;KACF,CAAC;IAEF,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AAC5C,CAAC;AAED,SAAgB,mBAAmB,CAAC,IAAa,EAAE,OAA0B;IAC3E,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;IACzB,KAAK,MAAM,KAAK,IAAI,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC;QACzC,mBAAmB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACtC,CAAC;AACH,CAAC;AAED,SAAgB,WAAW,CAAC,MAAc,EAAE,CAAS;IACnD,OAAO,CAAC;SACL,KAAK,CAAC,IAAI,CAAC;SACX,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC;SACtB,IAAI,CAAC,IAAI,CAAC,CAAC;AAChB,CAAC;AAED,QAAe,CAAC,CAAC,cAAc,CAAC,IAAa;IAC3C,KAAK,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,EAAE,KAAK,KAAK,IAAI,EAAE,KAAK,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;QACrE,MAAM,KAAK,CAAC;IACd,CAAC;AACH,CAAC","sourcesContent":["import * as cm from 'commonmark';\n\nexport function transformMarkdown(source: string, renderer: CommonMarkRenderer, transform?: CommonMarkVisitor) {\n  const parser = new cm.Parser();\n  const doc = parser.parse(source);\n  if (transform) {\n    visitCommonMarkTree(doc, transform);\n  }\n  return renderCommonMarkTree(doc, renderer);\n}\n\nexport interface RendererContext {\n  recurse(node: cm.Node): string;\n  children(): string[];\n  content(): string;\n}\n\nexport interface CommonMarkRenderer {\n  block_quote(node: cm.Node, context: RendererContext): string;\n  code(node: cm.Node, context: RendererContext): string;\n  code_block(node: cm.Node, context: RendererContext): string;\n  text(node: cm.Node, context: RendererContext): string;\n  softbreak(node: cm.Node, context: RendererContext): string;\n  linebreak(node: cm.Node, context: RendererContext): string;\n  emph(node: cm.Node, context: RendererContext): string;\n  strong(node: cm.Node, context: RendererContext): string;\n  html_inline(node: cm.Node, context: RendererContext): string;\n  html_block(node: cm.Node, context: RendererContext): string;\n  link(node: cm.Node, context: RendererContext): string;\n  image(node: cm.Node, context: RendererContext): string;\n  document(node: cm.Node, context: RendererContext): string;\n  paragraph(node: cm.Node, context: RendererContext): string;\n  list(node: cm.Node, context: RendererContext): string;\n  item(node: cm.Node, context: RendererContext): string;\n  heading(node: cm.Node, context: RendererContext): string;\n  thematic_break(node: cm.Node, context: RendererContext): string;\n  custom_block(node: cm.Node, context: RendererContext): string;\n  custom_inline(node: cm.Node, context: RendererContext): string;\n}\n\nexport function renderCommonMarkTree(node: cm.Node, renderer: CommonMarkRenderer) {\n  const context: RendererContext = {\n    recurse(n: cm.Node): string {\n      return renderCommonMarkTree(n, renderer);\n    },\n\n    content() {\n      return this.children().join('');\n    },\n\n    children() {\n      const parts = [];\n      for (const child of cmNodeChildren(node)) {\n        parts.push(renderCommonMarkTree(child, renderer));\n      }\n      return parts;\n    },\n  };\n\n  return renderer[node.type](node, context);\n}\n\nexport function visitCommonMarkTree(node: cm.Node, visitor: CommonMarkVisitor) {\n  visitor[node.type](node);\n  for (const child of cmNodeChildren(node)) {\n    visitCommonMarkTree(child, visitor);\n  }\n}\n\nexport function prefixLines(prefix: string, x: string) {\n  return x\n    .split('\\n')\n    .map((l) => prefix + l)\n    .join('\\n');\n}\n\nexport function* cmNodeChildren(node: cm.Node): IterableIterator<cm.Node> {\n  for (let child = node.firstChild; child !== null; child = child.next) {\n    yield child;\n  }\n}\n\nexport interface CommonMarkVisitor {\n  block_quote(node: cm.Node): void;\n  code(node: cm.Node): void;\n  code_block(node: cm.Node): void;\n  text(node: cm.Node): void;\n  softbreak(node: cm.Node): void;\n  linebreak(node: cm.Node): void;\n  emph(node: cm.Node): void;\n  strong(node: cm.Node): void;\n  html_inline(node: cm.Node): void;\n  html_block(node: cm.Node): void;\n  link(node: cm.Node): void;\n  image(node: cm.Node): void;\n  document(node: cm.Node): void;\n  paragraph(node: cm.Node): void;\n  list(node: cm.Node): void;\n  item(node: cm.Node): void;\n  heading(node: cm.Node): void;\n  thematic_break(node: cm.Node): void;\n  custom_block(node: cm.Node): void;\n  custom_inline(node: cm.Node): void;\n}\n"]}