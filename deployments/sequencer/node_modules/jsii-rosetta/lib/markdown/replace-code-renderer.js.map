{"version":3,"file":"replace-code-renderer.js","sourceRoot":"","sources":["../../src/markdown/replace-code-renderer.ts"],"names":[],"mappings":";;;AAOA;;GAEG;AACH,MAAa,oBAAoB;IAC/B,YAAoC,QAAsB;QAAtB,aAAQ,GAAR,QAAQ,CAAc;IAAG,CAAC;IAEvD,UAAU,CAAC,IAAa;QAC7B,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAClC,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CACvB;YACE,QAAQ,EAAE,IAAI,CAAC,IAAI,IAAI,EAAE;YACzB,MAAM,EAAE,IAAI,CAAC,OAAO,IAAI,EAAE;SAC3B,EACD,IAAI,CACL,CAAC;QACF,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,QAAQ,CAAC;QACzB,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACrF,CAAC;IAEM,WAAW;QAChB,aAAa;IACf,CAAC;IACM,IAAI;QACT,aAAa;IACf,CAAC;IACM,IAAI;QACT,aAAa;IACf,CAAC;IACM,SAAS;QACd,aAAa;IACf,CAAC;IACM,SAAS;QACd,aAAa;IACf,CAAC;IACM,IAAI;QACT,aAAa;IACf,CAAC;IACM,MAAM;QACX,aAAa;IACf,CAAC;IACM,WAAW;QAChB,aAAa;IACf,CAAC;IACM,UAAU;QACf,aAAa;IACf,CAAC;IACM,IAAI;QACT,aAAa;IACf,CAAC;IACM,KAAK;QACV,aAAa;IACf,CAAC;IACM,QAAQ;QACb,aAAa;IACf,CAAC;IACM,SAAS;QACd,aAAa;IACf,CAAC;IACM,IAAI;QACT,aAAa;IACf,CAAC;IACM,IAAI;QACT,aAAa;IACf,CAAC;IACM,OAAO;QACZ,aAAa;IACf,CAAC;IACM,cAAc;QACnB,aAAa;IACf,CAAC;IACM,YAAY;QACjB,aAAa;IACf,CAAC;IACM,aAAa;QAClB,aAAa;IACf,CAAC;CACF;AAzED,oDAyEC","sourcesContent":["import * as cm from 'commonmark';\n\nimport { CommonMarkVisitor } from './markdown';\nimport { CodeBlock } from './types';\n\nexport type CodeReplacer = (code: CodeBlock, line: number) => CodeBlock;\n\n/**\n * Renderer that replaces code blocks in a MarkDown document\n */\nexport class ReplaceCodeTransform implements CommonMarkVisitor {\n  public constructor(private readonly replacer: CodeReplacer) {}\n\n  public code_block(node: cm.Node) {\n    const line = node.sourcepos[0][0];\n    const ret = this.replacer(\n      {\n        language: node.info ?? '',\n        source: node.literal ?? '',\n      },\n      line,\n    );\n    node.info = ret.language;\n    node.literal = ret.source + (!ret.source || ret.source.endsWith('\\n') ? '' : '\\n');\n  }\n\n  public block_quote(): void {\n    /* nothing */\n  }\n  public code(): void {\n    /* nothing */\n  }\n  public text(): void {\n    /* nothing */\n  }\n  public softbreak(): void {\n    /* nothing */\n  }\n  public linebreak(): void {\n    /* nothing */\n  }\n  public emph(): void {\n    /* nothing */\n  }\n  public strong(): void {\n    /* nothing */\n  }\n  public html_inline(): void {\n    /* nothing */\n  }\n  public html_block(): void {\n    /* nothing */\n  }\n  public link(): void {\n    /* nothing */\n  }\n  public image(): void {\n    /* nothing */\n  }\n  public document(): void {\n    /* nothing */\n  }\n  public paragraph(): void {\n    /* nothing */\n  }\n  public list(): void {\n    /* nothing */\n  }\n  public item(): void {\n    /* nothing */\n  }\n  public heading(): void {\n    /* nothing */\n  }\n  public thematic_break(): void {\n    /* nothing */\n  }\n  public custom_block(): void {\n    /* nothing */\n  }\n  public custom_inline(): void {\n    /* nothing */\n  }\n}\n"]}