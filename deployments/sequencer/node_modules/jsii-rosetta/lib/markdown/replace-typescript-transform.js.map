{"version":3,"file":"replace-typescript-transform.js","sourceRoot":"","sources":["../../src/markdown/replace-typescript-transform.ts"],"names":[],"mappings":";;;AAAA,mEAA+D;AAE/D,wCAA4G;AAI5G;;GAEG;AACH,MAAa,0BAA2B,SAAQ,4CAAoB;IAClE,YAAmB,GAAgB,EAAE,MAAe,EAAE,QAA4B;QAChF,KAAK,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;YACpB,MAAM,aAAa,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YACtE,IAAI,aAAa,CAAC,CAAC,CAAC,KAAK,YAAY,IAAI,aAAa,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC;gBACnE,OAAO,KAAK,CAAC;YACf,CAAC;YAED,MAAM,SAAS,GAAG,IAAA,qCAA2B,EAC3C,KAAK,CAAC,MAAM,EACZ,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,EAAE,EAC3C,MAAM,EACN,IAAA,2BAAiB,EAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAC1C,CAAC;YAEF,OAAO,QAAQ,CAAC,SAAS,CAAC,IAAI,KAAK,CAAC;QACtC,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAlBD,gEAkBC","sourcesContent":["import { ReplaceCodeTransform } from './replace-code-renderer';\nimport { CodeBlock } from './types';\nimport { TypeScriptSnippet, typeScriptSnippetFromSource, parseKeyValueList, ApiLocation } from '../snippet';\n\nexport type TypeScriptReplacer = (code: TypeScriptSnippet) => CodeBlock | undefined;\n\n/**\n * A specialization of ReplaceCodeTransform that maintains state about TypeScript snippets\n */\nexport class ReplaceTypeScriptTransform extends ReplaceCodeTransform {\n  public constructor(api: ApiLocation, strict: boolean, replacer: TypeScriptReplacer) {\n    super((block, line) => {\n      const languageParts = block.language ? block.language.split(' ') : [];\n      if (languageParts[0] !== 'typescript' && languageParts[0] !== 'ts') {\n        return block;\n      }\n\n      const tsSnippet = typeScriptSnippetFromSource(\n        block.source,\n        { api, field: { field: 'markdown', line } },\n        strict,\n        parseKeyValueList(languageParts.slice(1)),\n      );\n\n      return replacer(tsSnippet) ?? block;\n    });\n  }\n}\n"]}