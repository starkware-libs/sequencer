{"version":3,"file":"markdown-renderer.js","sourceRoot":"","sources":["../../src/markdown/markdown-renderer.ts"],"names":[],"mappings":"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","sourcesContent":["import * as cm from 'commonmark';\n\nimport { cmNodeChildren, CommonMarkRenderer, prefixLines, RendererContext } from './markdown';\n\n/**\n * A renderer that will render a CommonMark tree back to MarkDown\n */\nexport class MarkdownRenderer implements CommonMarkRenderer {\n  public block_quote(_node: cm.Node, context: RendererContext) {\n    return para(prefixLines('> ', collapsePara(context.content())));\n  }\n\n  public code(node: cm.Node, _context: RendererContext) {\n    return `\\`${node.literal}\\``;\n  }\n\n  public code_block(node: cm.Node, _context: RendererContext) {\n    return para(`\\`\\`\\`${node.info ?? ''}\\n${node.literal}\\`\\`\\``);\n  }\n\n  public text(node: cm.Node, _context: RendererContext) {\n    return node.literal ?? '';\n  }\n\n  public softbreak(_node: cm.Node, _context: RendererContext) {\n    return '\\n';\n  }\n\n  public linebreak(_node: cm.Node, _context: RendererContext) {\n    return '\\\\\\n';\n  }\n\n  public emph(_node: cm.Node, context: RendererContext) {\n    return `*${context.content()}*`;\n  }\n\n  public strong(_node: cm.Node, context: RendererContext) {\n    return `**${context.content()}**`;\n  }\n\n  public html_inline(node: cm.Node, _context: RendererContext) {\n    return node.literal ?? '';\n  }\n\n  public html_block(node: cm.Node, _context: RendererContext) {\n    return node.literal ?? '';\n  }\n\n  public link(node: cm.Node, context: RendererContext) {\n    return `[${context.content()}](${node.destination ?? ''})`;\n  }\n\n  public image(node: cm.Node, context: RendererContext) {\n    return `![${context.content()}](${node.destination ?? ''})`;\n  }\n\n  public document(_node: cm.Node, context: RendererContext) {\n    return stripTrailingWhitespace(collapsePara(context.content()));\n  }\n\n  public paragraph(_node: cm.Node, context: RendererContext) {\n    return para(context.content());\n  }\n\n  public list(node: cm.Node, context: RendererContext) {\n    // A list is not wrapped in a paragraph, but items may contain paragraphs.\n    // All elements of a list are definitely 'item's.\n    const items = [];\n\n    let i = 1;\n    for (const item of cmNodeChildren(node)) {\n      const firstLinePrefix = determineItemPrefix(node, i);\n      const hangingPrefix = ' '.repeat(firstLinePrefix.length);\n\n      const rendered = context.recurse(item);\n      // Prefix the first line with a different text than subsequent lines\n      const prefixed = firstLinePrefix + prefixLines(hangingPrefix, rendered).slice(hangingPrefix.length);\n\n      items.push(prefixed);\n\n      i += 1;\n    }\n\n    return para(items.join('\\n'));\n  }\n\n  public item(_node: cm.Node, context: RendererContext) {\n    return collapsePara(context.content());\n  }\n\n  public heading(node: cm.Node, context: RendererContext) {\n    return para(`${'#'.repeat(node.level)} ${context.content()}`);\n  }\n\n  public thematic_break(_node: cm.Node, _context: RendererContext) {\n    return '---\\n';\n  }\n\n  public custom_block(_node: cm.Node, context: RendererContext) {\n    return `<custom>${context.content()}</custom>`;\n  }\n\n  public custom_inline(_node: cm.Node, context: RendererContext) {\n    return `<custom>${context.content()}</custom>`;\n  }\n}\n\nconst PARA_BREAK = '\\u001d';\n\nexport function para(x: string) {\n  return `${PARA_BREAK}${x}${PARA_BREAK}`;\n}\n\n/**\n * Collapse paragraph markers\n */\nexport function collapsePara(x: string, brk = '\\n\\n') {\n  /* eslint-disable no-control-regex */\n  return x\n    .replace(/^\\u001d+/, '')\n    .replace(/\\u001d+$/, '')\n    .replace(/\\u001d+/g, brk);\n  /* eslint-enable no-control-regex */\n}\n\n/**\n * Strip paragraph markers from start and end\n */\nexport function stripPara(x: string) {\n  /* eslint-disable-next-line no-control-regex */\n  return x.replace(/^\\u001d+/, '').replace(/\\u001d+$/, '');\n}\n\nfunction determineItemPrefix(listNode: cm.Node, index: number) {\n  if (listNode.listType === 'bullet') {\n    return '* ';\n  }\n  return `${index}${listNode.listDelimiter} `;\n}\n\nexport function stripTrailingWhitespace(x: string) {\n  return x.replace(/[ \\t]+$/gm, '');\n}\n"]}