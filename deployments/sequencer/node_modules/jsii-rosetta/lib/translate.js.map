{"version":3,"file":"translate.js","sourceRoot":"","sources":["../src/translate.ts"],"names":[],"mappings":"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","sourcesContent":["import { inspect } from 'node:util';\nimport * as ts from 'typescript';\n\nimport { TARGET_LANGUAGES, TargetLanguage } from './languages';\nimport { RecordReferencesVisitor } from './languages/record-references';\nimport { supportsTransitiveSubmoduleAccess } from './languages/target-language';\nimport * as logging from './logging';\nimport { renderTree } from './o-tree';\nimport { AstRenderer, AstHandler, AstRendererOptions } from './renderer';\nimport { TypeScriptSnippet, completeSource, SnippetParameters, formatLocation } from './snippet';\nimport { SubmoduleReference, SubmoduleReferenceMap } from './submodule-reference';\nimport { snippetKey } from './tablets/key';\nimport { ORIGINAL_SNIPPET_KEY } from './tablets/schema';\nimport { TranslatedSnippet } from './tablets/tablets';\nimport { SyntaxKindCounter } from './typescript/syntax-kind-counter';\nimport { TypeScriptCompiler, CompilationResult } from './typescript/ts-compiler';\nimport { Spans } from './typescript/visible-spans';\nimport { annotateStrictDiagnostic, File, hasStrictBranding, mkDict } from './util';\n\nexport function translateTypeScript(\n  source: File,\n  visitor: AstHandler<any>,\n  options: SnippetTranslatorOptions = {},\n): TranslateResult {\n  const translator = new SnippetTranslator(\n    { visibleSource: source.contents, location: { api: { api: 'file', fileName: source.fileName } } },\n    options,\n  );\n  const translated = translator.renderUsing(visitor);\n\n  return {\n    translation: translated,\n    diagnostics: translator.diagnostics.map(rosettaDiagFromTypescript),\n  };\n}\n\n/**\n * Translate one or more TypeScript snippets into other languages\n *\n * Can be configured to fully typecheck the samples, or perform only syntactical\n * translation.\n */\nexport class Translator {\n  private readonly compiler = new TypeScriptCompiler();\n  // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility\n  #diagnostics: ts.Diagnostic[] = [];\n\n  public constructor(private readonly includeCompilerDiagnostics: boolean) {}\n\n  public translate(snip: TypeScriptSnippet, languages: readonly TargetLanguage[] = Object.values(TargetLanguage)) {\n    logging.debug(`Translating ${snippetKey(snip)} ${inspect(snip.parameters ?? {})}`);\n    const translator = this.translatorFor(snip);\n\n    const translations = mkDict(\n      languages.flatMap((lang, idx, array) => {\n        if (array.slice(0, idx).includes(lang)) {\n          // This language was duplicated in the request... we'll skip that here...\n          return [];\n        }\n        const languageConverterFactory = TARGET_LANGUAGES[lang];\n        const translated = translator.renderUsing(languageConverterFactory.createVisitor());\n        return [[lang, { source: translated, version: languageConverterFactory.version }] as const];\n      }),\n    );\n\n    if (snip.parameters?.infused === undefined) {\n      this.#diagnostics.push(...translator.diagnostics);\n    }\n\n    return TranslatedSnippet.fromSchema({\n      translations: {\n        ...translations,\n        [ORIGINAL_SNIPPET_KEY]: { source: snip.visibleSource, version: '0' },\n      },\n      location: snip.location,\n      didCompile: translator.didSuccessfullyCompile,\n      fqnsReferenced: translator.fqnsReferenced(),\n      fullSource: completeSource(snip),\n      syntaxKindCounter: translator.syntaxKindCounter(),\n    });\n  }\n\n  public get diagnostics(): readonly RosettaDiagnostic[] {\n    return ts.sortAndDeduplicateDiagnostics(this.#diagnostics).map(rosettaDiagFromTypescript);\n  }\n\n  /**\n   * Return the snippet translator for the given snippet\n   *\n   * We used to cache these, but each translator holds on to quite a bit of memory,\n   * so we don't do that anymore.\n   */\n  public translatorFor(snippet: TypeScriptSnippet) {\n    const translator = new SnippetTranslator(snippet, {\n      compiler: this.compiler,\n      includeCompilerDiagnostics: this.includeCompilerDiagnostics,\n    });\n    return translator;\n  }\n}\n\nexport interface SnippetTranslatorOptions extends AstRendererOptions {\n  /**\n   * Re-use the given compiler if given\n   */\n  readonly compiler?: TypeScriptCompiler;\n\n  /**\n   * Include compiler errors in return diagnostics\n   *\n   * If false, only translation diagnostics will be returned.\n   *\n   * @default false\n   */\n  readonly includeCompilerDiagnostics?: boolean;\n}\n\nexport interface TranslateResult {\n  translation: string;\n  diagnostics: readonly RosettaDiagnostic[];\n}\n\n/**\n * A translation of a TypeScript diagnostic into a data-only representation for Rosetta\n *\n * We cannot use the original `ts.Diagnostic` since it holds on to way too much\n * state (the source file and by extension the entire parse tree), which grows\n * too big to be properly serialized by a worker and also takes too much memory.\n *\n * Reduce it down to only the information we need.\n */\nexport interface RosettaDiagnostic {\n  /**\n   * If this is an error diagnostic or not\n   */\n  readonly isError: boolean;\n\n  /**\n   * If the diagnostic was emitted from an assembly that has its 'strict' flag set\n   */\n  readonly isFromStrictAssembly: boolean;\n\n  /**\n   * The formatted message, ready to be printed (will have colors and newlines in it)\n   *\n   * Ends in a newline.\n   */\n  readonly formattedMessage: string;\n}\n\nexport function makeRosettaDiagnostic(isError: boolean, formattedMessage: string): RosettaDiagnostic {\n  return { isError, formattedMessage, isFromStrictAssembly: false };\n}\n\n/**\n * Translate a single TypeScript snippet\n */\nexport class SnippetTranslator {\n  public readonly translateDiagnostics: ts.Diagnostic[] = [];\n  public readonly compileDiagnostics: ts.Diagnostic[] = [];\n  private readonly visibleSpans: Spans;\n  private readonly compilation!: CompilationResult;\n  private readonly tryCompile: boolean;\n  private readonly submoduleReferences: SubmoduleReferenceMap;\n\n  public constructor(snippet: TypeScriptSnippet, private readonly options: SnippetTranslatorOptions = {}) {\n    const compiler = options.compiler ?? new TypeScriptCompiler();\n    const source = completeSource(snippet);\n    const fakeCurrentDirectory = snippet.parameters?.[SnippetParameters.$COMPILATION_DIRECTORY] ?? process.cwd();\n    this.compilation = compiler.compileInMemory(\n      removeSlashes(formatLocation(snippet.location)),\n      source,\n      fakeCurrentDirectory,\n    );\n\n    // Respect '/// !hide' and '/// !show' directives\n    this.visibleSpans = Spans.visibleSpansFromSource(source);\n\n    // Find submodule references on explicit imports\n    this.submoduleReferences = SubmoduleReference.inSourceFile(\n      this.compilation.rootFile,\n      this.compilation.program.getTypeChecker(),\n    );\n\n    // This makes it about 5x slower, so only do it on demand\n    // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n    this.tryCompile = (options.includeCompilerDiagnostics || snippet.strict) ?? false;\n    if (this.tryCompile) {\n      const program = this.compilation.program;\n      const diagnostics = [\n        ...neverThrowing(program.getGlobalDiagnostics)(),\n        ...neverThrowing(program.getSyntacticDiagnostics)(this.compilation.rootFile),\n        ...neverThrowing(program.getDeclarationDiagnostics)(this.compilation.rootFile),\n        ...neverThrowing(program.getSemanticDiagnostics)(this.compilation.rootFile),\n      ];\n      if (snippet.strict) {\n        // In a strict assembly, so we'll need to brand all diagnostics here...\n        for (const diag of diagnostics) {\n          annotateStrictDiagnostic(diag);\n        }\n      }\n      this.compileDiagnostics.push(...diagnostics);\n    }\n\n    /**\n     * Intercepts all exceptions thrown by the wrapped call, and logs them to\n     * console.error instead of re-throwing, then returns an empty array. This\n     * is here to avoid compiler crashes due to broken code examples that cause\n     * the TypeScript compiler to hit a \"Debug Failure\".\n     */\n    function neverThrowing<A extends unknown[], R>(call: (...args: A) => readonly R[]): (...args: A) => readonly R[] {\n      return (...args: A) => {\n        try {\n          return call(...args);\n        } catch (err: any) {\n          const isExpectedTypescriptError = err.message.includes('Debug Failure');\n\n          if (!isExpectedTypescriptError) {\n            console.error(`Failed to execute ${call.name}: ${err}`);\n          }\n\n          return [];\n        }\n      };\n    }\n  }\n\n  /**\n   * Returns a boolean if compilation was attempted, and undefined if it was not.\n   */\n  public get didSuccessfullyCompile() {\n    return this.tryCompile ? this.compileDiagnostics.length === 0 : undefined;\n  }\n\n  public renderUsing(visitor: AstHandler<any>) {\n    const converter = new AstRenderer(\n      this.compilation.rootFile,\n      this.compilation.program.getTypeChecker(),\n      visitor,\n      this.options,\n      // If we support transitive submodule access, don't provide a submodule reference map.\n      supportsTransitiveSubmoduleAccess(visitor.language) ? undefined : this.submoduleReferences,\n    );\n    const converted = converter.convert(this.compilation.rootFile);\n    this.translateDiagnostics.push(...filterVisibleDiagnostics(converter.diagnostics, this.visibleSpans));\n    return renderTree(converted, { indentChar: visitor.indentChar, visibleSpans: this.visibleSpans });\n  }\n\n  public syntaxKindCounter(): Partial<Record<ts.SyntaxKind, number>> {\n    const kindCounter = new SyntaxKindCounter(this.visibleSpans);\n    return kindCounter.countKinds(this.compilation.rootFile);\n  }\n\n  public fqnsReferenced() {\n    const visitor = new RecordReferencesVisitor(this.visibleSpans);\n    const converter = new AstRenderer(\n      this.compilation.rootFile,\n      this.compilation.program.getTypeChecker(),\n      visitor,\n      this.options,\n      this.submoduleReferences,\n    );\n    converter.convert(this.compilation.rootFile);\n    return visitor.fqnsReferenced();\n  }\n\n  public get diagnostics(): readonly ts.Diagnostic[] {\n    return ts.sortAndDeduplicateDiagnostics(this.compileDiagnostics.concat(this.translateDiagnostics));\n  }\n}\n\n/**\n * Hide diagnostics that are rosetta-sourced if they are reported against a non-visible span\n */\nfunction filterVisibleDiagnostics(diags: readonly ts.Diagnostic[], visibleSpans: Spans): ts.Diagnostic[] {\n  return diags.filter((d) => d.source !== 'rosetta' || d.start === undefined || visibleSpans.containsPosition(d.start));\n}\n\n/**\n * Turn TypeScript diagnostics into Rosetta diagnostics\n */\nexport function rosettaDiagFromTypescript(diag: ts.Diagnostic): RosettaDiagnostic {\n  return {\n    isError: diag.category === ts.DiagnosticCategory.Error,\n    isFromStrictAssembly: hasStrictBranding(diag),\n    formattedMessage: ts.formatDiagnosticsWithColorAndContext([diag], DIAG_HOST),\n  };\n}\n\nconst DIAG_HOST = {\n  getCurrentDirectory() {\n    return '.';\n  },\n  getCanonicalFileName(fileName: string) {\n    return fileName;\n  },\n  getNewLine() {\n    return '\\n';\n  },\n};\n\n/**\n * Remove slashes from a \"where\" description, as the TS compiler will interpret it as a directory\n * and we can't have that for compiling literate files\n */\nfunction removeSlashes(x: string) {\n  return x.replace(/\\/|\\\\/g, '.');\n}\n"]}