{"version":3,"file":"snippet-dependencies.js","sourceRoot":"","sources":["../src/snippet-dependencies.ts"],"names":[],"mappings":"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","sourcesContent":["import * as cp from 'node:child_process';\nimport { promises as fsPromises } from 'node:fs';\nimport * as fs from 'node:fs';\nimport * as os from 'node:os';\nimport * as path from 'node:path';\nimport { PackageJson } from '@jsii/spec';\nimport * as fastGlob from 'fast-glob';\nimport * as semver from 'semver';\n\nimport { findDependencyDirectory, findUp, isBuiltinModule } from './find-utils';\nimport * as logging from './logging';\nimport { TypeScriptSnippet, CompilationDependency } from './snippet';\nimport { mkDict, formatList, pathExists } from './util';\n// eslint-disable-next-line @typescript-eslint/no-require-imports\nconst { intersect } = require('semver-intersect');\n\n/**\n * Collect the dependencies of a bunch of snippets together in one declaration\n *\n * We assume here the dependencies will not conflict.\n */\nexport function collectDependencies(snippets: TypeScriptSnippet[]) {\n  const ret: Record<string, CompilationDependency> = {};\n  for (const snippet of snippets) {\n    for (const [name, source] of Object.entries(snippet.compilationDependencies ?? {})) {\n      ret[name] = resolveConflict(name, source, ret[name]);\n    }\n  }\n  return ret;\n}\n\n/**\n * Add transitive dependencies of concrete dependencies to the array\n *\n * This is necessary to prevent multiple copies of transitive dependencies on disk, which\n * jsii-based packages might not deal with very well.\n */\nexport async function expandWithTransitiveDependencies(deps: Record<string, CompilationDependency>) {\n  const pathsSeen = new Set<string>();\n  const queue = Object.values(deps).filter(isConcrete);\n\n  let next = queue.shift();\n  while (next) {\n    await addDependenciesOf(next.resolvedDirectory);\n    next = queue.shift();\n  }\n\n  async function addDependenciesOf(dir: string) {\n    if (pathsSeen.has(dir)) {\n      return;\n    }\n    pathsSeen.add(dir);\n    try {\n      const pj: PackageJson = JSON.parse(\n        await fsPromises.readFile(path.join(dir, 'package.json'), { encoding: 'utf-8' }),\n      );\n      for (const [name, dep] of Object.entries(await resolveDependenciesFromPackageJson(pj, dir))) {\n        if (!deps[name]) {\n          deps[name] = dep;\n          queue.push(dep);\n        }\n      }\n    } catch (e: any) {\n      if (e.code === 'ENOENT') {\n        return;\n      }\n      throw e;\n    }\n  }\n}\n\n/**\n * Find the corresponding package directories for all dependencies in a package.json\n */\nexport async function resolveDependenciesFromPackageJson(packageJson: PackageJson | undefined, directory: string) {\n  return mkDict(\n    await Promise.all(\n      Object.keys({ ...packageJson?.dependencies, ...packageJson?.peerDependencies })\n        .filter((name) => !isBuiltinModule(name))\n        .filter(\n          (name) =>\n            !packageJson?.bundledDependencies?.includes(name) && !packageJson?.bundleDependencies?.includes(name),\n        )\n        .map(\n          async (name) =>\n            [\n              name,\n              {\n                type: 'concrete',\n                resolvedDirectory: await fsPromises.realpath(await findDependencyDirectory(name, directory)),\n              },\n            ] as const,\n        ),\n    ),\n  );\n}\n\nfunction resolveConflict(\n  name: string,\n  a: CompilationDependency,\n  b: CompilationDependency | undefined,\n): CompilationDependency {\n  if (!b) {\n    return a;\n  }\n\n  if (a.type === 'concrete' && b.type === 'concrete') {\n    if (b.resolvedDirectory !== a.resolvedDirectory) {\n      throw new Error(`Dependency conflict: ${name} can be either ${a.resolvedDirectory} or ${b.resolvedDirectory}`);\n    }\n    return a;\n  }\n\n  if (a.type === 'symbolic' && b.type === 'symbolic') {\n    // Intersect the ranges\n    return {\n      type: 'symbolic',\n      versionRange: myVersionIntersect(a.versionRange, b.versionRange),\n    };\n  }\n\n  if (a.type === 'concrete' && b.type === 'symbolic') {\n    const concreteVersion: string = JSON.parse(\n      fs.readFileSync(path.join(a.resolvedDirectory, 'package.json'), 'utf-8'),\n    ).version;\n\n    if (!semver.satisfies(concreteVersion, b.versionRange, { includePrerelease: true })) {\n      throw new Error(\n        `Dependency conflict: ${name} expected to match ${b.versionRange} but found ${concreteVersion} at ${a.resolvedDirectory}`,\n      );\n    }\n\n    return a;\n  }\n\n  if (a.type === 'symbolic' && b.type === 'concrete') {\n    // Reverse roles so we fall into the previous case\n    return resolveConflict(name, b, a);\n  }\n\n  throw new Error('Cases should have been exhaustive');\n}\n\n/**\n * Check that the directory we were given has all the necessary dependencies in it\n *\n * It's a warning if this is not true, not an error.\n */\nexport async function validateAvailableDependencies(directory: string, deps: Record<string, CompilationDependency>) {\n  logging.info(`Validating dependencies at ${directory}`);\n  const failures = await Promise.all(\n    Object.entries(deps).flatMap(async ([name, _dep]) => {\n      try {\n        await findDependencyDirectory(name, directory);\n        return [];\n      } catch {\n        return [name];\n      }\n    }),\n  );\n\n  if (failures.length > 0) {\n    logging.warn(\n      `${directory}: packages necessary to compile examples missing from supplied directory: ${failures.join(', ')}`,\n    );\n  }\n}\n\n/**\n * Intersect two semver ranges\n *\n * The package we are using for this doesn't support all syntaxes yet.\n * Do some work on top.\n */\nfunction myVersionIntersect(a: string, b: string): string {\n  if (a === '*') {\n    return b;\n  }\n  if (b === '*') {\n    return a;\n  }\n\n  try {\n    return intersect(a, b);\n  } catch (e: any) {\n    throw new Error(`semver-intersect does not support either '${a}' or '${b}': ${e.message}`);\n  }\n}\n\n/**\n * Prepare a temporary directory with symlinks to all the dependencies we need.\n *\n * - Symlinks the concrete dependencies\n * - Tries to first find the symbolic dependencies in a potential monorepo that might be present\n *   (try both `lerna` and `yarn` monorepos).\n * - Installs the remaining symbolic dependencies using 'npm'.\n */\nexport async function prepareDependencyDirectory(deps: Record<string, CompilationDependency>): Promise<string> {\n  const concreteDirs = Object.values(deps)\n    .filter(isConcrete)\n    .map((x) => x.resolvedDirectory);\n  const monorepoPackages = await scanMonoRepos(concreteDirs);\n\n  const tmpDir = await fsPromises.mkdtemp(path.join(os.tmpdir(), 'rosetta'));\n  logging.info(`Preparing dependency closure at ${tmpDir} (-vv for more details)`);\n\n  // Resolved symbolic packages against monorepo\n  const resolvedDeps = mkDict(\n    Object.entries(deps).map(([name, dep]) => [\n      name,\n      dep.type === 'concrete'\n        ? dep\n        : ((monorepoPackages[name]\n            ? { type: 'concrete', resolvedDirectory: monorepoPackages[name] }\n            : dep) as CompilationDependency),\n    ]),\n  );\n\n  const dependencies: Record<string, string> = {};\n  for (const [name, dep] of Object.entries(resolvedDeps)) {\n    if (isConcrete(dep)) {\n      logging.debug(`${name} -> ${dep.resolvedDirectory}`);\n      dependencies[name] = `file:${dep.resolvedDirectory}`;\n    } else {\n      logging.debug(`${name} @ ${dep.versionRange}`);\n      dependencies[name] = dep.versionRange;\n    }\n  }\n\n  await fsPromises.writeFile(\n    path.join(tmpDir, 'package.json'),\n    JSON.stringify(\n      {\n        name: 'examples',\n        version: '0.0.1',\n        private: true,\n        dependencies,\n      },\n      undefined,\n      2,\n    ),\n    {\n      encoding: 'utf-8',\n    },\n  );\n\n  // Run NPM install on this package.json.\n  cp.execSync(\n    [\n      'npm install',\n      // We need to include --force for packages\n      // that have a symbolic version in the symlinked dev tree (like \"0.0.0\"), but have\n      // actual version range dependencies from externally installed packages (like \"^2.0.0\").\n      '--force',\n      // this is critical from a security perspective to prevent\n      // code execution as part of the install command using npm hooks. (e.g postInstall)\n      '--ignore-scripts',\n      // save time by not running audit\n      '--no-audit',\n      // ensures npm does not insert anything in $PATH\n      '--no-bin-links',\n      // don't write or update a package-lock.json file\n      '--no-package-lock',\n      // only print errors\n      `--loglevel error`,\n    ].join(' '),\n    {\n      cwd: tmpDir,\n      encoding: 'utf-8',\n    },\n  );\n\n  return tmpDir;\n}\n\n/**\n * Map package name to directory\n */\nasync function scanMonoRepos(startingDirs: readonly string[]): Promise<Record<string, string>> {\n  const globs = new Set<string>();\n  for (const dir of startingDirs) {\n    // eslint-disable-next-line no-await-in-loop\n    setExtend(globs, await findMonoRepoGlobs(dir));\n  }\n\n  if (globs.size === 0) {\n    return {};\n  }\n\n  logging.debug(`Monorepo package sources: ${Array.from(globs).join(', ')}`);\n\n  const packageDirectories = await fastGlob(Array.from(globs).map(windowsToUnix), { onlyDirectories: true });\n  const results = mkDict(\n    (\n      await Promise.all(\n        packageDirectories.map(async (directory) => {\n          const pjLocation = path.join(directory, 'package.json');\n          return (await pathExists(pjLocation))\n            ? [[JSON.parse(await fsPromises.readFile(pjLocation, 'utf-8')).name as string, directory] as const]\n            : [];\n        }),\n      )\n    ).flat(),\n  );\n\n  logging.debug(`Found ${Object.keys(results).length} packages in monorepo: ${formatList(Object.keys(results))}`);\n  return results;\n}\n\nasync function findMonoRepoGlobs(startingDir: string): Promise<Set<string>> {\n  const ret = new Set<string>();\n\n  // Lerna monorepo\n  const lernaJsonDir = await findUp(startingDir, async (dir) => pathExists(path.join(dir, 'lerna.json')));\n  if (lernaJsonDir) {\n    const lernaJson = JSON.parse(await fsPromises.readFile(path.join(lernaJsonDir, 'lerna.json'), 'utf-8'));\n    for (const glob of lernaJson?.packages ?? []) {\n      ret.add(path.join(lernaJsonDir, glob));\n    }\n  }\n\n  // Yarn monorepo\n  const yarnWsDir = await findUp(\n    startingDir,\n    async (dir) =>\n      (await pathExists(path.join(dir, 'package.json'))) &&\n      JSON.parse(await fsPromises.readFile(path.join(dir, 'package.json'), 'utf-8'))?.workspaces !== undefined,\n  );\n  if (yarnWsDir) {\n    const yarnWs = JSON.parse(await fsPromises.readFile(path.join(yarnWsDir, 'package.json'), 'utf-8'));\n    for (const glob of yarnWs.workspaces?.packages ?? []) {\n      ret.add(path.join(yarnWsDir, glob));\n    }\n  }\n\n  return ret;\n}\n\nfunction isConcrete(x: CompilationDependency): x is Extract<CompilationDependency, { type: 'concrete' }> {\n  return x.type === 'concrete';\n}\n\nfunction setExtend<A>(xs: Set<A>, ys: Set<A>) {\n  for (const y of ys) {\n    xs.add(y);\n  }\n  return xs;\n}\n\n/**\n * Necessary for fastGlob\n */\nfunction windowsToUnix(x: string) {\n  return x.replace(/\\\\/g, '/');\n}\n"]}