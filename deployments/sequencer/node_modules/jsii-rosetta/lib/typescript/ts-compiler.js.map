{"version":3,"file":"ts-compiler.js","sourceRoot":"","sources":["../../src/typescript/ts-compiler.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\n\nexport class TypeScriptCompiler {\n  private readonly realHost = ts.createCompilerHost(STANDARD_COMPILER_OPTIONS, true);\n\n  /**\n   * A compiler-scoped cache to avoid having to re-parse the same library files for every compilation\n   */\n  private readonly fileCache = new Map<string, ts.SourceFile | undefined>();\n\n  public createInMemoryCompilerHost(\n    sourcePath: string,\n    sourceContents: string,\n    currentDirectory?: string,\n  ): ts.CompilerHost {\n    const realHost = this.realHost;\n    const sourceFile = ts.createSourceFile(sourcePath, sourceContents, ts.ScriptTarget.Latest);\n\n    return {\n      ...realHost,\n      fileExists: (filePath) =>\n        filePath === sourcePath || this.fileCache.has(filePath) || realHost.fileExists(filePath),\n      getCurrentDirectory: currentDirectory != null ? () => currentDirectory : realHost.getCurrentDirectory,\n      getSourceFile: (fileName, languageVersion, onError, shouldCreateNewSourceFile) => {\n        if (fileName === sourcePath) {\n          return sourceFile;\n        }\n\n        const existing = this.fileCache.get(fileName);\n        if (existing) {\n          return existing;\n        }\n\n        const parsed = realHost.getSourceFile(fileName, languageVersion, onError, shouldCreateNewSourceFile);\n        this.fileCache.set(fileName, parsed);\n        return parsed;\n      },\n      readFile: (filePath) => (filePath === sourcePath ? sourceContents : realHost.readFile(filePath)),\n      writeFile: () => void undefined,\n    };\n  }\n\n  public compileInMemory(filename: string, contents: string, currentDirectory?: string): CompilationResult {\n    if (!filename.endsWith('.ts')) {\n      // Necessary or the TypeScript compiler won't compile the file.\n      filename += '.ts';\n    }\n\n    const program = ts.createProgram({\n      rootNames: [filename],\n      options: STANDARD_COMPILER_OPTIONS,\n      host: this.createInMemoryCompilerHost(filename, contents, currentDirectory),\n    });\n\n    const rootFile = program.getSourceFile(filename);\n    if (rootFile == null) {\n      throw new Error(`Oopsie -- couldn't find root file back: ${filename}`);\n    }\n\n    return { program, rootFile };\n  }\n}\n\nexport interface CompilationResult {\n  program: ts.Program;\n  rootFile: ts.SourceFile;\n}\n\nexport const STANDARD_COMPILER_OPTIONS: ts.CompilerOptions = {\n  alwaysStrict: true,\n  charset: 'utf8',\n  declaration: true,\n  declarationMap: true,\n  experimentalDecorators: true,\n  inlineSourceMap: true,\n  inlineSources: true,\n  lib: ['lib.es2020.d.ts'],\n  module: ts.ModuleKind.CommonJS,\n  noEmitOnError: true,\n  noFallthroughCasesInSwitch: true,\n  noImplicitAny: true,\n  noImplicitReturns: true,\n  noImplicitThis: true,\n  noUnusedLocals: false, // Important, becomes super annoying without this\n  noUnusedParameters: false, // Important, becomes super annoying without this\n  resolveJsonModule: true,\n  strict: true,\n  strictNullChecks: true,\n  strictPropertyInitialization: true,\n  stripInternal: true,\n  target: ts.ScriptTarget.ES2020,\n  // Incremental builds\n  incremental: true,\n  tsBuildInfoFile: '.tsbuildinfo',\n};\n"]}