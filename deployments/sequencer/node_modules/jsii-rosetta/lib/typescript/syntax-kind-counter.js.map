{"version":3,"file":"syntax-kind-counter.js","sourceRoot":"","sources":["../../src/typescript/syntax-kind-counter.ts"],"names":[],"mappings":";;;AAAA,iCAAiC;AAIjC,MAAa,iBAAiB;IAG5B,YAAoC,YAAmB;QAAnB,iBAAY,GAAZ,YAAY,CAAO;QACrD,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;IACpB,CAAC;IAEM,UAAU,CAAC,UAAyB;QACzC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAC3B,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAEO,SAAS,CAAC,IAAa;QAC7B,IAAI,IAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,CAAC;YAChD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QAC/D,CAAC;QAED,2GAA2G;QAC3G,sDAAsD;QACtD,2EAA2E;QAC3E,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;IAClD,CAAC;CACF;AAtBD,8CAsBC","sourcesContent":["import * as ts from 'typescript';\n\nimport { Spans } from './visible-spans';\n\nexport class SyntaxKindCounter {\n  private readonly counter: Partial<Record<ts.SyntaxKind, number>>;\n\n  public constructor(private readonly visibleSpans: Spans) {\n    this.counter = {};\n  }\n\n  public countKinds(sourceFile: ts.SourceFile): Partial<Record<ts.SyntaxKind, number>> {\n    this.countNode(sourceFile);\n    return this.counter;\n  }\n\n  private countNode(node: ts.Node) {\n    if (this.visibleSpans.containsStartOfNode(node)) {\n      this.counter[node.kind] = (this.counter[node.kind] ?? 0) + 1;\n    }\n\n    // The two recursive options produce differing results. `ts.forEachChild()` ignores some unimportant kinds.\n    // `node.getChildren()` goes through all syntax kinds.\n    // see: https://basarat.gitbook.io/typescript/overview/ast/ast-tip-children\n    ts.forEachChild(node, (x) => this.countNode(x));\n  }\n}\n"]}