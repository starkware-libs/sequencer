{"version":3,"file":"visualize.js","sourceRoot":"","sources":["../../src/languages/visualize.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\n\nimport { TargetLanguage } from './target-language';\nimport { OTree } from '../o-tree';\nimport { AstRenderer, AstHandler, nimpl, CommentSyntax } from '../renderer';\nimport { ImportStatement } from '../typescript/imports';\n\nexport class VisualizeAstVisitor implements AstHandler<void> {\n  public readonly language = TargetLanguage.VISUALIZE;\n  public readonly defaultContext: void = undefined;\n\n  public constructor(private readonly includeHandlerNames?: boolean) {}\n\n  public mergeContext(_old: any, _update: any): any {\n    return undefined;\n  }\n\n  public commentRange(node: CommentSyntax, _context: AstRenderer<void>): OTree {\n    return new OTree(['(Comment', node.text], [], { suffix: ')' });\n  }\n\n  public jsDoc(_node: ts.JSDoc, _context: AstRenderer<void>): OTree {\n    // Already handled by other doc handlers\n    return new OTree([]);\n  }\n\n  public sourceFile(node: ts.SourceFile, context: AstRenderer<void>): OTree {\n    return new OTree(context.convertAll(node.statements));\n  }\n\n  public importStatement(node: ImportStatement, context: AstRenderer<void>): OTree {\n    return this.defaultNode('importStatement', node.node, context);\n  }\n\n  public functionDeclaration(node: ts.FunctionDeclaration, children: AstRenderer<void>): OTree {\n    return this.defaultNode('functionDeclaration', node, children);\n  }\n\n  public stringLiteral(node: ts.StringLiteral | ts.NoSubstitutionTemplateLiteral, children: AstRenderer<void>): OTree {\n    return this.defaultNode('stringLiteral', node, children);\n  }\n\n  public numericLiteral(node: ts.NumericLiteral, children: AstRenderer<void>): OTree {\n    return this.defaultNode('numericLiteral', node, children);\n  }\n\n  public identifier(node: ts.Identifier, children: AstRenderer<void>): OTree {\n    return this.defaultNode('identifier', node, children);\n  }\n\n  public block(node: ts.Block, children: AstRenderer<void>): OTree {\n    return this.defaultNode('block', node, children);\n  }\n\n  public parameterDeclaration(node: ts.ParameterDeclaration, children: AstRenderer<void>): OTree {\n    return this.defaultNode('parameterDeclaration', node, children);\n  }\n\n  public returnStatement(node: ts.ReturnStatement, children: AstRenderer<void>): OTree {\n    return this.defaultNode('returnStatement', node, children);\n  }\n\n  public binaryExpression(node: ts.BinaryExpression, children: AstRenderer<void>): OTree {\n    return this.defaultNode('binaryExpression', node, children);\n  }\n\n  public ifStatement(node: ts.IfStatement, context: AstRenderer<void>): OTree {\n    return this.defaultNode('ifStatement', node, context);\n  }\n\n  public propertyAccessExpression(node: ts.PropertyAccessExpression, context: AstRenderer<void>): OTree {\n    return this.defaultNode('propertyAccessExpression', node, context);\n  }\n\n  public callExpression(node: ts.CallExpression, context: AstRenderer<void>): OTree {\n    return this.defaultNode('callExpression', node, context);\n  }\n\n  public expressionStatement(node: ts.ExpressionStatement, context: AstRenderer<void>): OTree {\n    return this.defaultNode('expressionStatement', node, context);\n  }\n\n  public token<A extends ts.SyntaxKind>(node: ts.Token<A>, context: AstRenderer<void>): OTree {\n    return this.defaultNode('token', node, context);\n  }\n\n  public objectLiteralExpression(node: ts.ObjectLiteralExpression, context: AstRenderer<void>): OTree {\n    return this.defaultNode('objectLiteralExpression', node, context);\n  }\n\n  public newExpression(node: ts.NewExpression, context: AstRenderer<void>): OTree {\n    return this.defaultNode('newExpression', node, context);\n  }\n\n  public awaitExpression(node: ts.AwaitExpression, context: AstRenderer<void>): OTree {\n    return this.defaultNode('await', node, context);\n  }\n\n  public propertyAssignment(node: ts.PropertyAssignment, context: AstRenderer<void>): OTree {\n    return this.defaultNode('propertyAssignment', node, context);\n  }\n\n  public variableStatement(node: ts.VariableStatement, context: AstRenderer<void>): OTree {\n    return this.defaultNode('variableStatement', node, context);\n  }\n\n  public variableDeclarationList(node: ts.VariableDeclarationList, context: AstRenderer<void>): OTree {\n    return this.defaultNode('variableDeclarationList', node, context);\n  }\n\n  public variableDeclaration(node: ts.VariableDeclaration, context: AstRenderer<void>): OTree {\n    return this.defaultNode('variableDeclaration', node, context);\n  }\n\n  public arrayLiteralExpression(node: ts.ArrayLiteralExpression, context: AstRenderer<void>): OTree {\n    return this.defaultNode('arrayLiteralExpression', node, context);\n  }\n\n  public shorthandPropertyAssignment(node: ts.ShorthandPropertyAssignment, context: AstRenderer<void>): OTree {\n    return this.defaultNode('shorthandPropertyAssignment', node, context);\n  }\n\n  public forOfStatement(node: ts.ForOfStatement, context: AstRenderer<void>): OTree {\n    return this.defaultNode('forOfStatement', node, context);\n  }\n\n  public classDeclaration(node: ts.ClassDeclaration, context: AstRenderer<void>): OTree {\n    return this.defaultNode('classDeclaration', node, context);\n  }\n\n  public constructorDeclaration(node: ts.ConstructorDeclaration, context: AstRenderer<void>): OTree {\n    return this.defaultNode('constructorDeclaration', node, context);\n  }\n\n  public propertyDeclaration(node: ts.PropertyDeclaration, context: AstRenderer<void>): OTree {\n    return this.defaultNode('propertyDeclaration', node, context);\n  }\n\n  public computedPropertyName(node: ts.Expression, context: AstRenderer<void>): OTree {\n    return this.defaultNode('computedPropertyName', node, context);\n  }\n\n  public methodDeclaration(node: ts.MethodDeclaration, context: AstRenderer<void>): OTree {\n    return this.defaultNode('methodDeclaration', node, context);\n  }\n\n  public interfaceDeclaration(node: ts.InterfaceDeclaration, context: AstRenderer<void>): OTree {\n    return this.defaultNode('interfaceDeclaration', node, context);\n  }\n\n  public propertySignature(node: ts.PropertySignature, context: AstRenderer<void>): OTree {\n    return this.defaultNode('propertySignature', node, context);\n  }\n\n  public methodSignature(node: ts.MethodSignature, context: AstRenderer<void>): OTree {\n    return this.defaultNode('methodSignature', node, context);\n  }\n\n  public asExpression(node: ts.AsExpression, context: AstRenderer<void>): OTree {\n    return this.defaultNode('asExpression', node, context);\n  }\n\n  public prefixUnaryExpression(node: ts.PrefixUnaryExpression, context: AstRenderer<void>): OTree {\n    return this.defaultNode('prefixUnaryExpression', node, context);\n  }\n\n  public spreadElement(node: ts.SpreadElement, context: AstRenderer<void>): OTree {\n    return this.defaultNode('spreadElement', node, context);\n  }\n\n  public spreadAssignment(node: ts.SpreadAssignment, context: AstRenderer<void>): OTree {\n    return this.defaultNode('spreadAssignment', node, context);\n  }\n\n  public ellipsis(node: ts.SpreadAssignment | ts.SpreadElement, context: AstRenderer<void>): OTree {\n    return this.defaultNode('ellipsis', node, context);\n  }\n\n  public templateExpression(node: ts.TemplateExpression, context: AstRenderer<void>): OTree {\n    return this.defaultNode('templateExpression', node, context);\n  }\n\n  public elementAccessExpression(node: ts.ElementAccessExpression, context: AstRenderer<void>): OTree {\n    return this.defaultNode('elementAccessExpression', node, context);\n  }\n\n  public nonNullExpression(node: ts.NonNullExpression, context: AstRenderer<void>): OTree {\n    return this.defaultNode('nonNullExpression', node, context);\n  }\n\n  public parenthesizedExpression(node: ts.ParenthesizedExpression, context: AstRenderer<void>): OTree {\n    return this.defaultNode('parenthesizedExpression', node, context);\n  }\n\n  public maskingVoidExpression(node: ts.VoidExpression, context: AstRenderer<void>): OTree {\n    return this.defaultNode('maskingVoidExpression', node, context);\n  }\n\n  private defaultNode(handlerName: string, node: ts.Node, context: AstRenderer<void>): OTree {\n    return nimpl(node, context, {\n      additionalInfo: this.includeHandlerNames ? handlerName : '',\n    });\n  }\n}\n"]}