{"version":3,"file":"target-language.js","sourceRoot":"","sources":["../../src/languages/target-language.ts"],"names":[],"mappings":";;;AA2BA,gCAgBC;AAwBD,8EAYC;AA/ED,sCAAsC;AAEtC,IAAY,cAOX;AAPD,WAAY,cAAc;IACxB,mCAAiB,CAAA;IACjB,mCAAiB,CAAA;IACjB,+BAAa,CAAA;IACb,2BAAS,CAAA;IACT,kGAAkG;IAClG,sCAAoB,CAAA;AACtB,CAAC,EAPW,cAAc,8BAAd,cAAc,QAOzB;AAED,MAAM,sBAAsB,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;AAgBtE,SAAgB,UAAU,CAAC,QAAwB;IACjD,4FAA4F;IAC5F,sFAAsF;IACtF,MAAM,CAAC,sBAAsB,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,kDAAkD,QAAQ,EAAE,CAAC,CAAC;IAE3G,QAAQ,QAAQ,EAAE,CAAC;QACjB,KAAK,cAAc,CAAC,SAAS,CAAC;QAC9B,KAAK,cAAc,CAAC,MAAM;YACxB,OAAO,QAAQ,CAAC;QAClB,KAAK,cAAc,CAAC,MAAM;YACxB,OAAO,QAAQ,CAAC;QAClB,KAAK,cAAc,CAAC,IAAI;YACtB,OAAO,MAAM,CAAC;QAChB,KAAK,cAAc,CAAC,EAAE;YACpB,OAAO,IAAI,CAAC;IAChB,CAAC;AACH,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;GAqBG;AACH,SAAgB,iCAAiC,CAAC,QAAwB;IACxE,QAAQ,QAAQ,EAAE,CAAC;QACjB,KAAK,cAAc,CAAC,SAAS,CAAC;QAC9B,KAAK,cAAc,CAAC,MAAM;YACxB,OAAO,IAAI,CAAC;QACd,KAAK,cAAc,CAAC,MAAM;YACxB,OAAO,IAAI,CAAC;QACd,KAAK,cAAc,CAAC,IAAI;YACtB,OAAO,KAAK,CAAC;QACf,KAAK,cAAc,CAAC,EAAE;YACpB,OAAO,KAAK,CAAC;IACjB,CAAC;AACH,CAAC","sourcesContent":["import * as assert from 'node:assert';\n\nexport enum TargetLanguage {\n  PYTHON = 'python',\n  CSHARP = 'csharp',\n  JAVA = 'java',\n  GO = 'go',\n  /** @internal an alias of PYTHON to make intent clear when language is irrelevant, must be last */\n  VISUALIZE = 'python',\n}\n\nconst VALID_TARGET_LANGUAGES = new Set(Object.values(TargetLanguage));\n\nexport function targetName(language: TargetLanguage): 'python' | 'dotnet' | 'java' | 'go';\nexport function targetName(language: TargetLanguage.PYTHON): 'python';\nexport function targetName(language: TargetLanguage.CSHARP): 'dotnet';\nexport function targetName(language: TargetLanguage.JAVA): 'java';\nexport function targetName(language: TargetLanguage.GO): 'go';\n/** @internal an alias of PYTHON to make intent clear when language is irrelevant, must be last override */\nexport function targetName(language: TargetLanguage.VISUALIZE): 'python';\n\n/**\n * @param language a possible value for `TargetLanguage`.\n *\n * @returns the name of the target configuration block for the given language.\n */\nexport function targetName(language: TargetLanguage): 'python' | 'dotnet' | 'java' | 'go';\nexport function targetName(language: TargetLanguage): 'python' | 'dotnet' | 'java' | 'go' {\n  // The TypeScript compiler should guarantee the below `switch` statement covers all possible\n  // values of the TargetLanguage enum, but we add an assert here for clarity of intent.\n  assert(VALID_TARGET_LANGUAGES.has(language), `Invalid/unexpected target language identifier: ${language}`);\n\n  switch (language) {\n    case TargetLanguage.VISUALIZE:\n    case TargetLanguage.PYTHON:\n      return 'python';\n    case TargetLanguage.CSHARP:\n      return 'dotnet';\n    case TargetLanguage.JAVA:\n      return 'java';\n    case TargetLanguage.GO:\n      return 'go';\n  }\n}\n\n/**\n * Determines whether the supplied language supports transitive submodule\n * access (similar to how TypeScript/Javascript allows to use a partially\n * qualified name to access a namespace-nested value).\n *\n * If `true`, imports will mirror those found in the original TypeScript\n * code, namespace-traversing property accesses will be rendered as such. This\n * means the following snippet would be transformed \"as-is\":\n * ```ts\n * import * as cdk from 'aws-cdk-lib';\n * new cdk.aws_s3.Bucket(this, 'Bucket');\n * ```\n *\n * If `false` on the other hand, each used submodule will be imported\n * separately and namespace-traversing property accesses will be replaced with\n * references to the separately-imported submodule. This means the above\n * snippet would be transformed as if it had been modifired to:\n * ```ts\n * import * as aws_s3 from 'aws-cdk-lib/aws-s3';\n * new aws_s3.Bucket(this, 'Bucket');\n * ```\n */\nexport function supportsTransitiveSubmoduleAccess(language: TargetLanguage): boolean {\n  switch (language) {\n    case TargetLanguage.VISUALIZE:\n    case TargetLanguage.PYTHON:\n      return true;\n    case TargetLanguage.CSHARP:\n      return true;\n    case TargetLanguage.JAVA:\n      return false;\n    case TargetLanguage.GO:\n      return false;\n  }\n}\n"]}