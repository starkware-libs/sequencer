{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/languages/index.ts"],"names":[],"mappings":";;;AAkCA,wDAYC;AA9CD,qCAAyC;AACzC,6BAAiC;AACjC,iCAAqC;AACrC,qCAAyC;AACzC,uDAAmD;AAI1C,+FAJA,gCAAc,OAIA;AAHvB,2CAAkD;AAUrC,QAAA,gBAAgB,GAAgD;IAC3E,CAAC,gCAAc,CAAC,MAAM,CAAC,EAAE;QACvB,OAAO,EAAE,sBAAa,CAAC,OAAO;QAC9B,aAAa,EAAE,GAAG,EAAE,CAAC,IAAI,sBAAa,EAAE;KACzC;IACD,CAAC,gCAAc,CAAC,MAAM,CAAC,EAAE;QACvB,OAAO,EAAE,sBAAa,CAAC,OAAO;QAC9B,aAAa,EAAE,GAAG,EAAE,CAAC,IAAI,sBAAa,EAAE;KACzC;IACD,CAAC,gCAAc,CAAC,IAAI,CAAC,EAAE;QACrB,OAAO,EAAE,kBAAW,CAAC,OAAO;QAC5B,aAAa,EAAE,GAAG,EAAE,CAAC,IAAI,kBAAW,EAAE;KACvC;IACD,CAAC,gCAAc,CAAC,EAAE,CAAC,EAAE;QACnB,OAAO,EAAE,cAAS,CAAC,OAAO;QAC1B,aAAa,EAAE,GAAG,EAAE,CAAC,IAAI,cAAS,EAAE;KACrC;CACF,CAAC;AAEF,SAAgB,sBAAsB,CAAC,QAA4B;IACjE,IAAI,QAAQ,KAAK,SAAS,EAAE,CAAC;QAC3B,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,gCAAc,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC;QACzE,IAAI,MAAM,KAAK,SAAS,EAAE,CAAC;YACzB,MAAM,IAAI,KAAK,CACb,4BAA4B,QAAQ,qBAAqB,MAAM,CAAC,MAAM,CAAC,gCAAc,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CACpG,CAAC;QACJ,CAAC;QACD,OAAO,wBAAgB,CAAC,MAAM,CAAC,CAAC,aAAa,EAAE,CAAC;IAClD,CAAC;IACD,qEAAqE;IACrE,OAAO,IAAI,+BAAmB,EAAE,CAAC;AACnC,CAAC","sourcesContent":["import { CSharpVisitor } from './csharp';\nimport { GoVisitor } from './go';\nimport { JavaVisitor } from './java';\nimport { PythonVisitor } from './python';\nimport { TargetLanguage } from './target-language';\nimport { VisualizeAstVisitor } from './visualize';\nimport { AstHandler } from '../renderer';\n\nexport { TargetLanguage };\n\nexport interface VisitorFactory {\n  readonly version: string;\n  createVisitor(): AstHandler<any>;\n}\n\nexport const TARGET_LANGUAGES: { [key in TargetLanguage]: VisitorFactory } = {\n  [TargetLanguage.PYTHON]: {\n    version: PythonVisitor.VERSION,\n    createVisitor: () => new PythonVisitor(),\n  },\n  [TargetLanguage.CSHARP]: {\n    version: CSharpVisitor.VERSION,\n    createVisitor: () => new CSharpVisitor(),\n  },\n  [TargetLanguage.JAVA]: {\n    version: JavaVisitor.VERSION,\n    createVisitor: () => new JavaVisitor(),\n  },\n  [TargetLanguage.GO]: {\n    version: GoVisitor.VERSION,\n    createVisitor: () => new GoVisitor(),\n  },\n};\n\nexport function getVisitorFromLanguage(language: string | undefined) {\n  if (language !== undefined) {\n    const target = Object.values(TargetLanguage).find((t) => t === language);\n    if (target === undefined) {\n      throw new Error(\n        `Unknown target language: ${language}. Expected one of ${Object.values(TargetLanguage).join(', ')}`,\n      );\n    }\n    return TARGET_LANGUAGES[target].createVisitor();\n  }\n  // Default to visualizing AST, including nodes we don't recognize yet\n  return new VisualizeAstVisitor();\n}\n"]}