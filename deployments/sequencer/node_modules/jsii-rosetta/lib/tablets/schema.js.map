{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../src/tablets/schema.ts"],"names":[],"mappings":";;;AA6Ba,QAAA,oBAAoB,GAAG,GAAG,CAAC","sourcesContent":["import { SnippetLocation } from '../snippet';\n\n/**\n * Tablet file schema\n */\nexport interface TabletSchema {\n  /**\n   * Schema version\n   */\n  version: string;\n\n  /**\n   * What version of the tool this schema was generated with\n   *\n   * Hashing algorithms may depend on the tool version, and the tool\n   * will reject tablets generated by different versions.\n   *\n   * Since tablets are designed to be used as scratch space during a build, not\n   * designed to be stored long-term, this limitation does not impact\n   * usability.\n   */\n  toolVersion: string;\n\n  /**\n   * All the snippets in the tablet\n   */\n  snippets: { [key: string]: TranslatedSnippetSchema };\n}\n\nexport const ORIGINAL_SNIPPET_KEY = '$';\n\n/**\n * Schema for a snippet\n */\nexport interface TranslatedSnippetSchema {\n  /**\n   * Translations for each individual language\n   *\n   * Since TypeScript is a valid output translation, the original will be\n   * listed under the key '$'.\n   */\n  readonly translations: { [key: string]: TranslationSchema };\n\n  /**\n   * A description of the location this code snippet was found\n   */\n  readonly location: SnippetLocation;\n\n  /**\n   * Whether this was compiled without errors\n   *\n   * Undefined means compilation was not attempted.\n   */\n  readonly didCompile?: boolean;\n\n  /**\n   * FQNs of classes and functions referenced in this snippet.\n   */\n  readonly fqnsReferenced?: string[];\n\n  /**\n   * A fingerprint of the types referenced in `fqnsReferenced`.\n   *\n   * This can be used to validate/invalidate previous compilations of a snippet.\n   *\n   * A snippet needs to be recompiled if:\n   *\n   * - Its source text changes: hash will be different\n   * - Its fixture changes: fullSource will be different\n   * - The referenced types have changed: fingerprint will be different\n   */\n  readonly fqnsFingerprint?: string;\n\n  /**\n   * Counts the number of instances each kind of Typescript object shows up in the snippet AST.\n   */\n  readonly syntaxKindCounter?: { [key: string]: number };\n\n  /**\n   * The full source (with fixture) that was compiled\n   */\n  readonly fullSource?: string;\n}\n\n/**\n * A single snippet's translation\n */\nexport interface TranslationSchema {\n  /**\n   * The source of a single translation\n   */\n  readonly source: string;\n\n  /**\n   * The version of the translator used to obtain this translation\n   */\n  readonly version: string;\n}\n"]}