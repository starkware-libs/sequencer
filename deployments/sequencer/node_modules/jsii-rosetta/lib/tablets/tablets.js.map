{"version":3,"file":"tablets.js","sourceRoot":"","sources":["../../src/tablets/tablets.ts"],"names":[],"mappings":"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","sourcesContent":["import { createReadStream, createWriteStream, existsSync, promises as fs } from 'node:fs';\nimport * as path from 'node:path';\nimport { Readable, Writable } from 'node:stream';\nimport * as zlib from 'node:zlib';\n\nimport { snippetKey } from './key';\nimport { TabletSchema, TranslatedSnippetSchema, ORIGINAL_SNIPPET_KEY } from './schema';\nimport { parse, stringify } from '../json';\nimport { TargetLanguage } from '../languages';\nimport * as logging from '../logging';\nimport { TypeScriptSnippet, SnippetLocation, completeSource } from '../snippet';\nimport { mapValues, Mutable } from '../util';\n\n// eslint-disable-next-line @typescript-eslint/no-require-imports,@typescript-eslint/no-var-requires\nconst TOOL_VERSION = require('../../package.json').version;\n\n/**\n * The default name of the tablet file\n */\nexport const DEFAULT_TABLET_NAME = '.jsii.tabl.json';\n\n/**\n * The default name of the compressed tablet file\n */\nexport const DEFAULT_TABLET_NAME_COMPRESSED = '.jsii.tabl.json.gz';\n\nexport const CURRENT_SCHEMA_VERSION = '2';\n\n/**\n * A tablet containing various snippets in multiple languages\n */\nexport class LanguageTablet {\n  /**\n   * Load a tablet from a file\n   */\n  public static async fromFile(filename: string) {\n    const ret = new LanguageTablet();\n    await ret.load(filename);\n    return ret;\n  }\n\n  /**\n   * Load a tablet from a file that may not exist\n   *\n   * Will return an empty tablet if the file does not exist\n   */\n  public static async fromOptionalFile(filename: string) {\n    const ret = new LanguageTablet();\n    if (existsSync(filename)) {\n      try {\n        await ret.load(filename);\n      } catch (e: any) {\n        logging.warn(`${filename}: ${e}`);\n      }\n    }\n    return ret;\n  }\n\n  /**\n   * Whether or not the LanguageTablet was loaded with a compressed source.\n   * This gets used to determine if it should be compressed when saved.\n   */\n  public compressedSource = false;\n\n  private readonly snippets: Record<string, TranslatedSnippet> = {};\n\n  /**\n   * Add one or more snippets to this tablet\n   */\n  public addSnippets(...snippets: TranslatedSnippet[]) {\n    for (const snippet of snippets) {\n      const existingSnippet = this.snippets[snippet.key];\n      this.snippets[snippet.key] = existingSnippet ? existingSnippet.mergeTranslations(snippet) : snippet;\n    }\n  }\n\n  /**\n   * Add one snippet to this tablet\n   *\n   * @deprecated use addSnippets instead\n   */\n  public addSnippet(snippet: TranslatedSnippet) {\n    this.addSnippets(snippet);\n  }\n\n  public get snippetKeys() {\n    return Object.keys(this.snippets);\n  }\n\n  /**\n   * Add all snippets from the given tablets into this one\n   */\n  public addTablets(...tablets: LanguageTablet[]) {\n    for (const tablet of tablets) {\n      for (const snippet of Object.values(tablet.snippets)) {\n        this.addSnippet(snippet);\n      }\n    }\n  }\n\n  /**\n   * Add all snippets from the given tablet into this one\n   *\n   * @deprecated Use `addTablets()` instead.\n   */\n  public addTablet(tablet: LanguageTablet) {\n    this.addTablets(tablet);\n  }\n\n  public tryGetSnippet(key: string): TranslatedSnippet | undefined {\n    return this.snippets[key];\n  }\n\n  /**\n   * Look up a single translation of a source snippet\n   *\n   * @deprecated Use `lookupTranslationBySource` instead.\n   */\n  public lookup(typeScriptSource: TypeScriptSnippet, language: TargetLanguage): Translation | undefined {\n    return this.lookupTranslationBySource(typeScriptSource, language);\n  }\n\n  /**\n   * Look up a single translation of a source snippet\n   */\n  public lookupTranslationBySource(\n    typeScriptSource: TypeScriptSnippet,\n    language: TargetLanguage,\n  ): Translation | undefined {\n    const snippet = this.snippets[snippetKey(typeScriptSource)];\n    return snippet?.get(language);\n  }\n\n  /**\n   * Lookup the translated verion of a TypeScript snippet\n   */\n  public lookupBySource(typeScriptSource: TypeScriptSnippet): TranslatedSnippet | undefined {\n    return this.snippets[snippetKey(typeScriptSource)];\n  }\n\n  /**\n   * Load the tablet from a file. Will automatically detect if the file is\n   * compressed and decompress accordingly.\n   */\n  public async load(filename: string) {\n    let readStream: Readable;\n    if (await isGzipped(filename)) {\n      const gunzip = zlib.createGunzip();\n      createReadStream(filename).pipe(gunzip, { end: true });\n      readStream = gunzip;\n      this.compressedSource = true;\n    } else {\n      readStream = createReadStream(filename);\n    }\n\n    const obj: TabletSchema = await parse(readStream);\n\n    if (!obj.toolVersion || !obj.snippets) {\n      throw new Error(`File '${filename}' does not seem to be a Tablet file`);\n    }\n\n    if (obj.version !== CURRENT_SCHEMA_VERSION) {\n      // If we're ever changing the schema version in a backwards incompatible way,\n      // do upconversion here.\n      throw new Error(\n        `Tablet file '${filename}' has schema version '${obj.version}', this program expects '${CURRENT_SCHEMA_VERSION}'`,\n      );\n    }\n\n    Object.assign(this.snippets, mapValues(obj.snippets, TranslatedSnippet.fromSchema));\n  }\n\n  public get count() {\n    return Object.keys(this.snippets).length;\n  }\n\n  public get translatedSnippets() {\n    return Object.values(this.snippets);\n  }\n\n  /**\n   * Saves the tablet schema to a file. If the compress option is passed, then\n   * the schema will be gzipped before writing to the file.\n   */\n  public async save(filename: string, compress = false): Promise<void> {\n    await fs.mkdir(path.dirname(filename), { recursive: true });\n\n    const writeStream: Writable = createWriteStream(filename, { flags: 'w' });\n    const gzip = compress ? zlib.createGzip() : undefined;\n\n    return stringify(this.toSchema(), ...(gzip ? [gzip] : []), writeStream);\n  }\n\n  private toSchema(): TabletSchema {\n    return {\n      version: CURRENT_SCHEMA_VERSION,\n      toolVersion: TOOL_VERSION,\n      snippets: mapValues(this.snippets, (s) => s.snippet),\n    };\n  }\n}\n\n/**\n * Mutable operations on an underlying TranslatedSnippetSchema\n */\nexport class TranslatedSnippet {\n  public static fromSchema(schema: TranslatedSnippetSchema) {\n    if (!schema.translations[ORIGINAL_SNIPPET_KEY]) {\n      throw new Error(`Input schema must have '${ORIGINAL_SNIPPET_KEY}' key set in translations`);\n    }\n    return new TranslatedSnippet(schema);\n  }\n\n  public static fromTypeScript(original: TypeScriptSnippet, didCompile?: boolean) {\n    return new TranslatedSnippet({\n      translations: {\n        [ORIGINAL_SNIPPET_KEY]: { source: original.visibleSource, version: '0' },\n      },\n      didCompile: didCompile,\n      location: original.location,\n      fullSource: completeSource(original),\n    });\n  }\n\n  public readonly snippet: TranslatedSnippetSchema;\n\n  private readonly _snippet: Mutable<TranslatedSnippetSchema>;\n  private _key?: string;\n\n  private constructor(snippet: TranslatedSnippetSchema) {\n    this._snippet = { ...snippet };\n    this.snippet = this._snippet;\n  }\n\n  public get key() {\n    if (this._key === undefined) {\n      this._key = snippetKey(this.asTypescriptSnippet());\n    }\n    return this._key;\n  }\n\n  public get originalSource(): Translation {\n    return {\n      source: this.snippet.translations[ORIGINAL_SNIPPET_KEY].source,\n      language: 'typescript',\n      didCompile: this.snippet.didCompile,\n    };\n  }\n\n  public addTranslation(language: TargetLanguage, translation: string, version: string): Translation {\n    this.snippet.translations[language] = { source: translation, version };\n\n    return {\n      source: translation,\n      language,\n      didCompile: this.snippet.didCompile,\n    };\n  }\n\n  public fqnsReferenced() {\n    return this._snippet.fqnsReferenced ?? [];\n  }\n\n  public addSyntaxKindCounter(syntaxKindCounter: Record<string, number>) {\n    if (!this._snippet.syntaxKindCounter) {\n      this._snippet.syntaxKindCounter = {};\n    }\n    for (const [key, value] of Object.entries(syntaxKindCounter)) {\n      const x = this._snippet.syntaxKindCounter[key] ?? 0;\n      this._snippet.syntaxKindCounter[key] = value + x;\n    }\n  }\n\n  public get languages(): TargetLanguage[] {\n    return Object.keys(this.snippet.translations).filter((x) => x !== ORIGINAL_SNIPPET_KEY) as TargetLanguage[];\n  }\n\n  public get(language: TargetLanguage): Translation | undefined {\n    const t = this.snippet.translations[language];\n    return t && { source: t.source, language, didCompile: this.snippet.didCompile };\n  }\n\n  public mergeTranslations(other: TranslatedSnippet) {\n    return new TranslatedSnippet({\n      ...this.snippet,\n      translations: { ...this.snippet.translations, ...other.snippet.translations },\n    });\n  }\n\n  public withFingerprint(fp: string) {\n    return new TranslatedSnippet({\n      ...this.snippet,\n      fqnsFingerprint: fp,\n    });\n  }\n\n  public withLocation(location: SnippetLocation) {\n    return new TranslatedSnippet({\n      ...this.snippet,\n      location,\n    });\n  }\n\n  public toJSON() {\n    return this._snippet;\n  }\n\n  private asTypescriptSnippet(): TypeScriptSnippet {\n    return {\n      visibleSource: this.snippet.translations[ORIGINAL_SNIPPET_KEY].source,\n      location: this.snippet.location,\n    };\n  }\n}\n\nexport interface Translation {\n  source: string;\n  language: string;\n  didCompile?: boolean;\n}\n\nasync function isGzipped(filename: string) {\n  const openFile = await fs.open(filename, 'r');\n  try {\n    // Assumes that we can always read 3 bytes if there's that many in the file...\n    const { bytesRead, buffer } = await openFile.read(Buffer.alloc(4), 0, 3, 0);\n    return bytesRead >= 3 && buffer[0] === 0x1f && buffer[1] === 0x8b && buffer[2] === 0x08;\n  } finally {\n    await openFile.close();\n  }\n}\n"]}