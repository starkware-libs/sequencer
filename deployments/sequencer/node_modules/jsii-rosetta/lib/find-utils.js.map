{"version":3,"file":"find-utils.js","sourceRoot":"","sources":["../src/find-utils.ts"],"names":[],"mappings":";;AAWA,0DAgBC;AAQD,8CAKC;AAaD,wBAkBC;AAQD,0CAIC;AAnFD,qCAAyC;AACzC,kCAAkC;AAElC,iCAAoC;AAEpC;;;;;GAKG;AACI,KAAK,UAAU,uBAAuB,CAAC,cAAsB,EAAE,WAAmB;IACvF,oFAAoF;IACpF,gDAAgD;IAChD,MAAM,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,cAAc,EAAE;QACjD,KAAK,EAAE,CAAC,WAAW,CAAC;KACrB,CAAC,CAAC;IAEH,8EAA8E;IAC9E,6EAA6E;IAC7E,MAAM,cAAc,GAAG,MAAM,iBAAiB,CAAC,cAAc,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;IAEzF,IAAI,CAAC,cAAc,EAAE,CAAC;QACpB,MAAM,IAAI,KAAK,CAAC,8BAA8B,cAAc,WAAW,WAAW,GAAG,CAAC,CAAC;IACzF,CAAC;IAED,OAAO,cAAc,CAAC;AACxB,CAAC;AAED;;;;;GAKG;AACI,KAAK,UAAU,iBAAiB,CAAC,WAAmB,EAAE,SAAiB;IAC5E,OAAO,MAAM,CAAC,SAAS,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE;QACrC,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC;QAC9C,OAAO,CAAC,MAAM,IAAA,iBAAU,EAAC,MAAM,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,kBAAE,CAAC,QAAQ,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,IAAI,KAAK,WAAW,CAAC;IAC3G,CAAC,CAAC,CAAC;AACL,CAAC;AAYD,qEAAqE;AACrE,SAAgB,MAAM,CACpB,SAAiB,EACjB,IAAiD;IAEjD,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;IAC/B,IAAI,MAAM,YAAY,OAAO,EAAE,CAAC;QAC9B,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;IACjF,CAAC;IAED,OAAO,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;IAEtC,SAAS,OAAO;QACd,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QACvC,IAAI,MAAM,KAAK,SAAS,EAAE,CAAC;YACzB,OAAO,SAAS,CAAC;QACnB,CAAC;QACD,OAAO,MAAM,CAAC,MAAM,EAAE,IAAW,CAAC,CAAC;IACrC,CAAC;AACH,CAAC;AAED;;;;;GAKG;AACH,SAAgB,eAAe,CAAC,OAAe;IAC7C,oGAAoG;IACpG,MAAM,EAAE,cAAc,EAAE,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;IAClD,OAAO,CAAC,cAAc,IAAI,EAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;AAClD,CAAC","sourcesContent":["import { promises as fs } from 'node:fs';\nimport * as path from 'node:path';\n\nimport { pathExists } from './util';\n\n/**\n * Find the directory that contains a given dependency, identified by its 'package.json', from a starting search directory\n *\n * (This code is duplicated among jsii/jsii-pacmak/jsii-reflect. Changes should be done in all\n * 3 locations, and we should unify these at some point: https://github.com/aws/jsii/issues/3236)\n */\nexport async function findDependencyDirectory(dependencyName: string, searchStart: string) {\n  // Explicitly do not use 'require(\"dep/package.json\")' because that will fail if the\n  // package does not export that particular file.\n  const entryPoint = require.resolve(dependencyName, {\n    paths: [searchStart],\n  });\n\n  // Search up from the given directory, looking for a package.json that matches\n  // the dependency name (so we don't accidentally find stray 'package.jsons').\n  const depPkgJsonPath = await findPackageJsonUp(dependencyName, path.dirname(entryPoint));\n\n  if (!depPkgJsonPath) {\n    throw new Error(`Could not find dependency '${dependencyName}' from '${searchStart}'`);\n  }\n\n  return depPkgJsonPath;\n}\n\n/**\n * Find the package.json for a given package upwards from the given directory\n *\n * (This code is duplicated among jsii/jsii-pacmak/jsii-reflect. Changes should be done in all\n * 3 locations, and we should unify these at some point: https://github.com/aws/jsii/issues/3236)\n */\nexport async function findPackageJsonUp(packageName: string, directory: string) {\n  return findUp(directory, async (dir) => {\n    const pjFile = path.join(dir, 'package.json');\n    return (await pathExists(pjFile)) && JSON.parse(await fs.readFile(pjFile, 'utf-8')).name === packageName;\n  });\n}\n\n/**\n * Find a directory up the tree from a starting directory matching a condition\n *\n * Will return `undefined` if no directory matches\n *\n * (This code is duplicated among jsii/jsii-pacmak/jsii-reflect. Changes should be done in all\n * 3 locations, and we should unify these at some point: https://github.com/aws/jsii/issues/3236)\n */\nexport function findUp(directory: string, pred: (dir: string) => Promise<boolean>): Promise<string | undefined>;\nexport function findUp(directory: string, pred: (dir: string) => boolean): string | undefined;\n// eslint-disable-next-line @typescript-eslint/promise-function-async\nexport function findUp(\n  directory: string,\n  pred: (dir: string) => boolean | Promise<boolean>,\n): Promise<string | undefined> | string | undefined {\n  const result = pred(directory);\n  if (result instanceof Promise) {\n    return result.then((thisDirectory) => (thisDirectory ? directory : recurse()));\n  }\n\n  return result ? directory : recurse();\n\n  function recurse() {\n    const parent = path.dirname(directory);\n    if (parent === directory) {\n      return undefined;\n    }\n    return findUp(parent, pred as any);\n  }\n}\n\n/**\n * Whether the given dependency is a built-in\n *\n * Some dependencies that occur in `package.json` are also built-ins in modern Node\n * versions (most egregious example: 'punycode'). Detect those and filter them out.\n */\nexport function isBuiltinModule(depName: string) {\n  // eslint-disable-next-line @typescript-eslint/no-require-imports,@typescript-eslint/no-var-requires\n  const { builtinModules } = require('node:module');\n  return (builtinModules ?? []).includes(depName);\n}\n"]}