{"version":3,"file":"transliterate.js","sourceRoot":"","sources":["../../src/commands/transliterate.ts"],"names":[],"mappings":"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","sourcesContent":["import { promises as fs } from 'node:fs';\nimport { resolve } from 'node:path';\nimport { Assembly, Docs, SPEC_FILE_NAME, Type, TypeKind, loadAssemblyFromPath } from '@jsii/spec';\n\nimport { extractSnippets } from './extract';\nimport { TargetLanguage } from '../languages';\nimport { targetName } from '../languages/target-language';\nimport { debug } from '../logging';\nimport { RosettaTabletReader, UnknownSnippetMode } from '../rosetta-reader';\nimport { typeScriptSnippetFromVisibleSource, ApiLocation } from '../snippet';\nimport { Mutable } from '../util';\n\nexport interface TransliterateAssemblyOptions {\n  /**\n   * Whether to ignore any missing fixture files or literate markdown documents\n   * referenced by the assembly, instead of failing.\n   *\n   * @default false\n   */\n  readonly loose?: boolean;\n\n  /**\n   * Whether transliteration should fail upon failing to compile an example that\n   * required live transliteration.\n   *\n   * @default false\n   */\n  readonly strict?: boolean;\n\n  /**\n   * A pre-build translation tablet (as produced by `jsii-rosetta extract`).\n   *\n   * @default - Only the default tablet (`.jsii.tabl.json`) files will be used.\n   */\n  readonly tablet?: string;\n\n  /**\n   * A directory to output translated assemblies to\n   *\n   * @default - assembly location\n   */\n  readonly outdir?: string;\n\n  /**\n   * Whether or not to live-convert samples\n   *\n   * @default UnknownSnippetMode.FAIL\n   */\n  readonly unknownSnippets?: UnknownSnippetMode;\n}\n\n/**\n * Prepares transliterated versions of the designated assemblies into the\n * selected target languages.\n *\n * @param assemblyLocations the directories which contain assemblies to\n *                          transliterate.\n * @param targetLanguages   the languages into which to transliterate.\n * @param tabletLocation    an optional Rosetta tablet file to source\n *                          pre-transliterated snippets from.\n *\n * @experimental\n */\nexport async function transliterateAssembly(\n  assemblyLocations: readonly string[],\n  targetLanguages: readonly TargetLanguage[],\n  options: TransliterateAssemblyOptions = {},\n): Promise<void> {\n  // Start by doing an 'extract' for all these assemblies\n  //\n  // This will locate all examples that haven't been translated yet and translate\n  // them. Importantly: it will translate them in parallel, which is going to improve\n  // performance a lot. We ignore diagnostics.\n  const { tablet } = await extractSnippets(assemblyLocations, {\n    includeCompilerDiagnostics: true,\n    loose: options.loose,\n    cacheFromFile: options.tablet,\n    writeToImplicitTablets: false,\n    allowDirtyTranslations: true,\n  });\n\n  // Now do a regular \"tablet reader\" cycle, expecting everything to be translated already,\n  // and therefore it doesn't matter that we do this all in a single-threaded loop.\n  const rosetta = new RosettaTabletReader({\n    unknownSnippets: options?.unknownSnippets ?? UnknownSnippetMode.FAIL,\n    targetLanguages,\n    prefixDisclaimer: true,\n  });\n  // Put in the same caching tablet here\n  if (options.tablet) {\n    await rosetta.loadTabletFromFile(options.tablet);\n  }\n  // Any fresh translations we just came up with\n  rosetta.addTablet(tablet);\n\n  const assemblies = await loadAssemblies(assemblyLocations, rosetta);\n\n  for (const [location, loadAssembly] of assemblies.entries()) {\n    for (const language of targetLanguages) {\n      const now = new Date().getTime();\n      const result = loadAssembly();\n\n      if (result.targets?.[targetName(language)] == null) {\n        // This language is not supported by the assembly, so we skip it...\n        continue;\n      }\n\n      if (result.readme?.markdown) {\n        result.readme.markdown = rosetta.translateSnippetsInMarkdown(\n          { api: 'moduleReadme', moduleFqn: result.name },\n          result.readme.markdown,\n          language,\n          true /* strict */,\n        );\n      }\n      for (const type of Object.values(result.types ?? {})) {\n        transliterateType(type, rosetta, language);\n      }\n      // eslint-disable-next-line no-await-in-loop\n      await fs.writeFile(\n        resolve(options?.outdir ?? location, `${SPEC_FILE_NAME}.${language}`),\n        JSON.stringify(result, null, 2),\n      );\n      const then = new Date().getTime();\n      debug(`Done transliterating ${result.name}@${result.version} to ${language} after ${then - now} milliseconds`);\n    }\n  }\n\n  rosetta.printDiagnostics(process.stderr, process.stderr.isTTY);\n  if (rosetta.hasErrors && options.strict) {\n    throw new Error('Strict mode is enabled and some examples failed compilation!');\n  }\n}\n\n/**\n * Given a set of directories containing `.jsii` assemblies, load all the\n * assemblies into the provided `Rosetta` instance and return a map of\n * directories to assembly-loading functions (the function re-loads the original\n * assembly from disk on each invocation).\n *\n * @param directories the assembly-containing directories to traverse.\n * @param rosetta     the `Rosetta` instance in which to load assemblies.\n *\n * @returns a map of directories to a function that loads the `.jsii` assembly\n *          contained therein from disk.\n */\nasync function loadAssemblies(\n  directories: readonly string[],\n  rosetta: RosettaTabletReader,\n): Promise<ReadonlyMap<string, AssemblyLoader>> {\n  const result = new Map<string, AssemblyLoader>();\n\n  for (const directory of directories) {\n    const loader = () => loadAssemblyFromPath(directory);\n    // eslint-disable-next-line no-await-in-loop\n    await rosetta.addAssembly(loader(), directory);\n    result.set(directory, loader);\n  }\n\n  return result;\n}\n\ntype AssemblyLoader = () => Mutable<Assembly>;\n\nfunction transliterateType(type: Type, rosetta: RosettaTabletReader, language: TargetLanguage): void {\n  transliterateDocs({ api: 'type', fqn: type.fqn }, type.docs);\n  switch (type.kind) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore 7029\n    case TypeKind.Class:\n      if (type.initializer) {\n        transliterateDocs({ api: 'initializer', fqn: type.fqn }, type.initializer.docs);\n      }\n\n    // fallthrough\n    case TypeKind.Interface:\n      for (const method of type.methods ?? []) {\n        transliterateDocs({ api: 'member', fqn: type.fqn, memberName: method.name }, method.docs);\n        for (const parameter of method.parameters ?? []) {\n          transliterateDocs(\n            { api: 'parameter', fqn: type.fqn, methodName: method.name, parameterName: parameter.name },\n            parameter.docs,\n          );\n        }\n      }\n      for (const property of type.properties ?? []) {\n        transliterateDocs({ api: 'member', fqn: type.fqn, memberName: property.name }, property.docs);\n      }\n      break;\n\n    case TypeKind.Enum:\n      for (const member of type.members) {\n        transliterateDocs({ api: 'member', fqn: type.fqn, memberName: member.name }, member.docs);\n      }\n      break;\n\n    default:\n      throw new Error(`Unsupported type kind: ${(type as any).kind}`);\n  }\n\n  function transliterateDocs(api: ApiLocation, docs: Docs | undefined) {\n    if (docs?.remarks) {\n      docs.remarks = rosetta.translateSnippetsInMarkdown(api, docs.remarks, language, true /* strict */);\n    }\n\n    if (docs?.example) {\n      const location = { api, field: { field: 'example' } } as const;\n      const snippet = typeScriptSnippetFromVisibleSource(docs.example, location, true /* strict */);\n      const translation = rosetta.translateSnippet(snippet, language);\n      if (translation != null) {\n        docs.example = translation.source;\n      }\n    }\n  }\n}\n"]}