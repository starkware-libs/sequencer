{"version":3,"file":"read.js","sourceRoot":"","sources":["../../src/commands/read.ts"],"names":[],"mappings":"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","sourcesContent":["import { TargetLanguage } from '../languages';\nimport { LanguageTablet, TranslatedSnippet, Translation } from '../tablets/tablets';\n\nexport async function readTablet(tabletFile: string, key?: string, lang?: string) {\n  const tab = new LanguageTablet();\n  await tab.load(tabletFile);\n\n  if (key !== undefined) {\n    const snippet = tab.tryGetSnippet(key);\n    if (snippet === undefined) {\n      throw new Error(`No such snippet: ${key}`);\n    }\n    displaySnippet(snippet);\n  } else {\n    listSnippets();\n  }\n\n  function listSnippets() {\n    for (const k of tab.snippetKeys) {\n      process.stdout.write(`${snippetHeader(k)}\\n`);\n      displaySnippet(tab.tryGetSnippet(k)!);\n      process.stdout.write('\\n');\n    }\n  }\n\n  function displaySnippet(snippet: TranslatedSnippet) {\n    if (snippet.snippet.didCompile !== undefined) {\n      process.stdout.write(`Compiled: ${snippet.snippet.didCompile}\\n`);\n    }\n\n    if (lang !== undefined) {\n      const translation = snippet.get(lang as TargetLanguage);\n      if (translation === undefined) {\n        throw new Error(`No translation for ${lang} in snippet ${snippet.key}`);\n      }\n      displayTranslation(translation);\n    } else {\n      listTranslations(snippet);\n    }\n  }\n\n  function listTranslations(snippet: TranslatedSnippet) {\n    const original = snippet.originalSource;\n    if (original !== undefined) {\n      displayTranslation(original);\n    }\n\n    for (const l of snippet.languages) {\n      process.stdout.write(`${languageHeader(l)}\\n`);\n      displayTranslation(snippet.get(l)!);\n    }\n  }\n\n  function displayTranslation(translation: Translation) {\n    process.stdout.write(`${translation.source}\\n`);\n  }\n}\n\nfunction snippetHeader(key: string) {\n  return center(` ${key} `, 100, '=');\n}\n\nfunction languageHeader(key: string) {\n  return center(` ${key} `, 30, '-');\n}\n\nfunction center(str: string, n: number, fill: string) {\n  const before = Math.floor((n - str.length) / 2);\n  const after = Math.ceil((n - str.length) / 2);\n\n  return fill.repeat(Math.max(before, 0)) + str + fill.repeat(Math.max(after, 0));\n}\n"]}