{"version":3,"file":"trim-cache.js","sourceRoot":"","sources":["../../src/commands/trim-cache.ts"],"names":[],"mappings":";;AAkBA,8BAcC;AAhCD,mDAA2E;AAC3E,sCAAsC;AACtC,wCAA4C;AAC5C,gDAAoD;AACpD,kCAAoC;AAc7B,KAAK,UAAU,SAAS,CAAC,OAAyB;IACvD,OAAO,CAAC,IAAI,CAAC,WAAW,OAAO,CAAC,iBAAiB,CAAC,MAAM,aAAa,CAAC,CAAC;IACvE,MAAM,UAAU,GAAG,IAAA,2BAAc,EAAC,OAAO,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;IAEpE,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,IAAA,kCAAqB,EAAC,UAAU,CAAC,CAAC,CAAC;IAErE,MAAM,QAAQ,GAAG,MAAM,wBAAc,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IAClE,MAAM,OAAO,GAAG,IAAI,wBAAc,EAAE,CAAC;IACrC,OAAO,CAAC,WAAW,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAA,gBAAU,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAS,CAAC,CAAC,CAAC;IAC3G,0EAA0E;IAC1E,MAAM,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,QAAQ,CAAC,gBAAgB,CAAC,CAAC;IAEjE,6CAA6C;IAC7C,OAAO,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,SAAS,KAAK,OAAO,CAAC,KAAK,wBAAwB,QAAQ,CAAC,KAAK,MAAM,OAAO,CAAC,KAAK,WAAW,CAAC,CAAC;AAC3H,CAAC","sourcesContent":["import { loadAssemblies, allTypeScriptSnippets } from '../jsii/assemblies';\nimport * as logging from '../logging';\nimport { snippetKey } from '../tablets/key';\nimport { LanguageTablet } from '../tablets/tablets';\nimport { isDefined } from '../util';\n\nexport interface TrimCacheOptions {\n  /**\n   * Locations of assemblies to search for snippets\n   */\n  readonly assemblyLocations: string[];\n\n  /**\n   * Cache to trim\n   */\n  readonly cacheFile: string;\n}\n\nexport async function trimCache(options: TrimCacheOptions): Promise<void> {\n  logging.info(`Loading ${options.assemblyLocations.length} assemblies`);\n  const assemblies = loadAssemblies(options.assemblyLocations, false);\n\n  const snippets = Array.from(await allTypeScriptSnippets(assemblies));\n\n  const original = await LanguageTablet.fromFile(options.cacheFile);\n  const updated = new LanguageTablet();\n  updated.addSnippets(...snippets.map((snip) => original.tryGetSnippet(snippetKey(snip))).filter(isDefined));\n  // if the original file was compressed, then compress the updated file too\n  await updated.save(options.cacheFile, original.compressedSource);\n\n  // eslint-disable-next-line prettier/prettier\n  logging.info(`${options.cacheFile}: ${updated.count} snippets remaining (${original.count} - ${updated.count} trimmed)`);\n}\n"]}