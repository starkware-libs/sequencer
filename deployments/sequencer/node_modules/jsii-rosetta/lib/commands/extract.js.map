{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../src/commands/extract.ts"],"names":[],"mappings":";;AAuGA,4CAQC;AAKD,0CAkGC;AAtND,kCAAkC;AAElC,qCAAkC;AAClC,mDAK4B;AAC5B,sCAAsC;AACtC,8DAAoF;AACpF,wCAAkE;AAClE,wCAA4C;AAC5C,gDAAyG;AAEzG,kCAA6C;AAwFtC,KAAK,UAAU,gBAAgB,CAAC,iBAA2B,EAAE,OAAuB;IACzF,MAAM,MAAM,GAAG,MAAM,eAAe,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC;IACjE,MAAM,IAAA,eAAM,EAAC,iBAAiB,EAAE;QAC9B,aAAa,EAAE,OAAO,CAAC,aAAa;QACpC,WAAW,EAAE,OAAO,CAAC,WAAW;QAChC,mBAAmB,EAAE,OAAO,CAAC,mBAAmB;KACjD,CAAC,CAAC;IACH,OAAO,MAAM,CAAC;AAChB,CAAC;AAED;;GAEG;AACI,KAAK,UAAU,eAAe,CACnC,iBAAoC,EACpC,UAA0B,EAAE;IAE5B,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,IAAI,EAAE,CAAC;IAEhC,OAAO,CAAC,IAAI,CAAC,WAAW,iBAAiB,CAAC,MAAM,aAAa,CAAC,CAAC;IAC/D,MAAM,UAAU,GAAG,IAAA,2BAAc,EAAC,iBAAiB,EAAE,OAAO,CAAC,kBAAkB,IAAI,KAAK,CAAC,CAAC;IAE1F,IAAI,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,IAAA,kCAAqB,EAAC,UAAU,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;IAClF,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QACpB,QAAQ,GAAG,cAAc,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IAC5C,CAAC;IAED,0EAA0E;IAC1E,gDAAgD;IAChD,MAAM,mBAAmB,GAAG,IAAA,cAAO,EACjC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,IAAA,gBAAU,EAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAC5E,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAClB,CAAC;IAEF,MAAM,iBAAiB,GAA6B;QAClD,0BAA0B,EAAE,OAAO,CAAC,0BAA0B,IAAI,KAAK;QACvE,UAAU,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;QAC7C,sBAAsB,EAAE,OAAO,CAAC,sBAAsB;KACvD,CAAC;IAEF,MAAM,UAAU,GAAG,OAAO,CAAC,iBAAiB;QAC1C,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,iBAAiB,CAAC;QAC9C,CAAC,CAAC,IAAI,sCAAiB,CAAC,iBAAiB,CAAC,CAAC;IAE7C,gCAAgC;IAChC,sBAAsB;IACtB,gDAAgD;IAChD,IAAI,OAAO,CAAC,aAAa,EAAE,CAAC;QAC1B,MAAM,UAAU,CAAC,UAAU,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IACrD,CAAC;IACD,UAAU,CAAC,iBAAiB,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,IAAA,kCAAqB,EAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAExF,IAAI,UAAU,CAAC,QAAQ,EAAE,EAAE,CAAC;QAC1B,MAAM,EAAE,YAAY,EAAE,SAAS,EAAE,GAAG,UAAU,CAAC,aAAa,CAAC,QAAQ,EAAE,IAAI,EAAE,OAAO,CAAC,0BAA0B,CAAC,CAAC;QACjH,OAAO,CAAC,IAAI,CAAC,UAAU,YAAY,CAAC,MAAM,0BAA0B,CAAC,CAAC;QACtE,QAAQ,GAAG,SAAS,CAAC;IACvB,CAAC;IAED,MAAM,WAAW,GAAG,EAAE,CAAC;IACvB,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QACxB,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC5B,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAE7B,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,YAAY,CAAC,QAAQ,EAAE;YACrD,oBAAoB,EAAE,OAAO,CAAC,oBAAoB;YAClD,OAAO,EAAE,OAAO,CAAC,OAAO;SACzB,CAAC,CAAC;QAEH,MAAM,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC,GAAG,IAAI,CAAC;QAC9C,OAAO,CAAC,IAAI,CACV,cAAc,QAAQ,CAAC,MAAM,gBAAgB,KAAK,aAAa,CAAC,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,WAAW,CAClG,CAAC,CACF,YAAY,CACd,CAAC;QACF,WAAW,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;IAC1C,CAAC;SAAM,CAAC;QACN,OAAO,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;IAC5C,CAAC;IAED,kCAAkC;IAClC,IAAI,OAAO,CAAC,sBAAsB,IAAI,IAAI,EAAE,CAAC;QAC3C,MAAM,OAAO,CAAC,GAAG,CACf,MAAM,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAE,EAAE;YAClE,sHAAsH;YACtH,MAAM,gBAAgB,GAAG,OAAO,CAAC,cAAc,IAAI,IAAA,mCAAsB,EAAC,QAAQ,CAAC,CAAC;YAEpF,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAC7B,QAAQ,EACR,gBAAgB,CAAC,CAAC,CAAC,wCAA8B,CAAC,CAAC,CAAC,6BAAmB,CACxE,CAAC;YACF,OAAO,CAAC,KAAK,CAAC,WAAW,KAAK,CAAC,MAAM,oBAAoB,aAAa,EAAE,CAAC,CAAC;YAC1E,MAAM,YAAY,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAS,CAAC,CAAC;YAEpG,MAAM,SAAS,GAAG,IAAI,wBAAc,EAAE,CAAC;YACvC,SAAS,CAAC,WAAW,CAAC,GAAG,YAAY,CAAC,CAAC;YACvC,MAAM,SAAS,CAAC,IAAI,CAAC,aAAa,EAAE,gBAAgB,CAAC,CAAC;QACxD,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IAED,uCAAuC;IACvC,IAAI,OAAO,CAAC,WAAW,EAAE,CAAC;QACxB,OAAO,CAAC,IAAI,CAAC,0BAA0B,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC;QAC9D,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS;YAC9B,CAAC,CAAC,IAAI,wBAAc,EAAE;YACtB,CAAC,CAAC,MAAM,wBAAc,CAAC,gBAAgB,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QAC/D,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QACrC,MAAM,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,OAAO,CAAC,mBAAmB,CAAC,CAAC;IACtE,CAAC;IAED,OAAO,EAAE,WAAW,EAAE,MAAM,EAAE,UAAU,CAAC,MAAM,EAAE,CAAC;AACpD,CAAC;AAED;;GAEG;AACH,SAAS,cAAc,CAAC,EAAuB,EAAE,UAAoB;IACnE,OAAO,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAA,gBAAU,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9D,CAAC;AAED,SAAS,gBAAgB,CAAC,EAAqB;IAC7C,MAAM,GAAG,GAAG,EAAE,CAAC,UAAU,EAAE,CAAC,2BAAiB,CAAC,kBAAkB,CAAC,CAAC;IAClE,IAAI,CAAC,GAAG,EAAE,CAAC;QACT,MAAM,IAAI,KAAK,CAAC,uDAAuD,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IACxG,CAAC;IACD,OAAO,GAAG,CAAC;AACb,CAAC","sourcesContent":["import * as path from 'node:path';\n\nimport { infuse } from './infuse';\nimport {\n  loadAssemblies,\n  allTypeScriptSnippets,\n  loadAllDefaultTablets,\n  compressedTabletExists,\n} from '../jsii/assemblies';\nimport * as logging from '../logging';\nimport { RosettaTranslator, RosettaTranslatorOptions } from '../rosetta-translator';\nimport { TypeScriptSnippet, SnippetParameters } from '../snippet';\nimport { snippetKey } from '../tablets/key';\nimport { LanguageTablet, DEFAULT_TABLET_NAME, DEFAULT_TABLET_NAME_COMPRESSED } from '../tablets/tablets';\nimport { RosettaDiagnostic } from '../translate';\nimport { groupBy, isDefined } from '../util';\n\nexport interface ExtractResult {\n  diagnostics: RosettaDiagnostic[];\n  tablet: LanguageTablet;\n}\n\nexport interface ExtractOptions {\n  readonly includeCompilerDiagnostics?: boolean;\n  readonly validateAssemblies?: boolean;\n  readonly only?: string[];\n\n  /**\n   * A tablet file to be loaded and used as a source for caching\n   */\n  readonly cacheFromFile?: string;\n\n  /**\n   * A tablet file to append translated snippets to\n   */\n  readonly cacheToFile?: string;\n\n  /**\n   * Trim cache to only contain translations found in the current assemblies\n   *\n   * @default false\n   */\n  readonly trimCache?: boolean;\n\n  /**\n   * Write translations to implicit tablets (`.jsii.tabl.json`)\n   *\n   * @default true\n   */\n  readonly writeToImplicitTablets?: boolean;\n\n  /**\n   * What directory to compile the samples in\n   *\n   * @default - Rosetta manages the compilation directory\n   * @deprecated Samples declare their own dependencies instead\n   */\n  readonly compilationDirectory?: string;\n\n  /**\n   * Make a translator (just for testing)\n   */\n  readonly translatorFactory?: (opts: RosettaTranslatorOptions) => RosettaTranslator;\n\n  /**\n   * Turn on 'loose mode' or not\n   *\n   * Loose mode ignores failures during fixturizing, and undoes 'strict mode' for\n   * diagnostics.\n   *\n   * @default false\n   */\n  readonly loose?: boolean;\n\n  /**\n   * Accept dirty translations from the cache\n   *\n   * @default false\n   */\n  readonly allowDirtyTranslations?: boolean;\n\n  /**\n   * Compress the implicit tablet files.\n   *\n   * @default - preserves the original compression status of each individual implicit tablet file.\n   */\n  readonly compressTablet?: boolean;\n\n  /**\n   * Compress the cacheToFile tablet.\n   *\n   * @default false\n   */\n  readonly compressCacheToFile?: boolean;\n\n  /**\n   * Cleanup temporary directories\n   *\n   * @default true\n   */\n  readonly cleanup?: boolean;\n}\n\nexport async function extractAndInfuse(assemblyLocations: string[], options: ExtractOptions): Promise<ExtractResult> {\n  const result = await extractSnippets(assemblyLocations, options);\n  await infuse(assemblyLocations, {\n    cacheFromFile: options.cacheFromFile,\n    cacheToFile: options.cacheToFile,\n    compressCacheToFile: options.compressCacheToFile,\n  });\n  return result;\n}\n\n/**\n * Extract all samples from the given assemblies into a tablet\n */\nexport async function extractSnippets(\n  assemblyLocations: readonly string[],\n  options: ExtractOptions = {},\n): Promise<ExtractResult> {\n  const only = options.only ?? [];\n\n  logging.info(`Loading ${assemblyLocations.length} assemblies`);\n  const assemblies = loadAssemblies(assemblyLocations, options.validateAssemblies ?? false);\n\n  let snippets = Array.from(await allTypeScriptSnippets(assemblies, options.loose));\n  if (only.length > 0) {\n    snippets = filterSnippets(snippets, only);\n  }\n\n  // Map every assembly to a list of snippets, so that we know what implicit\n  // tablet to write the translations to later on.\n  const snippetsPerAssembly = groupBy(\n    snippets.map((s) => ({ key: snippetKey(s), location: projectDirectory(s) })),\n    (x) => x.location,\n  );\n\n  const translatorOptions: RosettaTranslatorOptions = {\n    includeCompilerDiagnostics: options.includeCompilerDiagnostics ?? false,\n    assemblies: assemblies.map((a) => a.assembly),\n    allowDirtyTranslations: options.allowDirtyTranslations,\n  };\n\n  const translator = options.translatorFactory\n    ? options.translatorFactory(translatorOptions)\n    : new RosettaTranslator(translatorOptions);\n\n  // Prime the snippet cache with:\n  // - Cache source file\n  // - Default tablets found next to each assembly\n  if (options.cacheFromFile) {\n    await translator.addToCache(options.cacheFromFile);\n  }\n  translator.addTabletsToCache(...Object.values(await loadAllDefaultTablets(assemblies)));\n\n  if (translator.hasCache()) {\n    const { translations, remaining } = translator.readFromCache(snippets, true, options.includeCompilerDiagnostics);\n    logging.info(`Reused ${translations.length} translations from cache`);\n    snippets = remaining;\n  }\n\n  const diagnostics = [];\n  if (snippets.length > 0) {\n    logging.info('Translating');\n    const startTime = Date.now();\n\n    const result = await translator.translateAll(snippets, {\n      compilationDirectory: options.compilationDirectory,\n      cleanup: options.cleanup,\n    });\n\n    const delta = (Date.now() - startTime) / 1000;\n    logging.info(\n      `Translated ${snippets.length} snippets in ${delta} seconds (${(delta / snippets.length).toPrecision(\n        3,\n      )}s/snippet)`,\n    );\n    diagnostics.push(...result.diagnostics);\n  } else {\n    logging.info('Nothing left to translate');\n  }\n\n  // Save to individual tablet files\n  if (options.writeToImplicitTablets ?? true) {\n    await Promise.all(\n      Object.entries(snippetsPerAssembly).map(async ([location, snips]) => {\n        // Compress the implicit tablet if explicitly asked to, otherwise compress only if the original tablet was compressed.\n        const compressedTablet = options.compressTablet ?? compressedTabletExists(location);\n\n        const asmTabletFile = path.join(\n          location,\n          compressedTablet ? DEFAULT_TABLET_NAME_COMPRESSED : DEFAULT_TABLET_NAME,\n        );\n        logging.debug(`Writing ${snips.length} translations to ${asmTabletFile}`);\n        const translations = snips.map(({ key }) => translator.tablet.tryGetSnippet(key)).filter(isDefined);\n\n        const asmTablet = new LanguageTablet();\n        asmTablet.addSnippets(...translations);\n        await asmTablet.save(asmTabletFile, compressedTablet);\n      }),\n    );\n  }\n\n  // optionally append to the output file\n  if (options.cacheToFile) {\n    logging.info(`Adding translations to ${options.cacheToFile}`);\n    const output = options.trimCache\n      ? new LanguageTablet()\n      : await LanguageTablet.fromOptionalFile(options.cacheToFile);\n    output.addTablets(translator.tablet);\n    await output.save(options.cacheToFile, options.compressCacheToFile);\n  }\n\n  return { diagnostics, tablet: translator.tablet };\n}\n\n/**\n * Only yield the snippets whose id exists in a whitelist\n */\nfunction filterSnippets(ts: TypeScriptSnippet[], includeIds: string[]) {\n  return ts.filter((t) => includeIds.includes(snippetKey(t)));\n}\n\nfunction projectDirectory(ts: TypeScriptSnippet) {\n  const dir = ts.parameters?.[SnippetParameters.$PROJECT_DIRECTORY];\n  if (!dir) {\n    throw new Error(`Snippet does not have associated project directory: ${JSON.stringify(ts.location)}`);\n  }\n  return dir;\n}\n"]}