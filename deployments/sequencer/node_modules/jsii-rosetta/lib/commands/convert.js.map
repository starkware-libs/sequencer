{"version":3,"file":"convert.js","sourceRoot":"","sources":["../../src/commands/convert.ts"],"names":[],"mappings":";;AAmBA,8CAyBC;AA5CD,mDAAyD;AACzD,qEAAiE;AACjE,2FAAsF;AAEtF,4CAA2D;AAe3D,SAAgB,iBAAiB,CAC/B,QAAc,EACd,OAAwB,EACxB,OAAiC,EAAE;IAEnC,MAAM,UAAU,GAAG,IAAI,sBAAU,CAAC,KAAK,CAAC,CAAC;IAEzC,MAAM,QAAQ,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAC,QAAQ,EAAW,CAAC;IAEvE,MAAM,kBAAkB,GAAG,IAAA,4BAAiB,EAC1C,QAAQ,CAAC,QAAQ,EACjB,IAAI,oCAAgB,EAAE,EACtB,IAAI,yDAA0B,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,IAAI,KAAK,EAAE,CAAC,SAAS,EAAE,EAAE;QAC3E,MAAM,UAAU,GAAG,UAAU,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QAC5E,OAAO;YACL,QAAQ,EAAE,IAAI,CAAC,kBAAkB,IAAI,EAAE;YACvC,MAAM,EAAE,UAAU;SACnB,CAAC;IACJ,CAAC,CAAC,CACH,CAAC;IAEF,OAAO;QACL,WAAW,EAAE,kBAAkB;QAC/B,WAAW,EAAE,UAAU,CAAC,WAAW;KACpC,CAAC;AACJ,CAAC","sourcesContent":["import { transformMarkdown } from '../markdown/markdown';\nimport { MarkdownRenderer } from '../markdown/markdown-renderer';\nimport { ReplaceTypeScriptTransform } from '../markdown/replace-typescript-transform';\nimport { AstHandler, AstRendererOptions } from '../renderer';\nimport { TranslateResult, Translator } from '../translate';\nimport { File } from '../util';\n\nexport interface TranslateMarkdownOptions extends AstRendererOptions {\n  /**\n   * What language to put in the returned markdown blocks\n   */\n  languageIdentifier?: string;\n\n  /**\n   * Whether to operate in `strict` mode or not.\n   */\n  strict?: boolean;\n}\n\nexport function translateMarkdown(\n  markdown: File,\n  visitor: AstHandler<any>,\n  opts: TranslateMarkdownOptions = {},\n): TranslateResult {\n  const translator = new Translator(false);\n\n  const location = { api: 'file', fileName: markdown.fileName } as const;\n\n  const translatedMarkdown = transformMarkdown(\n    markdown.contents,\n    new MarkdownRenderer(),\n    new ReplaceTypeScriptTransform(location, opts.strict ?? false, (tsSnippet) => {\n      const translated = translator.translatorFor(tsSnippet).renderUsing(visitor);\n      return {\n        language: opts.languageIdentifier ?? '',\n        source: translated,\n      };\n    }),\n  );\n\n  return {\n    translation: translatedMarkdown,\n    diagnostics: translator.diagnostics,\n  };\n}\n"]}