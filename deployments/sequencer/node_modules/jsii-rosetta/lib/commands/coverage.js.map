{"version":3,"file":"coverage.js","sourceRoot":"","sources":["../../src/commands/coverage.ts"],"names":[],"mappings":";;AAKA,sCA6BC;AAlCD,mDAAkG;AAClG,sCAAsC;AACtC,8DAA0D;AAC1D,wCAA4C;AAErC,KAAK,UAAU,aAAa,CAAC,iBAAoC;IACtE,OAAO,CAAC,IAAI,CAAC,WAAW,iBAAiB,CAAC,MAAM,aAAa,CAAC,CAAC;IAC/D,MAAM,UAAU,GAAG,IAAA,2BAAc,EAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;IAE5D,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,IAAA,kCAAqB,EAAC,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC;IAE3E,MAAM,UAAU,GAAG,IAAI,sCAAiB,CAAC;QACvC,UAAU,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;QAC7C,sBAAsB,EAAE,IAAI;KAC7B,CAAC,CAAC;IACH,UAAU,CAAC,iBAAiB,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,IAAA,kCAAqB,EAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAExF,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,QAAQ,CAAC,MAAM,oBAAoB,CAAC,CAAC;IAC/D,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,UAAU,CAAC,KAAK,CAAC,KAAK,2BAA2B,CAAC,CAAC;IAC7E,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAE3B,MAAM,OAAO,GAAG,UAAU,CAAC,aAAa,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IAC/D,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,OAAO,CAAC,YAAY,CAAC,MAAM,GAAG,OAAO,CAAC,UAAU,2BAA2B,CAAC,CAAC;IACvG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,OAAO,CAAC,YAAY,aAAa,CAAC,CAAC;IAChE,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,OAAO,CAAC,UAAU,mEAAmE,CAAC,CAAC;IACjH,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,OAAO,CAAC,gBAAgB,0BAA0B,CAAC,CAAC;IACjF,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,OAAO,CAAC,oBAAoB,4BAA4B,CAAC,CAAC;IACvF,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,OAAO,CAAC,eAAe,wBAAwB,CAAC,CAAC;IAC9E,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,OAAO,CAAC,iBAAiB,kCAAkC,CAAC,CAAC;IAC1F,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,OAAO,CAAC,SAAS,CAAC,MAAM,2BAA2B,CAAC,CAAC;IAE/E,KAAK,MAAM,SAAS,IAAI,OAAO,CAAC,SAAS,EAAE,CAAC;QAC1C,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,IAAA,wBAAc,EAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACvE,CAAC;AACH,CAAC","sourcesContent":["import { loadAssemblies, allTypeScriptSnippets, loadAllDefaultTablets } from '../jsii/assemblies';\nimport * as logging from '../logging';\nimport { RosettaTranslator } from '../rosetta-translator';\nimport { formatLocation } from '../snippet';\n\nexport async function checkCoverage(assemblyLocations: readonly string[]): Promise<void> {\n  logging.info(`Loading ${assemblyLocations.length} assemblies`);\n  const assemblies = loadAssemblies(assemblyLocations, false);\n\n  const snippets = Array.from(await allTypeScriptSnippets(assemblies, true));\n\n  const translator = new RosettaTranslator({\n    assemblies: assemblies.map((a) => a.assembly),\n    allowDirtyTranslations: true,\n  });\n  translator.addTabletsToCache(...Object.values(await loadAllDefaultTablets(assemblies)));\n\n  process.stdout.write(`- ${snippets.length} total snippets.\\n`);\n  process.stdout.write(`- ${translator.cache.count} translations in cache.\\n`);\n  process.stdout.write('\\n');\n\n  const results = translator.readFromCache(snippets, true, true);\n  process.stdout.write(`- ${results.translations.length - results.dirtyCount} successful cache hits.\\n`);\n  process.stdout.write(`     ${results.infusedCount} infused.\\n`);\n  process.stdout.write(`- ${results.dirtyCount} translations in cache but dirty (ok for pacmak, transliterate)\\n`);\n  process.stdout.write(`     ${results.dirtySourceCount} sources have changed.\\n`);\n  process.stdout.write(`     ${results.dirtyTranslatorCount} translator has changed.\\n`);\n  process.stdout.write(`     ${results.dirtyTypesCount} types have changed.\\n`);\n  process.stdout.write(`     ${results.dirtyDidntCompile} did not successfully compile.\\n`);\n  process.stdout.write(`- ${results.remaining.length} snippets untranslated.\\n`);\n\n  for (const remaining of results.remaining) {\n    process.stdout.write(`     ${formatLocation(remaining.location)}\\n`);\n  }\n}\n"]}