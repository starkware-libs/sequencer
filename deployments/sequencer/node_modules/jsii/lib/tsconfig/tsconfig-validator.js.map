{"version":3,"file":"tsconfig-validator.js","sourceRoot":"","sources":["../../src/tsconfig/tsconfig-validator.ts"],"names":[],"mappings":";;;AACA,kEAAoD;AACpD,8DAAgD;AAChD,4DAA8C;AAC9C,2CAAwE;AAExE,MAAM,QAAQ,GAEV;IACF,SAAS,EAAT,0BAAS;IACT,MAAM,EAAN,uBAAM;IACN,OAAO,EAAP,wBAAO;IACP,GAAG,EAAE,IAAI,mBAAO,EAAE;CACnB,CAAC;AAEF,MAAa,yBAAyB;IAIpC,YAA0B,OAA0C;QAA1C,YAAO,GAAP,OAAO,CAAmC;QAClE,MAAM,aAAa,GAAG,IAAI,mBAAO,CAAC;YAChC,gBAAgB,EAAE,oBAAQ,CAAC,IAAI;SAChC,CAAC,CAAC;QACH,aAAa,CAAC,UAAU,CAAC,OAAO,EAAE,iBAAK,CAAC,GAAG,CAAC,CAAC;QAC7C,aAAa,CAAC,UAAU,CAAC,SAAS,EAAE,iBAAK,CAAC,GAAG,CAAC,CAAC;QAC/C,aAAa,CAAC,UAAU,CAAC,SAAS,EAAE,iBAAK,CAAC,GAAG,CAAC,CAAC;QAC/C,aAAa,CAAC,UAAU,CAAC,SAAS,EAAE,iBAAK,CAAC,GAAG,CAAC,CAAC;QAC/C,aAAa,CAAC,UAAU,CAAC,YAAY,EAAE,iBAAK,CAAC,GAAG,CAAC,CAAC;QAClD,aAAa,CAAC,UAAU,CAAC,cAAc,EAAE,iBAAK,CAAC,GAAG,CAAC,CAAC;QACpD,aAAa,CAAC,UAAU,CAAC,iBAAiB,EAAE,iBAAK,CAAC,OAAO,CAAC,CAAC;QAE3D,IAAI,CAAC,eAAe,GAAG,IAAI,2BAAe,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,iBAAiB,CAAC,CAAC;QACjF,aAAa,CAAC,UAAU,CAAC,iBAAiB,EAAE,CAAC,eAAe,EAAE,EAAE;YAC9D,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;YAC/C,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS,GAAG,IAAI,2BAAe,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC;IAClE,CAAC;IAED;;;;;;OAMG;IACI,QAAQ,CAAC,QAA0B;QACxC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACpC,CAAC;CACF;AAnCD,8DAmCC","sourcesContent":["import { TypeScriptConfig, TypeScriptConfigValidationRuleSet } from '.';\nimport generated from './rulesets/generated.public';\nimport minimal from './rulesets/minimal.public';\nimport strict from './rulesets/strict.public';\nimport { Match, ObjectValidator, RuleSet, RuleType } from './validator';\n\nconst RuleSets: {\n  [name in TypeScriptConfigValidationRuleSet]: RuleSet;\n} = {\n  generated,\n  strict,\n  minimal,\n  off: new RuleSet(),\n};\n\nexport class TypeScriptConfigValidator {\n  private readonly validator: ObjectValidator;\n  private readonly compilerOptions: ObjectValidator;\n\n  public constructor(public ruleSet: TypeScriptConfigValidationRuleSet) {\n    const topLevelRules = new RuleSet({\n      unexpectedFields: RuleType.PASS,\n    });\n    topLevelRules.shouldPass('files', Match.ANY);\n    topLevelRules.shouldPass('extends', Match.ANY);\n    topLevelRules.shouldPass('include', Match.ANY);\n    topLevelRules.shouldPass('exclude', Match.ANY);\n    topLevelRules.shouldPass('references', Match.ANY);\n    topLevelRules.shouldPass('watchOptions', Match.ANY);\n    topLevelRules.shouldPass('typeAcquisition', Match.MISSING);\n\n    this.compilerOptions = new ObjectValidator(RuleSets[ruleSet], 'compilerOptions');\n    topLevelRules.shouldPass('compilerOptions', (compilerOptions) => {\n      this.compilerOptions.validate(compilerOptions);\n      return true;\n    });\n\n    this.validator = new ObjectValidator(topLevelRules, 'tsconfig');\n  }\n\n  /**\n   * Validated the provided config against the set of rules.\n   *\n   * @throws when the config is invalid\n   *\n   * @param tsconfig the tsconfig to be validated, this MUST be a tsconfig as a user would have written it in tsconfig.\n   */\n  public validate(tsconfig: TypeScriptConfig) {\n    this.validator.validate(tsconfig);\n  }\n}\n"]}