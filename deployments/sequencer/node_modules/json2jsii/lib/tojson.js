"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToJsonFunction = void 0;
class ToJsonFunction {
    constructor(baseType) {
        this.baseType = baseType;
        this.fields = {};
        this.functionName = `toJson_${baseType}`;
    }
    /**
     * Adds a field to the struct.
     *
     * @param schemaName The name of the property in the schema ("to")
     * @param propertyName The name of the TypeScript property ("from")
     * @param toJson A function used to convert a value from JavaScript to schema
     * format. This could be `x => x` if no conversion is required.
     */
    addField(schemaName, propertyName, toJson) {
        this.fields[schemaName] = toJson(`obj.${propertyName}`);
    }
    emit(code) {
        const disabledEslintRules = [
            'max-len',
            '@stylistic/max-len',
            'quote-props',
            '@stylistic/quote-props',
        ];
        code.line();
        code.line('/**');
        code.line(` * Converts an object of type '${this.baseType}' to JSON representation.`);
        code.line(' */');
        code.line(`/* eslint-disable ${disabledEslintRules.join(', ')} */`);
        code.openBlock(`export function ${this.functionName}(obj: ${this.baseType} | undefined): Record<string, any> | undefined`);
        code.line('if (obj === undefined) { return undefined; }');
        code.open('const result = {');
        for (const [k, v] of Object.entries(this.fields)) {
            code.line(`'${k}': ${v},`);
        }
        code.close('};');
        code.line('// filter undefined values');
        code.line('return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});');
        code.closeBlock();
        code.line(`/* eslint-enable ${disabledEslintRules.join(', ')} */`);
    }
}
exports.ToJsonFunction = ToJsonFunction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9qc29uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3RvanNvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSxNQUFhLGNBQWM7SUFRekIsWUFBNkIsUUFBZ0I7UUFBaEIsYUFBUSxHQUFSLFFBQVEsQ0FBUTtRQUY1QixXQUFNLEdBQTJCLEVBQUUsQ0FBQztRQUduRCxJQUFJLENBQUMsWUFBWSxHQUFHLFVBQVUsUUFBUSxFQUFFLENBQUM7SUFDM0MsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSSxRQUFRLENBQUMsVUFBa0IsRUFBRSxZQUFvQixFQUFFLE1BQWM7UUFDdEUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxNQUFNLENBQUMsT0FBTyxZQUFZLEVBQUUsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFTSxJQUFJLENBQUMsSUFBVTtRQUNwQixNQUFNLG1CQUFtQixHQUFHO1lBQzFCLFNBQVM7WUFDVCxvQkFBb0I7WUFDcEIsYUFBYTtZQUNiLHdCQUF3QjtTQUN6QixDQUFDO1FBRUYsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ1osSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDLGtDQUFrQyxJQUFJLENBQUMsUUFBUSwyQkFBMkIsQ0FBQyxDQUFDO1FBQ3RGLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsbUJBQW1CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwRSxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFtQixJQUFJLENBQUMsWUFBWSxTQUFTLElBQUksQ0FBQyxRQUFRLGdEQUFnRCxDQUFDLENBQUM7UUFDM0gsSUFBSSxDQUFDLElBQUksQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO1FBRTFELElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUM5QixLQUFLLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDaEQsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzVCO1FBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVqQixJQUFJLENBQUMsSUFBSSxDQUFDLDRCQUE0QixDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLElBQUksQ0FBQywwR0FBMEcsQ0FBQyxDQUFDO1FBRXRILElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsSUFBSSxDQUFDLG9CQUFvQixtQkFBbUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JFLENBQUM7Q0FDRjtBQXBERCx3Q0FvREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb2RlIH0gZnJvbSAnLi9jb2RlJztcblxuZXhwb3J0IGNsYXNzIFRvSnNvbkZ1bmN0aW9uIHtcbiAgLyoqXG4gICAqIFRoZSBuYW1lIHRoZSB0b0pzb24gZnVuY3Rpb24gZm9yIGEgc3RydWN0LlxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IGZ1bmN0aW9uTmFtZTogc3RyaW5nO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgZmllbGRzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge307XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBiYXNlVHlwZTogc3RyaW5nKSB7XG4gICAgdGhpcy5mdW5jdGlvbk5hbWUgPSBgdG9Kc29uXyR7YmFzZVR5cGV9YDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgZmllbGQgdG8gdGhlIHN0cnVjdC5cbiAgICpcbiAgICogQHBhcmFtIHNjaGVtYU5hbWUgVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IGluIHRoZSBzY2hlbWEgKFwidG9cIilcbiAgICogQHBhcmFtIHByb3BlcnR5TmFtZSBUaGUgbmFtZSBvZiB0aGUgVHlwZVNjcmlwdCBwcm9wZXJ0eSAoXCJmcm9tXCIpXG4gICAqIEBwYXJhbSB0b0pzb24gQSBmdW5jdGlvbiB1c2VkIHRvIGNvbnZlcnQgYSB2YWx1ZSBmcm9tIEphdmFTY3JpcHQgdG8gc2NoZW1hXG4gICAqIGZvcm1hdC4gVGhpcyBjb3VsZCBiZSBgeCA9PiB4YCBpZiBubyBjb252ZXJzaW9uIGlzIHJlcXVpcmVkLlxuICAgKi9cbiAgcHVibGljIGFkZEZpZWxkKHNjaGVtYU5hbWU6IHN0cmluZywgcHJvcGVydHlOYW1lOiBzdHJpbmcsIHRvSnNvbjogVG9Kc29uKSB7XG4gICAgdGhpcy5maWVsZHNbc2NoZW1hTmFtZV0gPSB0b0pzb24oYG9iai4ke3Byb3BlcnR5TmFtZX1gKTtcbiAgfVxuXG4gIHB1YmxpYyBlbWl0KGNvZGU6IENvZGUpIHtcbiAgICBjb25zdCBkaXNhYmxlZEVzbGludFJ1bGVzID0gW1xuICAgICAgJ21heC1sZW4nLFxuICAgICAgJ0BzdHlsaXN0aWMvbWF4LWxlbicsXG4gICAgICAncXVvdGUtcHJvcHMnLFxuICAgICAgJ0BzdHlsaXN0aWMvcXVvdGUtcHJvcHMnLFxuICAgIF07XG5cbiAgICBjb2RlLmxpbmUoKTtcbiAgICBjb2RlLmxpbmUoJy8qKicpO1xuICAgIGNvZGUubGluZShgICogQ29udmVydHMgYW4gb2JqZWN0IG9mIHR5cGUgJyR7dGhpcy5iYXNlVHlwZX0nIHRvIEpTT04gcmVwcmVzZW50YXRpb24uYCk7XG4gICAgY29kZS5saW5lKCcgKi8nKTtcbiAgICBjb2RlLmxpbmUoYC8qIGVzbGludC1kaXNhYmxlICR7ZGlzYWJsZWRFc2xpbnRSdWxlcy5qb2luKCcsICcpfSAqL2ApO1xuICAgIGNvZGUub3BlbkJsb2NrKGBleHBvcnQgZnVuY3Rpb24gJHt0aGlzLmZ1bmN0aW9uTmFtZX0ob2JqOiAke3RoaXMuYmFzZVR5cGV9IHwgdW5kZWZpbmVkKTogUmVjb3JkPHN0cmluZywgYW55PiB8IHVuZGVmaW5lZGApO1xuICAgIGNvZGUubGluZSgnaWYgKG9iaiA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0nKTtcblxuICAgIGNvZGUub3BlbignY29uc3QgcmVzdWx0ID0geycpO1xuICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMuZmllbGRzKSkge1xuICAgICAgY29kZS5saW5lKGAnJHtrfSc6ICR7dn0sYCk7XG4gICAgfVxuICAgIGNvZGUuY2xvc2UoJ307Jyk7XG5cbiAgICBjb2RlLmxpbmUoJy8vIGZpbHRlciB1bmRlZmluZWQgdmFsdWVzJyk7XG4gICAgY29kZS5saW5lKCdyZXR1cm4gT2JqZWN0LmVudHJpZXMocmVzdWx0KS5yZWR1Y2UoKHIsIGkpID0+IChpWzFdID09PSB1bmRlZmluZWQpID8gciA6ICh7IC4uLnIsIFtpWzBdXTogaVsxXSB9KSwge30pOycpO1xuXG4gICAgY29kZS5jbG9zZUJsb2NrKCk7XG4gICAgY29kZS5saW5lKGAvKiBlc2xpbnQtZW5hYmxlICR7ZGlzYWJsZWRFc2xpbnRSdWxlcy5qb2luKCcsICcpfSAqL2ApO1xuICB9XG59XG5cbi8qKlxuICogQSBmdW5jdGlvbiB0aGF0IGNvbnZlcnRzIGFuIGV4cHJlc3Npb24gZnJvbSBKYXZhU2NyaXB0IHRvIHNjaGVtYSBmb3JtYXQuXG4gKlxuICogQGV4YW1wbGUgeCA9PiB4XG4gKiBAZXhhbXBsZSB4ID0+IHg/Lm1hcCh5ID0+IHRvSnNvbl9Gb28oeSkpXG4gKi9cbmV4cG9ydCB0eXBlIFRvSnNvbiA9IChleHByZXNzaW9uOiBzdHJpbmcpID0+IHN0cmluZztcbiJdfQ==