[package]
name = "blockifier"
version.workspace = true
edition.workspace = true
repository.workspace = true
license-file.workspace = true
description = "The transaction-executing component in the Starknet sequencer."

[lints]
workspace = true

[features]
cairo_native = ["dep:cairo-native", "starknet_sierra_multicompile/cairo_native"]
native_blockifier = []
reexecution = ["transaction_serde"]
testing = [
  "rand",
  "rstest",
  "rstest_reuse",
  "starknet_api/testing",
  "tokio",
  "tracing",
  "tracing-test",
]
transaction_serde = []

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
anyhow.workspace = true
ark-ec.workspace = true
ark-ff.workspace = true
ark-secp256k1.workspace = true
ark-secp256r1.workspace = true
cached.workspace = true
cairo-lang-casm = { workspace = true, features = ["parity-scale-codec"] }
cairo-lang-runner.workspace = true
cairo-lang-starknet-classes.workspace = true
cairo-native = { workspace = true, optional = true }
cairo-vm.workspace = true
derive_more.workspace = true
indexmap.workspace = true
mockall.workspace = true
itertools.workspace = true
keccak.workspace = true
log.workspace = true
num-bigint.workspace = true
num-integer.workspace = true
num-rational = { workspace = true, features = ["serde"] }
num-traits.workspace = true
papyrus_config.workspace = true
paste.workspace = true
phf = { workspace = true, features = ["macros"] }
rand = { workspace = true, optional = true }
rstest = { workspace = true, optional = true }
rstest_reuse = { workspace = true, optional = true }
semver.workspace = true
serde = { workspace = true, features = ["derive"] }
serde_json = { workspace = true, features = ["arbitrary_precision"] }
sha2.workspace = true
starknet-types-core.workspace = true
starknet_api.workspace = true
starknet_infra_utils.workspace = true
starknet_sierra_multicompile = { workspace = true, optional = true }
strum.workspace = true
strum_macros.workspace = true
tempfile.workspace = true
thiserror.workspace = true
tokio = { workspace = true, optional = true, features = ["macros", "rt-multi-thread"] }
toml.workspace = true
tracing = { workspace = true, optional = true }
tracing-test = { workspace = true, optional = true }

[dev-dependencies]
assert_matches.workspace = true
criterion = { workspace = true, features = ["html_reports"] }
glob.workspace = true
itertools.workspace = true
pretty_assertions.workspace = true
rand.workspace = true
regex.workspace = true
rstest.workspace = true
rstest_reuse.workspace = true
starknet_api = { path = "../starknet_api", features = ["testing"] }
test-case.workspace = true

[build-dependencies]
starknet_infra_utils.workspace = true

[[bench]]
harness = false
name = "blockifier_bench"
path = "bench/blockifier_bench.rs"
required-features = ["testing"]

[[test]]
name = "feature_contracts_compatibility_test"
path = "tests/feature_contracts_compatibility_test.rs"
required-features = ["testing"]

[package.metadata.cargo-machete]
# `paste` is used in the `define_versioned_constants!` macro but may be falsely detected as unused.
ignored = ["paste"]
