[package]
name = "papyrus_node"
version.workspace = true
edition.workspace = true
repository.workspace = true
license-file.workspace = true

[package.metadata.cargo-udeps.ignore]
normal = ["clap", "papyrus_base_layer", "reqwest", "tokio"]

[features]
default = ["rpc"]
rpc = ["papyrus_rpc"]

[[bin]]
name = "central_source_integration_test"
path = "src/bin/central_source_integration_test.rs"
required-features = ["futures-util", "tokio-stream"]

[dependencies]
anyhow.workspace = true
clap = { workspace = true }
const_format.workspace = true
futures.workspace = true
itertools.workspace = true
lazy_static.workspace = true
once_cell.workspace = true
papyrus_base_layer.workspace = true
papyrus_common.workspace = true
papyrus_config.workspace = true
papyrus_consensus.workspace = true
papyrus_monitoring_gateway.workspace = true
papyrus_network.workspace = true
papyrus_p2p_sync.workspace = true
papyrus_rpc = { workspace = true, optional = true }
papyrus_storage.workspace = true
papyrus_sync.workspace = true
reqwest = { workspace = true, features = ["blocking", "json"] }
serde = { workspace = true, features = ["derive"] }
serde_json = { workspace = true, features = ["arbitrary_precision"] }
starknet_api = { workspace = true, features = ["testing"] }
starknet_client.workspace = true
strum.workspace = true
tokio = { workspace = true, features = ["full", "sync"] }
tracing.workspace = true
tracing-subscriber = { workspace = true, features = ["env-filter"] }
validator = { workspace = true, features = ["derive"] }

# Binaries dependencies
futures-util = { workspace = true, optional = true }
tokio-stream = { workspace = true, optional = true }


[dev-dependencies]
assert-json-diff.workspace = true
colored.workspace = true
insta = { workspace = true, features = ["json"] }
metrics-exporter-prometheus.workspace = true
papyrus_test_utils.workspace = true
pretty_assertions.workspace = true
tempfile.workspace = true

[lints.rust]
# See [here](https://github.com/taiki-e/cargo-llvm-cov/issues/370) for a discussion on why this is
# needed (from rust 1.80).
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage_nightly)'] }
