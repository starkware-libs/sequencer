syntax = "proto3";
import "p2p/proto/transaction.proto";
import "p2p/proto/common.proto";

message Vote {
    enum  VoteType {
        Prevote   = 0;
        Precommit = 1;
    };

    // We use a type field to distinguish between prevotes and precommits instead of different
    // messages, to make sure the data, and therefore the signatures, are unambiguous between
    // Prevote and Precommit.
    VoteType      vote_type  = 2;
    uint64        height     = 3;
    uint32        round      = 4;
    // This is optional since a vote can be NIL.
    optional Hash block_hash = 5;
    Address       voter      = 6;
}

message StreamMessage {
    oneof message {
        bytes content = 1;
        Fin fin = 2;
    }
    bytes stream_id = 3;
    uint64 message_id = 4;
}

message ProposalInit {
    uint64 height = 1;
    uint32 round = 2;
    optional uint32 valid_round = 3;
    Address proposer = 4;
}

message TransactionBatch {
    repeated Transaction transactions = 1;
}

message ProposalFin {
    // Identifies all of the content streamed in the proposal.
    Hash proposal_content_id = 1;
}

// Network format:
// 1. First message is ProposalInit
// 2. Last message is ProposalFin
// 3. In between can be any number of other messages.
message ProposalPart {
    oneof message {
        ProposalInit init = 1;
        ProposalFin fin = 2;
        TransactionBatch transactions = 3;
    }
}
