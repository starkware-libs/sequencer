[package]
name = "papyrus_execution"
version = "0.4.0-rc.0"
edition.workspace = true
repository.workspace = true
license-file.workspace = true
description = "Transaction and entry point execution functionality for a Papyrus node."

[features]
testing = ["rand", "rand_chacha", "papyrus_test_utils"]

[dependencies]
anyhow.workspace = true
blockifier = { path = "../blockifier", version = "0.8.0-rc.0"}
cairo-lang-starknet-classes.workspace = true
cairo-vm.workspace = true
indexmap.workspace = true
itertools.workspace = true
lazy_static.workspace = true
once_cell.workspace = true
papyrus_common = { path = "../papyrus_common", version = "0.4.0-rc.0" }
papyrus_config = { path = "../papyrus_config", version = "0.4.0-rc.0" }
papyrus_storage = { path = "../papyrus_storage", version = "0.4.0-rc.0" }
rand = { workspace = true, optional = true }
rand_chacha = { workspace = true, optional = true }
serde = { workspace = true, features = ["derive"] }
serde_json = { workspace = true, features = ["arbitrary_precision"] }
starknet_api = { path = "../starknet_api", version = "0.13.0-rc.0"}
starknet-types-core.workspace = true
papyrus_test_utils = { path = "../papyrus_test_utils", optional = true }
thiserror.workspace = true
tracing.workspace = true

[dev-dependencies]
assert_matches.workspace = true
cairo-lang-casm.workspace = true
cairo-lang-utils.workspace = true
indexmap = { workspace = true, features = ["serde"] }
papyrus_storage = { path = "../papyrus_storage", features = ["testing"] }
pretty_assertions.workspace = true
rand.workspace = true
rand_chacha.workspace = true
papyrus_test_utils = { path = "../papyrus_test_utils" }

[package.metadata.cargo-machete]
# The `rand` crate is used in the `testing` feature, which is optional.
ignored = ["rand"]
