[package]
name = "papyrus_storage"
version.workspace = true
edition.workspace = true
repository.workspace = true
license-file.workspace = true
description = "A storage implementation for a Starknet node."

[features]
document_calls = ["lazy_static"]
testing = ["tempfile"]

[[bin]]
name = "dump_declared_classes"
path = "src/bin/dump_declared_classes.rs"
required-features = ["clap"]

[[bin]]
name = "storage_benchmark"
path = "src/bin/storage_benchmark.rs"
required-features = ["clap", "statistical"]

[dependencies]
byteorder.workspace = true
cairo-lang-casm = { workspace = true, features = ["parity-scale-codec"] }
cairo-lang-starknet-classes.workspace = true
cairo-lang-utils.workspace = true
human_bytes.workspace = true
indexmap = { workspace = true, features = ["serde"] }
integer-encoding.workspace = true
lazy_static = { workspace = true, optional = true }
libmdbx = { workspace = true, features = ["lifetimed-bytes"] }
memmap2.workspace = true
metrics.workspace = true
num-bigint.workspace = true
page_size.workspace = true
papyrus_common.workspace = true
papyrus_config.workspace = true
papyrus_proc_macros.workspace = true
parity-scale-codec.workspace = true
primitive-types.workspace = true
serde = { workspace = true, features = ["derive"] }
serde_json = { workspace = true, features = ["arbitrary_precision"] }
starknet-types-core = { workspace = true, features = ["papyrus-serialization"] }
starknet_api.workspace = true
tempfile = { workspace = true, optional = true }
thiserror.workspace = true
tracing = { workspace = true, features = ["log"] }
validator = { workspace = true, features = ["derive"] }
zstd.workspace = true

# Binaries dependencies
clap = { workspace = true, optional = true }
statistical = { workspace = true, optional = true }


[dev-dependencies]
assert_matches.workspace = true
cairo-lang-casm = { workspace = true, features = ["parity-scale-codec", "schemars"] }
camelpaste.workspace = true
insta = { workspace = true, features = ["yaml"] }
metrics-exporter-prometheus.workspace = true
num-traits.workspace = true
papyrus_test_utils.workspace = true
paste.workspace = true
pretty_assertions.workspace = true
prometheus-parse.workspace = true
rand.workspace = true
rand_chacha.workspace = true
schemars = { workspace = true, features = ["preserve_order"] }
simple_logger.workspace = true
tempfile = { workspace = true }
test-case.workspace = true
test-log.workspace = true
tokio = { workspace = true, features = ["full", "sync"] }

[lints.rust]
# See [here](https://github.com/taiki-e/cargo-llvm-cov/issues/370) for a discussion on why this is
# needed (from rust 1.80).
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage_nightly)'] }
