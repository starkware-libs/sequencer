use crate::dashboard::{Dashboard, Row};
use crate::panels::batcher::{
    PANEL_BATCHED_TRANSACTIONS,
    PANEL_BATCHER_LOCAL_MSGS_PROCESSED,
    PANEL_BATCHER_LOCAL_MSGS_RECEIVED,
    PANEL_BATCHER_LOCAL_QUEUE_DEPTH,
    PANEL_BATCHER_REMOTE_MSGS_PROCESSED,
    PANEL_BATCHER_REMOTE_MSGS_RECEIVED,
    PANEL_BATCHER_REMOTE_VALID_MSGS_RECEIVED,
    PANEL_PROPOSAL_ABORTED,
    PANEL_PROPOSAL_FAILED,
    PANEL_PROPOSAL_STARTED,
    PANEL_PROPOSAL_SUCCEEDED,
};
use crate::panels::class_manager::{
    PANEL_CLASS_MANAGER_LOCAL_MSGS_PROCESSED,
    PANEL_CLASS_MANAGER_LOCAL_MSGS_RECEIVED,
    PANEL_CLASS_MANAGER_LOCAL_QUEUE_DEPTH,
    PANEL_CLASS_MANAGER_REMOTE_MSGS_PROCESSED,
    PANEL_CLASS_MANAGER_REMOTE_MSGS_RECEIVED,
    PANEL_CLASS_MANAGER_REMOTE_VALID_MSGS_RECEIVED,
};
use crate::panels::consensus::{
    PANEL_CENDE_LAST_PREPARED_BLOB_BLOCK_NUMBER,
    PANEL_CENDE_PREPARE_BLOB_FOR_NEXT_HEIGHT_LATENCY,
    PANEL_CENDE_WRITE_BLOB_FAILURE,
    PANEL_CENDE_WRITE_BLOB_SUCCESS,
    PANEL_CENDE_WRITE_PREV_HEIGHT_BLOB_LATENCY,
    PANEL_CONSENSUS_BLOCK_NUMBER,
    PANEL_CONSENSUS_BUILD_PROPOSAL_FAILED,
    PANEL_CONSENSUS_BUILD_PROPOSAL_TOTAL,
    PANEL_CONSENSUS_CACHED_VOTES,
    PANEL_CONSENSUS_DECISIONS_REACHED_BY_CONSENSUS,
    PANEL_CONSENSUS_DECISIONS_REACHED_BY_SYNC,
    PANEL_CONSENSUS_HELD_LOCKS,
    PANEL_CONSENSUS_INBOUND_STREAM_EVICTED,
    PANEL_CONSENSUS_INBOUND_STREAM_FINISHED,
    PANEL_CONSENSUS_INBOUND_STREAM_STARTED,
    PANEL_CONSENSUS_L1_DATA_GAS_MISMATCH,
    PANEL_CONSENSUS_L1_GAS_MISMATCH,
    PANEL_CONSENSUS_L2_GAS_PRICE,
    PANEL_CONSENSUS_MAX_CACHED_BLOCK_NUMBER,
    PANEL_CONSENSUS_NEW_VALUE_LOCKS,
    PANEL_CONSENSUS_NUM_BATCHES_IN_PROPOSAL,
    PANEL_CONSENSUS_NUM_CONNECTED_PEERS,
    PANEL_CONSENSUS_NUM_TXS_IN_PROPOSAL,
    PANEL_CONSENSUS_OUTBOUND_STREAM_FINISHED,
    PANEL_CONSENSUS_OUTBOUND_STREAM_STARTED,
    PANEL_CONSENSUS_PROPOSALS_INVALID,
    PANEL_CONSENSUS_PROPOSALS_NUM_RECEIVED_MESSAGES,
    PANEL_CONSENSUS_PROPOSALS_NUM_SENT_MESSAGES,
    PANEL_CONSENSUS_PROPOSALS_RECEIVED,
    PANEL_CONSENSUS_PROPOSALS_VALIDATED,
    PANEL_CONSENSUS_PROPOSALS_VALID_INIT,
    PANEL_CONSENSUS_REPROPOSALS,
    PANEL_CONSENSUS_ROUND,
    PANEL_CONSENSUS_ROUND_AVG,
    PANEL_CONSENSUS_TIMEOUTS_BY_TYPE,
    PANEL_CONSENSUS_VOTES_NUM_RECEIVED_MESSAGES,
    PANEL_CONSENSUS_VOTES_NUM_SENT_MESSAGES,
};
use crate::panels::gateway::{
    PANEL_GATEWAY_ADD_TX_LATENCY,
    PANEL_GATEWAY_LOCAL_MSGS_PROCESSED,
    PANEL_GATEWAY_LOCAL_MSGS_RECEIVED,
    PANEL_GATEWAY_LOCAL_QUEUE_DEPTH,
    PANEL_GATEWAY_REMOTE_MSGS_PROCESSED,
    PANEL_GATEWAY_REMOTE_MSGS_RECEIVED,
    PANEL_GATEWAY_REMOTE_VALID_MSGS_RECEIVED,
    PANEL_GATEWAY_TRANSACTIONS_FAILED,
    PANEL_GATEWAY_TRANSACTIONS_RECEIVED_BY_SOURCE,
    PANEL_GATEWAY_TRANSACTIONS_RECEIVED_BY_TYPE,
    PANEL_GATEWAY_TRANSACTIONS_RECEIVED_RATE,
    PANEL_GATEWAY_TRANSACTIONS_SENT_TO_MEMPOOL,
    PANEL_GATEWAY_VALIDATE_TX_LATENCY,
};
use crate::panels::http_server::PANEL_ADDED_TRANSACTIONS_TOTAL;
use crate::panels::l1_gas_price::{
    PANEL_L1_GAS_PRICE_PROVIDER_INSUFFICIENT_HISTORY,
    PANEL_L1_GAS_PRICE_PROVIDER_LOCAL_MSGS_PROCESSED,
    PANEL_L1_GAS_PRICE_PROVIDER_LOCAL_MSGS_RECEIVED,
    PANEL_L1_GAS_PRICE_PROVIDER_LOCAL_QUEUE_DEPTH,
    PANEL_L1_GAS_PRICE_PROVIDER_REMOTE_MSGS_PROCESSED,
    PANEL_L1_GAS_PRICE_PROVIDER_REMOTE_MSGS_RECEIVED,
    PANEL_L1_GAS_PRICE_PROVIDER_REMOTE_VALID_MSGS_RECEIVED,
    PANEL_L1_GAS_PRICE_SCRAPER_BASELAYER_ERROR_COUNT,
};
use crate::panels::l1_provider::{
    PANEL_L1_PROVIDER_LOCAL_MSGS_PROCESSED,
    PANEL_L1_PROVIDER_LOCAL_MSGS_RECEIVED,
    PANEL_L1_PROVIDER_LOCAL_QUEUE_DEPTH,
    PANEL_L1_PROVIDER_REMOTE_MSGS_PROCESSED,
    PANEL_L1_PROVIDER_REMOTE_MSGS_RECEIVED,
    PANEL_L1_PROVIDER_REMOTE_VALID_MSGS_RECEIVED,
};
use crate::panels::mempool::{
    PANEL_MEMPOOL_DELAYED_DECLARES_SIZE,
    PANEL_MEMPOOL_GET_TXS_SIZE,
    PANEL_MEMPOOL_LOCAL_MSGS_PROCESSED,
    PANEL_MEMPOOL_LOCAL_MSGS_RECEIVED,
    PANEL_MEMPOOL_LOCAL_QUEUE_DEPTH,
    PANEL_MEMPOOL_PENDING_QUEUE_SIZE,
    PANEL_MEMPOOL_POOL_SIZE,
    PANEL_MEMPOOL_PRIORITY_QUEUE_SIZE,
    PANEL_MEMPOOL_REMOTE_MSGS_PROCESSED,
    PANEL_MEMPOOL_REMOTE_MSGS_RECEIVED,
    PANEL_MEMPOOL_REMOTE_VALID_MSGS_RECEIVED,
    PANEL_MEMPOOL_TOTAL_SIZE_IN_BYTES,
    PANEL_MEMPOOL_TRANSACTIONS_COMMITTED,
    PANEL_MEMPOOL_TRANSACTIONS_DROPPED,
    PANEL_MEMPOOL_TRANSACTIONS_RECEIVED,
    PANEL_MEMPOOL_TRANSACTIONS_RECEIVED_RATE,
    PANEL_MEMPOOL_TRANSACTION_TIME_SPENT,
};
use crate::panels::mempool_p2p::{
    PANEL_MEMPOOL_P2P_BROADCASTED_BATCH_SIZE,
    PANEL_MEMPOOL_P2P_LOCAL_MSGS_PROCESSED,
    PANEL_MEMPOOL_P2P_LOCAL_MSGS_RECEIVED,
    PANEL_MEMPOOL_P2P_LOCAL_QUEUE_DEPTH,
    PANEL_MEMPOOL_P2P_NUM_CONNECTED_PEERS,
    PANEL_MEMPOOL_P2P_NUM_RECEIVED_MESSAGES,
    PANEL_MEMPOOL_P2P_NUM_SENT_MESSAGES,
    PANEL_MEMPOOL_P2P_REMOTE_MSGS_PROCESSED,
    PANEL_MEMPOOL_P2P_REMOTE_MSGS_RECEIVED,
    PANEL_MEMPOOL_P2P_REMOTE_VALID_MSGS_RECEIVED,
};
use crate::panels::sierra_compiler::{
    PANEL_COMPILATION_DURATION,
    PANEL_SIERRA_COMPILER_LOCAL_MSGS_PROCESSED,
    PANEL_SIERRA_COMPILER_LOCAL_MSGS_RECEIVED,
    PANEL_SIERRA_COMPILER_LOCAL_QUEUE_DEPTH,
    PANEL_SIERRA_COMPILER_REMOTE_MSGS_PROCESSED,
    PANEL_SIERRA_COMPILER_REMOTE_MSGS_RECEIVED,
    PANEL_SIERRA_COMPILER_REMOTE_VALID_MSGS_RECEIVED,
};
use crate::panels::state_reader::{
    PANEL_BLOCKIFIER_STATE_READER_CLASS_CACHE_MISS_RATIO,
    PANEL_BLOCKIFIER_STATE_READER_NATIVE_CLASS_RETURNED_RATIO,
    PANEL_NATIVE_COMPILATION_ERROR,
};
use crate::panels::state_sync::{
    PANEL_CENTRAL_SYNC_CENTRAL_BLOCK_MARKER,
    PANEL_P2P_SYNC_NUM_ACTIVE_INBOUND_SESSIONS,
    PANEL_P2P_SYNC_NUM_ACTIVE_OUTBOUND_SESSIONS,
    PANEL_P2P_SYNC_NUM_CONNECTED_PEERS,
    PANEL_STATE_SYNC_BODY_MARKER,
    PANEL_STATE_SYNC_CLASS_MANAGER_MARKER,
    PANEL_STATE_SYNC_HEADER_MARKER,
    PANEL_STATE_SYNC_LOCAL_MSGS_PROCESSED,
    PANEL_STATE_SYNC_LOCAL_MSGS_RECEIVED,
    PANEL_STATE_SYNC_LOCAL_QUEUE_DEPTH,
    PANEL_STATE_SYNC_PROCESSED_TRANSACTIONS,
    PANEL_STATE_SYNC_REMOTE_MSGS_PROCESSED,
    PANEL_STATE_SYNC_REMOTE_MSGS_RECEIVED,
    PANEL_STATE_SYNC_REMOTE_VALID_MSGS_RECEIVED,
    PANEL_STATE_SYNC_REVERTED_TRANSACTIONS,
    PANEL_STATE_SYNC_STATE_MARKER,
};

#[cfg(test)]
#[path = "dashboard_definitions_test.rs"]
mod dashboard_definitions_test;

pub const DEV_JSON_PATH: &str = "Monitoring/sequencer/dev_grafana.json";

const MEMPOOL_P2P_ROW: Row = Row::new(
    "MempoolP2p",
    &[
        PANEL_MEMPOOL_P2P_NUM_CONNECTED_PEERS,
        PANEL_MEMPOOL_P2P_NUM_SENT_MESSAGES,
        PANEL_MEMPOOL_P2P_NUM_RECEIVED_MESSAGES,
        PANEL_MEMPOOL_P2P_BROADCASTED_BATCH_SIZE,
    ],
);

const MEMPOOL_P2P_INFRA_ROW: Row = Row::new(
    "MempoolP2pInfra",
    &[
        PANEL_MEMPOOL_P2P_LOCAL_MSGS_RECEIVED,
        PANEL_MEMPOOL_P2P_LOCAL_MSGS_PROCESSED,
        PANEL_MEMPOOL_P2P_LOCAL_QUEUE_DEPTH,
        PANEL_MEMPOOL_P2P_REMOTE_MSGS_RECEIVED,
        PANEL_MEMPOOL_P2P_REMOTE_VALID_MSGS_RECEIVED,
        PANEL_MEMPOOL_P2P_REMOTE_MSGS_PROCESSED,
    ],
);

const SIERRA_COMPILER_INFRA_ROW: Row = Row::new(
    "SierraCompilerInfra",
    &[
        PANEL_SIERRA_COMPILER_LOCAL_MSGS_RECEIVED,
        PANEL_SIERRA_COMPILER_LOCAL_MSGS_PROCESSED,
        PANEL_SIERRA_COMPILER_LOCAL_QUEUE_DEPTH,
        PANEL_SIERRA_COMPILER_REMOTE_MSGS_RECEIVED,
        PANEL_SIERRA_COMPILER_REMOTE_VALID_MSGS_RECEIVED,
        PANEL_SIERRA_COMPILER_REMOTE_MSGS_PROCESSED,
    ],
);

const STATE_SYNC_INFRA_ROW: Row = Row::new(
    "StateSyncInfra",
    &[
        PANEL_STATE_SYNC_LOCAL_MSGS_RECEIVED,
        PANEL_STATE_SYNC_LOCAL_MSGS_PROCESSED,
        PANEL_STATE_SYNC_LOCAL_QUEUE_DEPTH,
        PANEL_STATE_SYNC_REMOTE_MSGS_RECEIVED,
        PANEL_STATE_SYNC_REMOTE_VALID_MSGS_RECEIVED,
        PANEL_STATE_SYNC_REMOTE_MSGS_PROCESSED,
    ],
);

const CONSENSUS_P2P_ROW: Row = Row::new(
    "ConsensusP2p",
    &[
        PANEL_CONSENSUS_NUM_CONNECTED_PEERS,
        PANEL_CONSENSUS_VOTES_NUM_SENT_MESSAGES,
        PANEL_CONSENSUS_VOTES_NUM_RECEIVED_MESSAGES,
        PANEL_CONSENSUS_PROPOSALS_NUM_SENT_MESSAGES,
        PANEL_CONSENSUS_PROPOSALS_NUM_RECEIVED_MESSAGES,
    ],
);

const STATE_SYNC_P2P_ROW: Row = Row::new(
    "StateSyncP2p",
    &[
        PANEL_P2P_SYNC_NUM_CONNECTED_PEERS,
        PANEL_P2P_SYNC_NUM_ACTIVE_INBOUND_SESSIONS,
        PANEL_P2P_SYNC_NUM_ACTIVE_OUTBOUND_SESSIONS,
    ],
);

const BATCHER_ROW: Row = Row::new(
    "Batcher",
    &[
        PANEL_PROPOSAL_ABORTED,
        PANEL_PROPOSAL_STARTED,
        PANEL_PROPOSAL_SUCCEEDED,
        PANEL_PROPOSAL_FAILED,
        PANEL_BATCHED_TRANSACTIONS,
    ],
);

const BATCHER_INFRA_ROW: Row = Row::new(
    "Batcher Infra",
    &[
        PANEL_BATCHER_LOCAL_MSGS_RECEIVED,
        PANEL_BATCHER_LOCAL_MSGS_PROCESSED,
        PANEL_BATCHER_LOCAL_QUEUE_DEPTH,
        PANEL_BATCHER_REMOTE_MSGS_RECEIVED,
        PANEL_BATCHER_REMOTE_VALID_MSGS_RECEIVED,
        PANEL_BATCHER_REMOTE_MSGS_PROCESSED,
    ],
);

const CLASS_MANAGER_INFRA_ROW: Row = Row::new(
    "Class Manager Infra",
    &[
        PANEL_CLASS_MANAGER_LOCAL_MSGS_RECEIVED,
        PANEL_CLASS_MANAGER_LOCAL_MSGS_PROCESSED,
        PANEL_CLASS_MANAGER_LOCAL_QUEUE_DEPTH,
        PANEL_CLASS_MANAGER_REMOTE_MSGS_RECEIVED,
        PANEL_CLASS_MANAGER_REMOTE_VALID_MSGS_RECEIVED,
        PANEL_CLASS_MANAGER_REMOTE_MSGS_PROCESSED,
    ],
);

const L1_PROVIDER_INFRA_ROW: Row = Row::new(
    "L1 Provider Infra",
    &[
        PANEL_L1_PROVIDER_LOCAL_MSGS_RECEIVED,
        PANEL_L1_PROVIDER_LOCAL_MSGS_PROCESSED,
        PANEL_L1_PROVIDER_LOCAL_QUEUE_DEPTH,
        PANEL_L1_PROVIDER_REMOTE_MSGS_RECEIVED,
        PANEL_L1_PROVIDER_REMOTE_VALID_MSGS_RECEIVED,
        PANEL_L1_PROVIDER_REMOTE_MSGS_PROCESSED,
    ],
);

const L1_GAS_PRICE_INFRA_ROW: Row = Row::new(
    "L1 Gas Price Infra",
    &[
        PANEL_L1_GAS_PRICE_PROVIDER_LOCAL_MSGS_RECEIVED,
        PANEL_L1_GAS_PRICE_PROVIDER_LOCAL_MSGS_PROCESSED,
        PANEL_L1_GAS_PRICE_PROVIDER_LOCAL_QUEUE_DEPTH,
        PANEL_L1_GAS_PRICE_PROVIDER_REMOTE_MSGS_RECEIVED,
        PANEL_L1_GAS_PRICE_PROVIDER_REMOTE_VALID_MSGS_RECEIVED,
        PANEL_L1_GAS_PRICE_PROVIDER_REMOTE_MSGS_PROCESSED,
    ],
);

const BLOCKIFIER_STATE_READER_ROW: Row = Row::new(
    "Blockifier State Reader",
    &[
        PANEL_BLOCKIFIER_STATE_READER_CLASS_CACHE_MISS_RATIO,
        PANEL_BLOCKIFIER_STATE_READER_NATIVE_CLASS_RETURNED_RATIO,
        PANEL_NATIVE_COMPILATION_ERROR,
    ],
);

const CONSENSUS_ROW: Row = Row::new(
    "Consensus",
    &[
        PANEL_CONSENSUS_BLOCK_NUMBER,
        PANEL_CONSENSUS_ROUND,
        PANEL_CONSENSUS_ROUND_AVG,
        PANEL_CONSENSUS_MAX_CACHED_BLOCK_NUMBER,
        PANEL_CONSENSUS_CACHED_VOTES,
        PANEL_CONSENSUS_DECISIONS_REACHED_BY_CONSENSUS,
        PANEL_CONSENSUS_DECISIONS_REACHED_BY_SYNC,
        PANEL_CONSENSUS_PROPOSALS_RECEIVED,
        PANEL_CONSENSUS_PROPOSALS_VALID_INIT,
        PANEL_CONSENSUS_PROPOSALS_VALIDATED,
        PANEL_CONSENSUS_PROPOSALS_INVALID,
        PANEL_CONSENSUS_BUILD_PROPOSAL_TOTAL,
        PANEL_CONSENSUS_BUILD_PROPOSAL_FAILED,
        PANEL_CONSENSUS_REPROPOSALS,
        PANEL_CONSENSUS_NEW_VALUE_LOCKS,
        PANEL_CONSENSUS_HELD_LOCKS,
        PANEL_CONSENSUS_TIMEOUTS_BY_TYPE,
        PANEL_CONSENSUS_NUM_BATCHES_IN_PROPOSAL,
        PANEL_CONSENSUS_NUM_TXS_IN_PROPOSAL,
        PANEL_CONSENSUS_INBOUND_STREAM_STARTED,
        PANEL_CONSENSUS_INBOUND_STREAM_EVICTED,
        PANEL_CONSENSUS_INBOUND_STREAM_FINISHED,
        PANEL_CONSENSUS_OUTBOUND_STREAM_STARTED,
        PANEL_CONSENSUS_OUTBOUND_STREAM_FINISHED,
        PANEL_CONSENSUS_L2_GAS_PRICE,
        PANEL_CENDE_LAST_PREPARED_BLOB_BLOCK_NUMBER,
        PANEL_CENDE_PREPARE_BLOB_FOR_NEXT_HEIGHT_LATENCY,
        PANEL_CENDE_WRITE_PREV_HEIGHT_BLOB_LATENCY,
        PANEL_CENDE_WRITE_BLOB_SUCCESS,
        PANEL_CENDE_WRITE_BLOB_FAILURE,
        PANEL_CONSENSUS_L1_DATA_GAS_MISMATCH,
        PANEL_CONSENSUS_L1_GAS_MISMATCH,
    ],
);

const HTTP_SERVER_ROW: Row = Row::new("Http Server", &[PANEL_ADDED_TRANSACTIONS_TOTAL]);

const STATE_SYNC_ROW: Row = Row::new(
    "State Sync",
    &[
        PANEL_STATE_SYNC_PROCESSED_TRANSACTIONS,
        PANEL_STATE_SYNC_REVERTED_TRANSACTIONS,
        PANEL_CENTRAL_SYNC_CENTRAL_BLOCK_MARKER,
        PANEL_STATE_SYNC_BODY_MARKER,
        PANEL_STATE_SYNC_CLASS_MANAGER_MARKER,
        PANEL_STATE_SYNC_HEADER_MARKER,
        PANEL_STATE_SYNC_STATE_MARKER,
    ],
);

pub const GATEWAY_ROW: Row = Row::new(
    "Gateway",
    &[
        PANEL_GATEWAY_TRANSACTIONS_RECEIVED_BY_TYPE,
        PANEL_GATEWAY_TRANSACTIONS_RECEIVED_BY_SOURCE,
        PANEL_GATEWAY_TRANSACTIONS_RECEIVED_RATE,
        PANEL_GATEWAY_ADD_TX_LATENCY,
        PANEL_GATEWAY_VALIDATE_TX_LATENCY,
        PANEL_GATEWAY_TRANSACTIONS_FAILED,
        PANEL_GATEWAY_TRANSACTIONS_SENT_TO_MEMPOOL,
    ],
);

pub const GATEWAY_INFRA_ROW: Row = Row::new(
    "Gateway Infra",
    &[
        PANEL_GATEWAY_LOCAL_MSGS_RECEIVED,
        PANEL_GATEWAY_LOCAL_MSGS_PROCESSED,
        PANEL_GATEWAY_LOCAL_QUEUE_DEPTH,
        PANEL_GATEWAY_REMOTE_MSGS_RECEIVED,
        PANEL_GATEWAY_REMOTE_VALID_MSGS_RECEIVED,
        PANEL_GATEWAY_REMOTE_MSGS_PROCESSED,
    ],
);

pub const L1_GAS_PRICE_ROW: Row = Row::new(
    "L1 Gas Price",
    &[
        PANEL_L1_GAS_PRICE_PROVIDER_INSUFFICIENT_HISTORY,
        PANEL_L1_GAS_PRICE_SCRAPER_BASELAYER_ERROR_COUNT,
    ],
);

pub const MEMPOOL_ROW: Row = Row::new(
    "Mempool",
    &[
        PANEL_MEMPOOL_TRANSACTIONS_RECEIVED,
        PANEL_MEMPOOL_TRANSACTIONS_RECEIVED_RATE,
        PANEL_MEMPOOL_TRANSACTIONS_DROPPED,
        PANEL_MEMPOOL_TRANSACTIONS_COMMITTED,
        PANEL_MEMPOOL_POOL_SIZE,
        PANEL_MEMPOOL_PRIORITY_QUEUE_SIZE,
        PANEL_MEMPOOL_PENDING_QUEUE_SIZE,
        PANEL_MEMPOOL_TOTAL_SIZE_IN_BYTES,
        PANEL_MEMPOOL_GET_TXS_SIZE,
        PANEL_MEMPOOL_DELAYED_DECLARES_SIZE,
        PANEL_MEMPOOL_TRANSACTION_TIME_SPENT,
    ],
);

pub const MEMPOOL_INFRA_ROW: Row = Row::new(
    "Mempool Infra",
    &[
        PANEL_MEMPOOL_LOCAL_MSGS_RECEIVED,
        PANEL_MEMPOOL_LOCAL_MSGS_PROCESSED,
        PANEL_MEMPOOL_LOCAL_QUEUE_DEPTH,
        PANEL_MEMPOOL_REMOTE_MSGS_RECEIVED,
        PANEL_MEMPOOL_REMOTE_VALID_MSGS_RECEIVED,
        PANEL_MEMPOOL_REMOTE_MSGS_PROCESSED,
    ],
);

pub const COMPILE_TO_CASM_ROW: Row =
    Row::new("Compile sierra to casm", &[PANEL_COMPILATION_DURATION]);

pub const SEQUENCER_DASHBOARD: Dashboard = Dashboard::new(
    "Sequencer Node Dashboard",
    &[
        BATCHER_ROW,
        CONSENSUS_ROW,
        HTTP_SERVER_ROW,
        STATE_SYNC_ROW,
        MEMPOOL_P2P_ROW,
        CONSENSUS_P2P_ROW,
        STATE_SYNC_P2P_ROW,
        GATEWAY_ROW,
        MEMPOOL_ROW,
        BLOCKIFIER_STATE_READER_ROW,
        BATCHER_INFRA_ROW,
        GATEWAY_INFRA_ROW,
        CLASS_MANAGER_INFRA_ROW,
        L1_PROVIDER_INFRA_ROW,
        L1_GAS_PRICE_INFRA_ROW,
        MEMPOOL_INFRA_ROW,
        MEMPOOL_P2P_INFRA_ROW,
        SIERRA_COMPILER_INFRA_ROW,
        COMPILE_TO_CASM_ROW,
        STATE_SYNC_INFRA_ROW,
    ],
);
