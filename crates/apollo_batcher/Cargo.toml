[package]
name = "apollo_batcher"
version.workspace = true
edition.workspace = true
license.workspace = true
repository.workspace = true

[features]
testing = []

[lints]
workspace = true

[dependencies]
apollo_batcher_types.workspace = true
apollo_class_manager_types.workspace = true
apollo_config.workspace = true
apollo_l1_provider_types.workspace = true
apollo_mempool_types.workspace = true
apollo_reverts.workspace = true
apollo_sequencer_infra.workspace = true
apollo_sequencer_metrics.workspace = true
apollo_state_reader.workspace = true
apollo_state_sync_types.workspace = true
apollo_storage.workspace = true
async-trait.workspace = true
blockifier.workspace = true
chrono.workspace = true
futures.workspace = true
indexmap.workspace = true
serde.workspace = true
starknet_api.workspace = true
thiserror.workspace = true
tokio.workspace = true
tracing.workspace = true
validator.workspace = true

[dev-dependencies]
apollo_class_manager_types = { workspace = true, features = ["testing"] }
apollo_infra_utils.workspace = true
apollo_l1_provider_types = { workspace = true, features = ["testing"] }
apollo_mempool_types = { workspace = true, features = ["testing"] }
apollo_sequencer_metrics = { workspace = true, features = ["testing"] }
apollo_storage = { workspace = true, features = ["testing"] }
assert_matches.workspace = true
blockifier = { workspace = true, features = ["testing"] }
cairo-lang-starknet-classes.workspace = true
chrono = { workspace = true }
mempool_test_utils.workspace = true
metrics.workspace = true
metrics-exporter-prometheus.workspace = true
mockall.workspace = true
pretty_assertions.workspace = true
rstest.workspace = true
starknet-types-core.workspace = true
starknet_api = { workspace = true, features = ["testing"] }
